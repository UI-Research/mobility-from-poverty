---
title: "Opportunity for Income Predictor, place-level"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
params:
  year: "2023"
---

*Program for the creation of the Opportunity for Income Predictor at the place level*

ACS Code: Initially written by Tina Chelidze and updated by JP Walsh 2022-2023 & in 2025.

Primary data derived from the IPUMS API.

Based on processes developed by Paul Johnson and Kevin Werner in SAS.

*User note* This program depends on extracts from the IPUMS ACS API interface. If you are updating the extract please remember to update the note of the date of latest extract in the Housekeeping section of this program.

*Internal users* If you are an internal tester using the AWS feature of this program remember to enter the passkey into your environment using Sys.setenv(). Authentication steps are nicely explained in this [blog](https://www.gormanalysis.com/blog/connecting-to-aws-s3-with-r/). You will have to request access to the access key.

*User warning* The ACS micro data used to create this metric is large and will take time to read in. It is strongly recommended that you use a server with significant computing power to run this.

Please check that no folders in the filepath that you have cloned this repostiory to include the acronym "UMF" - this will throw an error from the extract_ipums_aws function. To check your file path you can use the function here::here().

## Housekeeping

Read in packages for use. If you do not have an IPUMS API key you will need to make one via the [IPUMS website](https://www.ipums.org/).

```{r}
library(tidyverse)
library(Hmisc)
library(ipumsr)
library(reactable)
library(srvyr)
library(scales)

options(scipen = 999)

theme_set(theme_minimal())

# DO NOT PUSH YOUR API KEY. You only have to run this once and then comment it out as below.
#set_ipums_api_key("Your KEY", save = TRUE)

s3_dir <- "metric_name/data/acs"
my_bucket <- "mobility-from-poverty-test"

source(here::here("functions", "API", "extract_ipums_aws.R"))
source(here::here("functions", "API", "ipums_repwt_household_aws.R"))
source(here::here("functions", "testing", "evaluate_final_data.R"))
source(here::here("01_financial-well-being", "R", "finalize_metric.R"))
source(here::here("01_financial-well-being", "R", "calc_income_quantiles.R"))
```

Date of IPUMS extract. Denote the latest date that the IPUMS extract was changed and pulled both for the overall data and the repweights. The recommended date notation format is "mm_dd_yy". 

For internal reviewers, if you plan to utilize AWS keep this date as it was last enetered by the metric lead unless you intend to change the extract.

```{r}
ipums_extract_date <- "01_13_25"
ipums_repwt_extract_date <- "01_13_25"
```

If this is to update a single year of new data please set single_year_update to "Yes". If not, set it to "No".

```{r}
single_year_update = "No"
```

Define existing intermediate years and read them into function to combine. 

```{r}
existing_years <- c("2014", "2015", "2016", "2017", "2018", "2019", "2021", "2022", "2023")
```

## Read ACS Data

Read in the ACS extracts using the `extract_ipums()` function. Make sure to change the survey list to reflect what years you want to include in the data. The surveys being used in the code are defined in the code chunk below. For a list of available ACS surveys and their titles via the IPUMSR package you can run the following function: get_sample_info("acs").

```{r}

acs_surveys <- list(paste0("us", params$year, "a"))

```


### Household-Level Data

Run extract. This will trigger an import process through IPUMS. It is encouraged to add detail to your extract description so it is clear what the extract was used for.

Date of latest extract noted above. If a new IPUMS pull is required the extract_date argument below must be updated to track that new data was downloaded. The extract only needs to be updated if changes or additions are required from the IPUMS pull (such as new dates or variables). 

```{r}
acs <- extract_ipums_aws(
  extract_name = paste0("umf_data_", params$year, "_employment_all"),
  extract_date = ipums_extract_date,
  extract_description = paste0("Microdata pull for Mobility Metric Predictors.
  American Community Survey, overall,", params$year, "(1-year)."),
  survey = acs_surveys
)

```

Isolate data to include each household only once (PERNUM == 1 counts head of household only).

```{r}
acs_hh <- acs %>%
  filter(pernum == 1)

```

Look at the distribution of survey samples in the data. The number of unique samples in the data should match the number of surveys selected in the `extract_ipums()` function above.

```{r}
count(acs_hh, sample)
```


### Replicate Weights 

Read in household-level replicate weights for the entire population. These will be used in creating standard errors for the income quantile calculation. 
```{r}
repwts <- ipums_repwt_household_aws(
  extract_name = paste0("household_replicate_weights_", params$year, "_1year"),
  extract_date = ipums_repwt_extract_date,
  extract_description = paste0("Household replicate weights for Income Opportunities 
  Metric Predictors. American Community Survey,", params$year, "(1-year)."),
  survey = acs_surveys
)  %>% 
  select(-cbserial, -cbpernum)

```

Look at the distribution of ACS survey samples in the data. The number of different samples should align with the number of surveys selected in the extract ipums function.

```{r}
count(repwts, sample)

```

Remove the sample variable.

```{r}
repwts_hh <- repwts %>% 
  select(-sample)

```

### Merge on repwts

Merge the replicate weights on to the ACS samples.
```{r}
length(unique(pull(acs_hh, unique_person_id)))

length(unique(pull(repwts_hh, unique_person_id)))

acs_combined <- 
  left_join(
    acs_hh,
    repwts_hh,
    by = "unique_person_id"
  )

length(unique(pull(acs_combined, unique_person_id)))

rm(acs_hh)
rm(repwts_hh)

```


## Clean Data

Missing data is reported in a variety of ways by IPUMS data. This step walks through the missing values in key variables and checks that we are dealing with them appropriately. 

* **Vacancy:** reported as "0". Note there should be no vacancy results by default of the structure of census data read in (all should be "0"). Confirm this is true with the following test.

```{r}
stopifnot(all(acs_combined$vacancy == "0"))
```

* **HHINCOME:** N/As reported as "9999999".
There is a large share of records missing HHINCOME. However, note there are no vacancy results by default of the structure of census data read in.

```{r}
acs_combined %>% 
  ggplot(aes(x = hhincome)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("Household Income Variable Results") +
  ylab("Density")
```

Turn the missing/"not in universe" values for the `hhincome` variable into NAs. Rename to the more meaningful "household_income". 

```{r}

acs_clean <- acs_combined %>%
  mutate(household_income = ifelse(hhincome == 9999999, NA_integer_,
                          hhincome)
  )

```

Look at distribution of `household_income` after adjustment. Some outliers will still exist but bunching around the missing value should not be present.

```{r}

acs_clean %>% 
  ggplot(aes(x = household_income)) +
  geom_density(adjust = 5, color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("Household Income Variable Results") +
  ylab("Density")

```

Select our group quarters, we want to keep only households including additional households under the 2000 definition. With household income we do not consider group quarters.
```{r}
acs_clean %>% 
  group_by(gq) %>% 
  count()
```

```{r}
acs_clean <- acs_clean %>%
  filter(gq %in% c("Households under 1970 definition", 
                   "Additional households under 1990 definition",
                   "Additional households under 2000 definition"))
```

Check that group quarters fall only into household categories.

```{r}
acs_clean %>% 
  count(gq) %>% 
  ggplot(mapping = aes(x = gq, y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("GQ, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "GQ",
       y = NULL) +
  scale_x_discrete(labels = label_wrap(10))

```

## Crosswalk

Read in the PUMA to place crosswalk file. This file is created by the program generate_puma_place_crosswalks.rmd in the geographic-crosswalks folder. 

```{r}
puma_place_crosswalk <- read_csv(
  here::here("geographic-crosswalks", "data", "crosswalk_puma_to_place.csv")
)

```

Create a version with just unique place for creating a version of the data that matches the UMF place list.

```{r}
place_list <- puma_place_crosswalk %>% 
  select(statefip, place) %>% 
  filter(statefip != 72) %>% 
  unique()
```

## Merge Crosswalk 

Create a variable in the ACS data indicating whether the survey is pre or post-2022. This will be used to join on the correct crosswalk information.

```{r}
acs_clean <- acs_clean %>% 
  mutate(crosswalk_period = ifelse(year < 2022, "pre-2022", "2022"))

```

Check that the assignment worked. All years prior to 2022 should be designated "pre-2022".

```{r}
count(acs_clean, crosswalk_period, year)

```

Join the cleaned ACS data onto the crosswalk.

```{r}
acs_crosswalked <- left_join(
  acs_clean, 
  puma_place_crosswalk, 
  by = c("crosswalk_period", "statefip","puma"),
  relationship = "many-to-many"
)

rm(acs_clean)

```

Check that each place has joined to many ACS records. We select the largest 486 places in our crosswalk, all 486 unique places should be connected to multiple records.
```{r}
acs_crosswalked %>% 
  group_by(place, statefip) %>% 
  count()
```

Drop any observations with NA for `afact` (i.e. there is no place of interest overlapping this PUMA).
```{r}
count(acs_crosswalked, is.na(afact))

acs_crosswalked <- acs_crosswalked %>% 
  drop_na(afact)

```

Also filter out cases where `afact` is equal to zero. These cases will not be counted in the metric calculation.

```{r}
count(acs_crosswalked, afact == 0)

acs_crosswalked <- acs_crosswalked %>% 
  filter(afact > 0)

```

Adjust the household weight to account for PUMA-to-place mapping (those where the PUMA is not entirely inside the place).

```{r}
select(acs_crosswalked, hhwt, repwt1, repwt80, afact)

acs_crosswalked <- acs_crosswalked %>%
  mutate(hhwt = hhwt * afact,
         across(matches("repwt[0-9]+"), ~.x * afact))

select(acs_crosswalked, hhwt, repwt1, repwt80, afact) 

```

Apply the Adjust variable to `household_income`. Adjust converts the dollar amounts to the amount that they would have been had they been earned entirely during the calendar year. This is to deal with households being surveyed at different times during the year.

```{r}

acs_crosswalked <- acs_crosswalked %>%
  mutate(
    household_income = household_income*adjust
  ) 

```

Confirm there are no missing values remaining in the data set for the household income variable. 

```{r}
acs_crosswalked %>%
  filter(is.na(household_income)) %>% 
  count()

```

Confirm there are no vacant properties included in the data.

```{r}
acs_crosswalked %>%
  filter(is.na(vacancy)) %>% 
  count()

```

## Create income metric: All

Create the income metric. 

Objective: calculate the 20th, 50th and 80th quantiles of income by place for all households.

Aggregation should be weighted by HHWT (this is a household level statistic).

### Pre-drop suppressed cells

First, to save time when processing the metric, calculate the effective sample count for each place, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include places with less than 30 effective samples.

```{r}
#| label: all-effective-samples

acs_all <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, place) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_all %>%
  group_by(year, sample, crosswalk_period, statefip, place) %>%
  summarize(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Remove records from places below the size quality cutoff. 

```{r}
#| label: subset-all

acs_all <- acs_all %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

Calculate the place-level metrics. 

```{r}
#| label: calc-all

results_all <- acs_all %>%
  group_split(statefip) %>% 
  map_dfr(~ calc_income_quantiles(.data = .x, .geo_level = place))

```

Clean up the confidence interval bounds and sort the data.

```{r}
#| label: finalize-all

results_all <- finalize_metric(results_all, 
                               .geo_level = place)

```

```{r}
rm(acs_all)

```

## Add Suppressed Rows to Data

To create the metric we suppressed places that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes places that were suppressed prior to the survey_mean calculation. 

Expand the place_list file so it includes every year in the results. Join the results onto this file and test that the number of records matches the total number of places we anticipate.
```{r}
expanded_place_list <- place_list %>% 
  left_join(results_all, by = c("statefip", "place"), relationship = "many-to-many") %>%
  mutate(geoid = paste0(statefip, place)) %>% 
  expand(year, geoid) %>% 
  mutate(statefip = str_sub(geoid, 1, 2),
         place = str_sub(geoid, 3, 7)) 

results_all_expand <- expanded_place_list %>% 
  left_join(results_all, by = c("year", "statefip", "place")) %>% 
  filter(!is.na(year))

stopifnot(nrow(results_all_expand) == 486 * n_distinct(results_all_expand$year))

```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst.

The data quality flag is based on the allocation of the PUMAs that make up a county, which comes from the crosswalk file, and the effective sample size of the county. When the effective sample size is less than 30 all records for that county will be reported as `NA`, including `pctl_income_quality`.

```{r}
metrics_income_all <- results_all_expand %>% 
  mutate(
    pctl_income_20_quality = if_else(
      is.na(pctl_income_20), 
      NA_real_,
      geographic_allocation_quality
    ),
    pctl_income_50_quality = if_else(
      is.na(pctl_income_50), 
      NA_real_,
      geographic_allocation_quality
    ),
    pctl_income_80_quality = if_else(
      is.na(pctl_income_80), 
      NA_real_,
      geographic_allocation_quality
    )
  )
```

### Write out intermediate data

```{r}
if(isTRUE(bucket_exists(bucket = my_bucket))){
 if (!aws.s3::object_exists(paste0(s3_dir, "/metrics_income_all", "_", params$year[1], ".csv"), bucket = my_bucket)){
    
    # write file to S3
    tmp <- tempfile()
    on.exit(unlink(tmp))
    write_csv(metrics_income_all, file = tmp)
    
    # put object with an upload progress bar
    put_object(tmp, object = paste0(s3_dir, "/metrics_income_all", "_", params$year, ".csv"), bucket = my_bucket, 
               show_progress = TRUE, multipart = FALSE)
    
  }
}
```

If updating a single year the program ends here. To see validation results re-run with selection that all years of intermediate data are available.

```{r}
if(single_year_update == "Yes"){
  knitr::knit_exit()
}
```

## Validation

Validate results for all years of available output.

### Read intermediate files

Read in the intermediate files created for each ACS year available.  

Function reads the CSVs from intermediate folder or from AWS if the user has access.

```{r}
read_intermediate <- function(year, file_type){
  
  if(isTRUE(bucket_exists(bucket = my_bucket))) {
    
    data_year <- s3read_using(FUN=read_csv, 
                 bucket = my_bucket, 
                 object=paste0(s3_dir, "/metrics_income_", file_type, "_", year, ".csv")) %>% 
      mutate(crosswalk_period = as.character(crosswalk_period))
  
  
  }
  else{
  
  read_csv(paste0(here::here("01_financial-well-being", "data", "intermediate", "income"), 
                  "/", "metrics_income_", file_type, "_", year, ".csv"))
  }
  
}
```

```{r}

metrics_income_all <- map_df(.x = existing_years, .f = ~read_intermediate(year = .x,
                                                                          file_type = "all"))
```

Summarize the predictors for the 1-year and 5-year data.

```{r}
metrics_income_all %>% 
  select(pctl_income_20:pctl_income_80) %>% 
  summary()

```

Look at distributions of income percentiles by place for all (latest year of data).

```{r}
metrics_income_all %>% 
  filter(year == params$year) %>% 
  select(pctl_income_20, pctl_income_50, pctl_income_80) %>% 
  pivot_longer(cols = c(pctl_income_20, pctl_income_50, pctl_income_80), names_to = "income", values_to = "percentile") %>% 
  ggplot(aes(x = percentile, color = income, fill = income)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("Income percentiles (1-year data)") +
  ylab("Density")
```

Look at the counts of the quality flag (all years). We look at quality for `pctl_income_20`, given how the quality variable is created it will be identical to the quality results for income_50 and income_80.
```{r}
metrics_income_all %>% 
  select(pctl_income_20_quality) %>% 
  ggplot(aes(x = pctl_income_20_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  theme_minimal() +
  ggtitle("Quality Flag (1-year data") +
  ylab("Count")
```

Tabulate share of data suppressed by year.
```{r}
metrics_income_all %>% 
  group_by(year) %>% 
  filter(is.na(pctl_income_20)) %>% 
  count()
```

## Final Test and Export

Rename state.

```{r}
metrics_income_all <- metrics_income_all %>% 
  rename("state" = "statefip")
```

Order the variables how we want.

```{r}
metrics_income_all <- metrics_income_all %>% 
  select(year, state, place, pctl_income_20, pctl_income_20_lb, 
         pctl_income_20_ub,
         pctl_income_20_quality,
         pctl_income_50, pctl_income_50_lb, 
         pctl_income_50_ub, 
         pctl_income_50_quality,
         pctl_income_80, pctl_income_80_lb, 
         pctl_income_80_ub,
         pctl_income_80_quality)
```

Run file through evaluate final data function.

```{r}

evaluate_final_data(data = metrics_income_all, exp_form_path = here::here("10a_final-evaluation", "evaluation_form_income_overall_place.csv"), geography = "place", subgroups = FALSE, confidence_intervals = TRUE)

```

### Export as CSV

```{r}

metrics_income_all %>% 
  head(10)

write_csv(metrics_income_all, 
          here::here("01_financial-well-being", "final", "metrics_income_place_all_longitudinal.csv"))

```





