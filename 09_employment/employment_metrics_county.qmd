---
title: "Employment Opportunities Predictor, County-level"
author: "JP Walsh and Aaron R. Williams"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

*Program for the creation of the Employment Opportunities Upward Mobility Predictor at the County-level*

ACS Code: Initially written by Tina Chelidze and updated by JP Walsh 2022-2023.

Primary data derived from the IPUMS API.

Based on processes developed by Paul Johnson and Kevin Werner in SAS.

## Housekeeping

Read in packages for use. If you do not have an IPUMS API key you will need to make one via the [IPUMS website](https://www.ipums.org/).

```{r}
library(tidyverse)
library(ipumsr)
library(reactable)
library(srvyr)
library(scales)
library(furrr)
library(tictoc)

options(scipen = 999)
options(future.globals.maxSize= 150000000000)

theme_set(theme_minimal())

# DO NOT PUSH YOUR API KEY. You only have to run this once and then comment it out as below.
#set_ipums_api_key("Your KEY", save = TRUE)

source(here::here("functions", "API", "extract_ipums.R"))
source(here::here("functions", "API", "ipums_repwt_employment.r"))

```

```{r}
calculate_survey_mean <- function(.data) {
  
  .data %>%
    as_survey_rep(
      weights = perwt, 
      repweights = matches("repwtp[0-9]+"),
      type = "JK1",
      scale = 4 / 80,
      rscales = rep(1, 80), 
      mse = TRUE
    ) %>% 
    group_by(year, crosswalk_period, statefip, county) %>% 
    summarise(
      share_employed = survey_mean(employed, vartype = "ci"),
      n = n()
    ) %>%
    ungroup()
  
}

calc_survey_mean_subgroup <- function(.data, .subgroup) {
  
  .data %>%
    as_survey_rep(
      weights = perwt, 
      repweights = matches("repwtp[0-9]+"),
      type = "JK1",
      scale = 4 / 80,
      rscales = rep(1, 80), 
      mse = TRUE
    ) %>% 
    group_by(year, crosswalk_period, statefip, county, {{ .subgroup }}) %>% 
    summarise(
      share_employed = survey_mean(employed, vartype = "ci"),
      n = n()
    ) %>%
    ungroup()
  
}

finalize_metric <- function(.data) {
  
  .data %>%
    arrange(year, statefip, county) %>%
    mutate(
      share_employed_lb = pmax(share_employed_low, 0),
      share_employed_ub = pmin(share_employed_upp, 1)
    ) %>%
    select(-share_employed_low, -share_employed_upp, -n)
  
}
```

## Read ACS Data

### Person-Level Data

Read in the ACS extracts using the `extract_ipums()` function. Make sure to change the survey list to reflect what years you want to include in the data. Currently we are including three years of 1-year data (2018a, 2021a, and 2022a) and two years of 5-year data (2018c and 2021c). 5-year 2022 data will be added pending its release.

```{r}
acs <- extract_ipums(
  extract_name = "umf_data_18_22",
  extract_description = "Microdata pull for Mobility Metric Predictors. 
  American Community Survey, years 2018, 2019 and 2022 (1 and 5-year).",
  survey = list("us2018a", "us2021a", "us2022a", "us2018c", "us2021c")
) 

```

```{r}
acs <- acs %>%
  filter(sample %in% c("2018 ACS", "2021 ACS", "2022 ACS"))

```

Look at the distribution of survey samples in the data. The number of unique samples in the data should match the number of surveys selected in the `extract_ipums()` function above.

```{r}
count(acs, sample)

```

Isolate the data to 25-54 year-olds. This is the age-range included in the employment calculation. Note: the replicate weights are limited to these ages during the data pull. 

```{r}
acs <- acs %>% 
  filter(age >= 25 & age <= 54) 

```

### Replicate Weights 

Read in person-level replicate weights for the 25 to 54 year old population. These will be used in creating standard errors for the employment opportunity calculation. 

```{r}
repwts_person <- ipums_repwt_employment(
  extract_name = "employment_replicate_weights",
  extract_description = "Person replicate weights for Employment Opportunities 
  Metric Predictors. American Community Survey, years 2018, 2019 and 2022 
  (1 and 5-year).",
  survey = list("us2018a", "us2021a", "us2022a", "us2018c", "us2021c")
)  %>% 
  select(-cbserial, -cbpernum)

```

Look at the distribution of ACS survey samples in the data. The number of different samples should align with the number of surveys selected in the extract ipums function.

```{r}
count(repwts_person, sample)

```

Remove the sample variable.

```{r}
repwts_person <- repwts_person %>% 
  select(-sample)

```

### Merge on repwts

```{r}
length(unique(pull(acs, unique_person_id)))

length(unique(pull(repwts_person, unique_person_id)))

acs_combined <- 
  left_join(
    acs,
    repwts_person,
    by = "unique_person_id"
  )

length(unique(pull(acs_combined, unique_person_id)))

rm(acs)
rm(repwts_person)

```

## Clean Data

Missing data is reported in a variety of ways by IPUMS - listed below:

* **Age:** No missing values reported in variable description.
* **Empstat:** N/As reported as "0".
* **Vacancy:** reported as "0". 

There are many records with the value missing for `empstat`. The distribution of age looks reasonable (no bunching or extreme outliers). Note there are no vacancy results by default of the structure of census data read in.

```{r}
acs_combined %>% 
  count(empstat) %>% 
  ggplot(mapping = aes(x = factor(empstat), y = n)) +
  geom_col() +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(
    title = "Empstat, All Records",
    x = "Employment Status",
    y = NULL
  )

acs_combined %>% 
  ggplot(aes(x = age)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  labs(
    title = "Age Variable Results",
    y = "Density"
  )

acs_combined %>% 
  ggplot(aes(x = vacancy)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  labs(
    title = "Vacancy Variable Results",
    y = "Density"
  )

```

Turn the missing/"not in universe" value from the empstat variable into NAs.

```{r}
acs_clean <- acs_combined %>%
  mutate(
    empstat = ifelse(
      empstat == 0, 
      NA_integer_,
      empstat)
  )

```

Look at distribution of `empstat` after adjustment. There should be no more records with the value "0".

```{r}
acs_clean %>% 
  count(empstat) %>% 
  ggplot(mapping = aes(x = factor(empstat), y = n)) +
  geom_col() +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(
    title = "Empstat, All Records",
    x = "Employment Status",
    y = NULL
  )

```

Filter for group quarters (GQ), we want to keep only households including additional households under updated definitions.

```{r}
count(acs_clean, gq)

```

```{r}
acs_clean <- acs_clean %>%
  filter(gq %in% c("Households under 1970 definition", 
                   "Additional households under 1990 definition",
                   "Additional households under 2000 definition"))
```

Check that group quarters fall only into household categories.

```{r}
acs_clean %>% 
  count(gq) %>% 
  ggplot(mapping = aes(x = gq, y = n)) +
  geom_col() +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_x_discrete(labels = label_wrap(10)) +
  labs(
    title = "GQ, All Records",
    x = "GQ",
    y = NULL
  )

```

### Create race variable

Evaluate the values in the RACE and HISPAN variables.

IPUMS documented values for RACE: 

* 1 White
* 2 Black/African American/Negro
* 3 American Indian or Alaska Native 
* 4 Chinese 
* 5 Japanese
* 6 Other Asian or Pacific Islander 
* 7 Other race 
* 8 Two major races 
* 9 Three or more major races

IPUMS documented values for HISPAN: 

* 0 Not Hispanic 
* 1 Mexican 
* 2 Puerto Rican 
* 3 Cuban 
* 4 Other 
* 9 Not Reported 

Look at the distribution of values for the race and hispan variables.

```{r}
acs_clean %>% 
  count(race) %>% 
  ggplot(mapping = aes(x = n, y = race)) +
  geom_col() +
  geom_text(mapping = aes(label = n), hjust = -0.1) +    
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_y_discrete(labels = label_wrap(20)) +
  labs(
    title = "Race, All Records",
    x = "Race",
    y = NULL
  )

acs_clean %>% 
  count(hispan) %>% 
  ggplot(mapping = aes(x = n, y = hispan)) +
  geom_col() +
  geom_text(mapping = aes(label = n), hjust = -0.1) +    
  scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_y_discrete(labels = label_wrap(20)) +
  labs(
    title = "Hispan, All Records",
    x = "Hispan",
    y = NULL
  )

```

Create the race/ethnicity variable. For race/ethnicity categories that are not coded as Hispanic, Hispan must be equal to "Not Hispanic". 

Rename the values from number category to race label: 

* Race is Black/African American and Hispan is Not Hispanic = "Black, Non-Hispanic"
* Hispan is not equal to Not Hispanic = "Hispanic"
* Race is not Black or White and Hispan is Not Hispanic  = "Other Races and Ethnicities" 
* Race is White and Hispan is Not Hispanic = "White, Non-Hispanic" 
  
```{r}
acs_clean <- acs_clean %>%
  mutate(
    subgroup_race = case_when(
      hispan != "Not Hispanic" ~ "Hispanic",
      race == "White" ~ "White, Non-Hispanic",
      race == "Black/African American" ~ "Black, Non-Hispanic",
      !race %in% c("Black/African American", "White") ~ "Other Races and Ethnicities"
    )
  )

```

Look at subgroup distribution.

```{r}
acs_clean %>% 
  count(subgroup_race) %>% 
  ggplot(mapping = aes(x = factor(subgroup_race), y = n)) +
  geom_col() +
  geom_text(mapping = aes(label = n), vjust = -1) +  
  scale_x_discrete(labels = label_wrap(10)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(
    title = "Race/Ethnicity, All Records",
    x = "Race",
    y = NULL
  )
  
```

### Create gender variable

Evaluate the values in the gender variable.

IPUMS documented values for SEX: 

* 1 Male
* 2 Female
* 9 Missing/blank 

Look at the distribution of values for the sex variable. 

```{r}
acs_clean %>% 
  count(sex) %>% 
  ggplot(mapping = aes(x = sex, y = n)) +
  geom_col() +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_x_discrete(labels = label_wrap(10)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(
    title = "sex, All Records",
    x = "Sex",
    y = NULL
  )
  
```

Create a variable for subgroup_gender from the sex variable. The titles remain the same but any values outside of Male and Female are mutated to NA character variables. 

```{r}
acs_clean <- acs_clean %>% 
  mutate(subgroup_gender = case_when(
    sex == "Male" ~ "Male",
    sex == "Female" ~ "Female",
    TRUE ~ NA_character_)
  )

```

Check the variable breakout. This should be approximately 50/50.

```{r}
acs_clean %>% 
  count(subgroup_gender) %>% 
  ggplot(mapping = aes(x = subgroup_gender, y = n)) +
  geom_col() +
  ggtitle("Subgroup Gender, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Gender",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

### Create disability variable

The ACS includes 5 variables covering physical and mental disabilities (DIFFCARE, DIFFSENS, DIFFMOB, DIFFPHYS, DIFFREM). Evaluate the values in these variables and create an overall subgroup for disability.
We will count an individual to be disabled if they answer yes or have any of these difficulties. 

* IPUMS documented values for DIFFCARE (Self-care difficulty): 
  + 0 N/A
  + 1 No
  + 2 Yes 

Plot the options for diffcare below.

```{r}
acs_clean %>% 
  count(diffcare) %>% 
  ggplot(mapping = aes(x = diffcare, y = n)) +
  geom_col() +
  ggtitle("Self-care difficulty, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Diffcare",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

* IPUMS documented values for DIFFSENS (Vision or hearing difficulty): 
  + 0 N/A
  + 1 No vision or hearing difficulty
  + 2 Has vision or hearing difficulty

Plot the options for diffsens below.

```{r}

acs_clean %>% 
  count(diffsens) %>% 
  ggplot(mapping = aes(x = diffsens, y = n)) +
  geom_col() +
  ggtitle("Vision or Hearing difficulty, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Diffsens",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

* IPUMS documented values for DIFFMOB (Independent living difficulty): 
  + 0 N/A
  + 1 No independent living difficulty
  + 2 Has independent living difficulty

Plot the options for diffmob below.

```{r}
acs_clean %>% 
  count(diffmob) %>% 
  ggplot(mapping = aes(x = diffmob, y = n)) +
  geom_col() +
  ggtitle("Independent living difficulty, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Diffmob",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

* IPUMS documented values for DIFFPHYS (Ambulatory difficulty): 
  + 0 N/A
  + 1 No ambulatory difficulty
  + 2 Has ambulatory difficulty 
  
Plot the options for diffphys below.

```{r}
acs_clean %>% 
  count(diffphys) %>% 
  ggplot(mapping = aes(x = diffphys, y = n)) +
  geom_col() +
  ggtitle("Ambulatory difficulty, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Diffphys",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```
  
* IPUMS documented values for DIFFREM  (Cognitive difficulty): 
  + 0 N/A
  + 1 No cognitive difficulty
  + 2 Has cognitive difficulty 
  
Plot the options for diffrem below.

```{r}
acs_clean %>% 
  count(diffrem) %>% 
  ggplot(mapping = aes(x = diffrem, y = n)) +
  geom_col() +
  ggtitle("Cognitive difficulty, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Diffrem",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

Create the subgroup for disability. 

```{r}
acs_clean <- acs_clean %>% 
  mutate(
    subgroup_disability = case_when(
      diffrem == "Has cognitive difficulty" |
        diffphys == "Has ambulatory difficulty" |
        diffmob == "Has independent living difficulty" |
        diffsens == "Has vision or hearing difficulty" |
        diffcare == "Yes" ~ "with disabiliy",
      TRUE ~ "without disability"
    )
  )

```

Check the variable breakout. 

```{r}
acs_clean %>% 
  count(subgroup_disability) %>% 
  ggplot(mapping = aes(x = subgroup_disability, y = n)) +
  geom_col() +
  ggtitle("Subgroup Disability, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Disability",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

```{r}
rm(acs_combined)

```

## Crosswalk

Read in the PUMA to county crosswalk file. This file is created by the program generate_puma_county_crosswalks.rmd in the geographic-crosswalks folder. 

```{r}
puma_county_crosswalk <- read_csv(
  here::here("geographic-crosswalks", "data", "crosswalk_puma_to_county.csv")
)

```

Create a version of the crosswalk with just the county-level values of data quality variables for each crosswalk period.

```{r}
county_puma <- puma_county_crosswalk %>%
  group_by(crosswalk_period, statefip, county) %>% 
  summarise(
    geographic_allocation_quality = mean(geographic_allocation_quality)
  ) %>% 
  ungroup()

```

## Merge Crosswalk 

Create a variable in the ACS data indicating whether the survey is pre or post-2022. This will be used to join on the correct crosswalk information.

```{r}
acs_clean <- acs_clean %>% 
  mutate(crosswalk_period = ifelse(year < 2022, "pre-2022", "2022"))

```

Check that the assignment worked. All years prior to 2022 should be designated "pre-2022".

```{r}
count(acs_clean, crosswalk_period, year)

```

Join the cleaned ACS data onto the crosswalk.

```{r}
acs_crosswalked <- left_join(
  acs_clean, 
  puma_county_crosswalk, 
  by = c("crosswalk_period", "statefip","puma")
)

rm(acs_clean)

```

Drop any observations with NA for `afact` (i.e. there is no county of interest overlapping this PUMA).

```{r}
count(acs_crosswalked, is.na(afact))

acs_crosswalked <- acs_crosswalked %>% 
  drop_na(afact)

```

Also filter out cases where `afact` is equal to zero. These cases will not be counted in the metric calculation.

```{r}
count(acs_crosswalked, afact == 0)

acs_crosswalked <- acs_crosswalked %>% 
  filter(afact > 0)

```

Adjust the person weight to account for PUMA-to-county mapping (those where the PUMA is not entirely inside the county).

```{r}
select(acs_crosswalked, perwt, repwtp1, repwtp80, afact)

acs_crosswalked <- acs_crosswalked %>%
  mutate(perwt = perwt * afact) %>% 
  mutate(across(matches("repwtp[0-9]+"), ~.x * afact))

select(acs_crosswalked, perwt, repwtp1, repwtp80, afact) 

```

Create a binary variable to distinguish between 1 and 5 year ACS surveys. 5-year samples include the term "5-year".

```{r}
acs_crosswalked <- acs_crosswalked %>%
  mutate(sample_structure = ifelse(str_detect(sample, "5-year"), "5year", "1year")) 

```

Create a binary employed variable for calculating the share employed. IPUMS data codes "Employed" as equal to 1.

```{r}
acs_crosswalked <- acs_crosswalked %>% 
  mutate(employed = empstat == 1) 

```

Check how many records, if any, have NA reported for empstat after filtering (this should be zero).

```{r}
count(acs_crosswalked, is.na(empstat))

```

Confirm there are no vacant properties included in the data.

```{r}
acs_crosswalked %>%
  filter(is.na(vacancy)) %>% 
  count(pernum)

```

## Create employment metric: All

### Pre-drop suppressed cells

First, to save time when processing the metric, calculate the effective sample count for each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: all-effective-samples

acs_all <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, county) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_all %>%
  group_by(year, sample, crosswalk_period, statefip, county) %>%
  summarize(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the employment metric. 

Objective: get the percent of individuals between the ages 25 and 54 that are employed from the EMPSTAT variable.

Aggregation should be weighted by PERWT (this is a person level statistic).

Check national employment ratio. Compute the ratio (share employed) for 2018, 2021 and 2022 nationally and show results.

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-all

acs_all <- acs_all %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

Calculate the county-level metrics. 

```{r}
#| label: calc-all

tic()
results_all <- acs_all %>%
  calculate_survey_mean()
toc()

```

Clean up the confidence interval bounds and sort the data.

```{r}
#| label: finalize-all

results_all <- finalize_metric(results_all)

```

```{r}
rm(acs_all)

```

## Create employment metric: Race/Ethnicity

To save time when processing the metric, calculate the effective sample count for each race-ethnicity group in each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: race-ethnicity-effective-samples

acs_race_ethnicity <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_race) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_race_ethnicity %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_race) %>%
  summarize(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the employment metric. 

Objective: get the percent of individuals between the ages 25 and 54 that are employed from the EMPSTAT variable.

Aggregation should be weighted by PERWT (this is a person level statistic).

Check national employment ratio. Compute the ratio (share employed) for 2018, 2021 and 2022 nationally and show results.

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-race-ethnicity

acs_race_ethnicity <- acs_race_ethnicity %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

```{r}
#| label: calc-race-ethnicity

tic()
results_race_ethnicity <- acs_race_ethnicity %>%
  calc_survey_mean_subgroup(.subgroup = subgroup_race)
toc()

# n_workers <- 2
# # Setup parallelization
# future::plan(future::multisession, workers = n_workers)
# 
# tic()
# results_race_ethnicity <- 
#   acs_race %>%
#   group_split(statefip) %>%
#   future_map_dfr(
#     ~calc_survey_mean_subgroup(.data = .x, .subgroup = subgroup_race)
#   )
# toc()
#
# future::plan(sequential)


```

```{r}
#| label: finalize-race-ethnicity

results_race_ethnicity <- finalize_metric(results_race_ethnicity)

```

```{r}
rm(acs_race_ethnicity)

```

## Create employment metric: Disability

## Create employment metric: Sex

## Add Suppressed Rows to Data

todo(JP): We pre-suppressed observations. We need to add those rows back with `NA` for the estimates and confidence interval bounds. `expand_grid()` and `left_join()` are useful for this. 

## Data Quality Flags

todo(JP): Create data quality flags based on the coefficient of variable, the quality of the crosswalk (`afact * afact2`), and the sample size


## Validation

We pre-suppressed many of the cells. We should do some exploration of data quality including looking at the coefficient of variation for different estimates.




## Export 

Rename state.

```{r}
#| eval: false

metrics_employment_all <- metrics_employment_all %>% 
  rename("state" = "statefip")

metrics_employment_sub <- metrics_employment_sub %>% 
  rename("state" = "statefip")
```

Order the variables how we want.

```{r}
#| eval: false

metrics_employment_all <- metrics_employment_all %>% 
  select(year, state, county, share_employed, share_employed_lb,
         share_employed_ub, share_employed_quality)

metrics_employment_sub <- metrics_employment_sub %>% 
  select(year, state, county, subgroup_type, subgroup, share_employed, share_employed, share_employed_lb, share_employed_ub, share_employed_quality)
```

Export as CSV

```{r}
#| eval: false

write_csv(metrics_employment_all, here::here("09_employment", "data", "final", "metrics_employment_county_all_longitudinal.csv"))
write_csv(metrics_employment_sub, here::here("09_employment", "data", "final", "metrics_employment_county_race-ethnicity_longitudinal.csv"))
```
