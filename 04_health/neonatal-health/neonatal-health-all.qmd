---
title: "neonatal-health-all"
format: html
editor: source
---
```{r setup}
library(tidyverse)

```

# 1. Background

This section provides background for the data used to create this metric. 

The data for this metric are national natality data produced by the National Center for Health Statistics (NCHS) at the Centers for Disease Control and Prevention (CDC). We access these natality data through [CDC WONDER](https://wonder.cdc.gov/natality.html), an online system that makes CDC data available to the public.

We download two sets of births data from this source: all births and low birthweight births (under 2500 grams). To create the metric, we divide the number of low birthweight births by the total number of births to calculate the county-level share of low birthweight births. Additionally, we create this metric for 8 subgroups: 4 for race/ethnicity (Non-Hispanic white, Non-Hispanic Black, Hispanic, and Non-Hispanic other), and 4 for mother's education (less than high school, high school graduate or GED, some college, and bachelor's degree or greater). Therefore, each year requires 18 data extracts downloaded from CDC WONDER.

## Considerations for future updates
+ 


# 2. Manually download natality data from CDC WONDER

This section explains the manual download process to create data extracts for these data from CDC WONDER.

There is an API available for CDC WONDER data. However, only national data are available for query by the API. Queries for natality statistics from the National Vital Statistics System cannot limit or group results by any location field such as county. Therefore, we must manually download the data.

The raw data used to create this metric are available to Urban Institute researchers on Box at [Data/Metrics_2025_round/04_health/neonatal-health/data](https://urbanorg.box.com/s/iq9njfxchv937ij93vnndl2fnt6trm89).

## 2.1 Navigate to extract page

1. Navigate to [CDC WONDER](https://wonder.cdc.gov/) and select [Births](https://wonder.cdc.gov/natality.html).

2. Under "Current Final Natality Data" select [Natality for 2007 - 2023](https://wonder.cdc.gov/natality-current.html). 

3. Select "I Agree" at the bottom of the page to agree to terms of data use.

## 2.2 Create extracts for all births in each year (no subgroups)
1.  Organize table layout:
  + Group Results By: County
  + Measures: Births
  + Title: "all_births_YYYY" where YYYY is the relevant year. 

2.  Select maternal residence: 
  + Keep default options

2.a. Select urban classifications:
  + Keep default options

3.  Select other maternal characteristics:
  + Keep default options

4.  Select birth characteristics:
  + Year: 2023 or relevant year (select only 1 year at a time)
  + Infant Birth Weight 12: Select all options except "All Weights" and "Unknown or Not Stated"
  + Keep other default options

5.  Select maternal risk factors:
  + Keep default options

6.  Other options:
  + Export Results
  + Show Totals
  + Show Zero Values
  + Show Suppressed Values
  + Precision: 2 decimal places
  + Data Access Timeout: 10 minutes

After creating the extract to the above specifications:
-   Select `Send` at the bottom of the page to submit the extract. This will automatically download a `.txt` file titled `all_births_YYYY.txt` to your Downloads folder. This step should result in 1 data extract for each single year.
-   Move the `.txt` file from your Downloads folder to the `mobility-from-poverty\04_health\neonatal-health\data\all` directory.

## 2.3 Create extracts for low birthweight births in each year (no subgroups)
1.  Organize table layout:
  + Group Results By: County
  + Measures: Births
  + Title: "lbw_births_YYYY" where YYYY is the relevant year. 

2.  Select maternal residence: 
  + Keep default options

2.a. Select urban classifications:
  + Keep default options

3.  Select other maternal characteristics:
  + Keep default options

4.  Select birth characteristics:
  + Year: 2023 or relevant year (select only 1 year at a time)
  + Infant Birth Weight 12: Select all options <2500 grams (499 grams or less; 500 - 999 grams; 1000 - 1499 grams; 1500 - 1999 grams; 2000 - 2499 grams)
  + Keep other default options

5.  Select maternal risk factors:
  + Keep default options

6.  Other options:
  + Export Results
  + Show Totals
  + Show Zero Values
  + Show Suppressed Values
  + Precision: 2 decimal places
  + Data Access Timeout: 10 minutes

After creating the extract to the above specifications:
-   Select `Send` at the bottom of the page to submit the extract. This will automatically download a `.txt` file titled `lbw_births_YYYY.txt` to your Downloads folder. This step should result in 1 data extract (2 total including the extract from the previous step) for each single year.
-   Move the `.txt` file from your Downloads folder to the `mobility-from-poverty\04_health\neonatal-health\data\all` directory.

## 2.4 Create extracts for all births in each year by subgroup
1.  Organize table layout:
  + Group Results By: County
  + Measures: Births
  + Title: "all_births_subgrouptype_subgroup_YYYY" where YYYY is the relevant year, subgrouptype is race or momed, and subgroup is nhwhite, nhblack, hisp, nhother, lths, hs, somecol, or baplus

2.  Select maternal residence: 
  + Keep default options

2.a. Select urban classifications:
  + Keep default options

3.  Select other maternal characteristics:
  + For the race/ethnicity subgroups, create four separate extracts based on the following specifications:
    + nhwhite
      + Mother's Single Race: White
      + Mother's Hispanic Origin: Not Hispanic or Latino
    + nhblack
      + Mother's Single Race: Black or African American
      + Mother's Hispanic Origin: Not Hispanic or Latino
    + hisp
      + Mother's Single Race: All Races
      + Mother's Hispanic Origin: Hispanic or Latino
    + nhother
      + Mother's Single Race: American Indian or Alaska Native; Asian; Native Hawaiian or Other Pacific Islander; More than one race
      + Mother's Hispanic Origin: Not Hispanic or Latino
  + For the mother's education subgroups, create four separate extracts based on the following specifications:
    + lths
      + Mother's Education: 8th grade or less; 9th through 12th grade with no diploma
    + hs
      + Mother's Education: High school graduate or GED completed
    + somecol
      + Mother's Education: Some college credit, but not a degree; Associate degree (AA, AS)
    + baplus
      + Mother's Education: Bachelor's degree (BA, AB, BS); Master's degree (MA, MS, MEng, MEd, MSW, MBA); Doctorate (PhD, EdD) or Professional Degree (MD, DDS, DVM, LLB, JD)

4.  Select birth characteristics:
  + Year: 2023 or relevant year (select only 1 year at a time)
  + Infant Birth Weight 12: Select all options except "All Weights" and "Unknown or Not Stated"
  + Keep other default options

5.  Select maternal risk factors:
  + Keep default options

6.  Other options:
  + Export Results
  + Show Totals
  + Show Zero Values
  + Show Suppressed Values
  + Precision: 2 decimal places
  + Data Access Timeout: 10 minutes

After creating the extract to the above specifications:
-   Select `Send` at the bottom of the page to submit the extract. This will automatically download a `.txt` file titled `all_births_subgrouptype_subgroup_YYYY.txt` to your Downloads folder. This step should result in 8 data extracts after repeated for each subgroup (10 total extracts including the extracts from the previous steps) for each single year.
-   Move the `.txt` files from your Downloads folder to the `mobility-from-poverty\04_health\neonatal-health\data\subgroups` directory.

## 2.5 Create extracts for low birthweight births in each year by subgroup
1.  Organize table layout:
  + Group Results By: County
  + Measures: Births
  + + Title: "lbw_births_subgrouptype_subgroup_YYYY" where YYYY is the relevant year, subgrouptype is race or momed, and subgroup is nhwhite, nhblack, hisp, nhother, lths, hs, somecol, or baplus

2.  Select maternal residence: 
  + Keep default options

2.a. Select urban classifications:
  + Keep default options

3.  Select other maternal characteristics:
  + For the race/ethnicity subgroups, create four separate extracts based on the following specifications:
    + nhwhite
      + Mother's Single Race: White
      + Mother's Hispanic Origin: Not Hispanic or Latino
    + nhblack
      + Mother's Single Race: Black or African American
      + Mother's Hispanic Origin: Not Hispanic or Latino
    + hisp
      + Mother's Single Race: All Races
      + Mother's Hispanic Origin: Hispanic or Latino
    + nhother
      + Mother's Single Race: American Indian or Alaska Native; Asian; Native Hawaiian or Other Pacific Islander; More than one race
      + Mother's Hispanic Origin: Not Hispanic or Latino
  + For the mother's education subgroups, create four separate extracts based on the following specifications:
    + lths
      + Mother's Education: 8th grade or less; 9th through 12th grade with no diploma
    + hs
      + Mother's Education: High school graduate or GED completed
    + somecol
      + Mother's Education: Some college credit, but not a degree; Associate degree (AA, AS)
    + baplus
      + Mother's Education: Bachelor's degree (BA, AB, BS); Master's degree (MA, MS, MEng, MEd, MSW, MBA); Doctorate (PhD, EdD) or Professional Degree (MD, DDS, DVM, LLB, JD)

4.  Select birth characteristics:
  + Year: 2023 or relevant year (select only 1 year at a time)
  + Infant Birth Weight 12: Select all options <2500 grams (499 grams or less; 500 - 999 grams; 1000 - 1499 grams; 1500 - 1999 grams; 2000 - 2499 grams)
  + Keep other default options

5.  Select maternal risk factors:
  + Keep default options

6.  Other options:
  + Export Results
  + Show Totals
  + Show Zero Values
  + Show Suppressed Values
  + Precision: 2 decimal places
  + Data Access Timeout: 10 minutes

After creating the extract to the above specifications:
-   Select `Send` at the bottom of the page to submit the extract. This will automatically download a `.txt` file titled `lbw_births_subgrouptype_subgroup_YYYY.txt` to your Downloads folder. This step should result in 8 data extracts after repeated for each subgroup (18 total extracts including the extracts from the previous steps) for each single year.
-   Move the `.txt` files from your Downloads folder to the `mobility-from-poverty\04_health\neonatal-health\data\subgroups` directory.

# 3. Import, clean, and merge CDC WONDER files (All)

## 3.1 Import all births and low birthweight births (no subgroups)
```{r create-paths}
paths <- list.files(here::here("04_health", "neonatal-health", "data", "all"),
                    pattern = "[.]txt$", full.names = TRUE)

```

```{r read-births}
births_raw <- paths |> 
  set_names(basename(paths)) |>  # Name elements of paths by their filenames
  map_dfr(
    ~ utils::read.delim(.x) |> 
      mutate(
        Births = as.character(Births)  # Convert Births to character for consistency
      ),
    .id = "filename"  # Add the filename as a column
  ) |> 
  mutate(
    year = parse_number(filename),  # Extract year from filename
    birth_type = str_extract(filename, "^(all|lbw)"), # Extract subgroup from filename
  )
```

The `.txt` files from CDC WONDER all have a `Notes` section at the bottom of the file with information about the data. We remove these rows by filtering out observations with missing county information.
```{r clean-births}
births_clean <- births_raw |>
  select(
    county_name = County,
    county_fips = County.Code,
    births = Births,
    year,
    birth_type
  ) |>
  filter(!is.na(county_fips))

```

## 3.2 Import all births and low birthweight births for subgroups (race/ethnicity and mother's education)
```{r create-paths-subgroups}
paths_subgroups <- list.files(here::here("04_health", "neonatal-health", "data", "subgroups"),
                    pattern = "[.]txt$", full.names = TRUE)

```

```{r read-births-subgroups}
births_subgroups_raw <- paths_subgroups |> 
  set_names(basename(paths_subgroups)) |>  # Name elements of paths by their filenames
  map_dfr(
    ~ utils::read.delim(.x) |> 
      mutate(
        Births = as.character(Births)  # Convert Births to character for consistency
      ),
    .id = "filename"  # Add the filename as a column
  ) |> 
  mutate(
    year = parse_number(filename),  # Extract year from filename
    birth_type = str_extract(filename, "^(all|lbw)"),  # Extract subgroup from filename
    subgroup_type = str_extract(filename, "(race|momed)"),
    subgroup = case_when(
      str_detect(filename, "nhwhite") ~ "nhwhite",
      str_detect(filename, "nhblack") ~ "nhblack",
      str_detect(filename, "hisp") ~ "hisp",
      str_detect(filename, "nhother") ~ "nhother",
      str_detect(filename, "lths") ~ "lths",
      str_detect(filename, "somecol") ~ "somecol",
      str_detect(filename, "baplus") ~ "baplus",
      str_detect(filename, "hs") ~ "hs",
      TRUE ~ NA_character_
    )
  )
```

```{r clean-births-subgroups}
births_subgroups_clean <- births_subgroups_raw |>
  select(
    county_name = County,
    county_fips = County.Code,
    births = Births,
    year,
    birth_type,
    subgroup_type,
    subgroup
  ) |>
  filter(!is.na(county_fips))

```


# 4. Use crosswalk to add missing counties to data
todo(): The 2022 counties for Connecticut don't match between the CDC WONDER data and Urban's county population file.

## 4.1 Reshape data from long to wide
We want the subgroups (for race/ethnicity and mother's education) for all births and low birthweight births to be wide, and for the data to only be long by county/year
```{r reshape-wide}
births_wide <- births_clean |>
  pivot_wider(
    id_cols = c(year, county_name, county_fips),
    names_from = birth_type,
    values_from = births,
    names_prefix = "births_"
  )

births_subgroups_wide <- births_subgroups_clean |>
  select(-subgroup_type) |>
  pivot_wider(
    id_cols = c(year, county_name, county_fips, subgroup),
    names_from = birth_type,
    values_from = births,
    names_prefix = "births_"
  ) |>
  pivot_wider(
    id_cols = c(year, county_name, county_fips),
    names_from = subgroup,
    names_sep = "_",
    values_from = c(births_all, births_lbw)
  )

```



## 4.2 Join births data together

```{r join-births}
master_births <- tidylog::full_join(
  x = births_wide,
  y = births_subgroups_wide,
  by = c("year", "county_name", "county_fips")
)

master_births_clean <- master_births |>
  mutate(
    county_fips = str_pad(as.character(county_fips),
                          width = 5,
                          side = "left",
                          pad = "0"),
    state = substr(county_fips, 1, 2),
    county = substr(county_fips, 3, 5)
  ) |>
  select(-c(county_name, county_fips))
  
```

```{r}
master_births_clean |>
  filter (state=="09")
```


## 4.3 Bring in crosswalk containing all counties and join births
```{r read-crosswalk}
county_pop <- read_csv(
  file = here::here("geographic-crosswalks", "data", "county-populations.csv")
) |>
  filter(year>=2016) |>
  select(-c(state_name, county_name))

```

```{r}
county_pop |>
  filter (state=="09")
```

In the 2022 and 2023 CDC WONDER data, Connecticut's outdated 8 counties are still used (09001, 09003, 09005, 09007, 09009, 09011, 09013, 09015), but in Urban's universe of counties the updated 9 planning regions are used (09110, 09120, 09130, 09140, 09150, 09160, 09170, 09180, 09190). CDC WONDER intends to move to the updated planning regions in the future, so we leave these years as missing until that transition takes place.
```{r join-crosswalk-births}
county_pop_births <- tidylog::full_join(
  x = county_pop,
  y = master_births_clean,
  #y = births_wide,
  by = c("year", "state", "county")
)
```

Reshape the data to be long again by subgroup
```{r reshape-long}
county_pop_births_long <- county_pop_births |>
  pivot_longer(
    cols = starts_with(c("births_")),
    names_to = c(".value", "subgroup"),
    names_pattern = "(births_[^_]+)_?([^_]*)",
    values_to = "births"
  )

```


# 5. Assign "unidentified county" values to counties with missing values

Counties with a total population less than 100,000 report births under "Unidentified Counties" to protect personal privacy ([source](https://wonder.cdc.gov/wonder/help/natality.html)). Here, we want to replace every value from the total county populations that did not have a match in the births data with the "Unidentified Counties" value from that state.
```{r assign-unidentified}
county_pop_births_clean <- county_pop_births_long |>
  mutate(
    unidentified_all = ifelse(county=="999", births_all, NA),
    unidentified_lbw = ifelse(county=="999", births_lbw, NA)
  ) |>
  group_by(year, state, subgroup) |>
  mutate(
    state_unidentified_all = ifelse(any(county == 999),
                                       unidentified_all[county == 999],
                                       NA),
    
    births_all = ifelse(is.na(births_all),
                           state_unidentified_all,
                           births_all),
    
    state_unidentified_lbw = ifelse(any(county == 999), 
                                    unidentified_lbw[county == 999], 
                                    NA),
    
    births_lbw = ifelse(is.na(births_lbw), 
                        state_unidentified_lbw, 
                        births_lbw)
  ) |>
  select(-c(unidentified_all, unidentified_lbw)) |>
  ungroup() |>
  filter(!county == 999)

```

If the value for all births and low birthweight births match the state unidentified values, we know that the births data from that county were initially missing, so we create a flag to keep track of these counties.
```{r create-unidentified-tag}
county_pop_births_clean <- county_pop_births_clean |>
  mutate(
    unidentified_county = if_else(
      births_all==state_unidentified_all & births_lbw==state_unidentified_lbw, 
      1, 
      0),
    # Generate flag for suppressed values
    suppressed_county = if_else(
      births_all == "Suppressed" | births_lbw == "Suppressed",
      1,
      0
    )
  ) |>
  select(-c(state_unidentified_all, state_unidentified_lbw))

```


# 6. Create neonatal health share low birthweight metric
```{r calculate-metric}
county_pop_births_clean <- county_pop_births_clean |>
  mutate(
    births_all = as.numeric(births_all),
    births_lbw = as.numeric(births_lbw),
    subgroup = if_else(subgroup=="", "all", subgroup)
  )

county_pop_births_metric <- county_pop_births_clean |>
  mutate(
    share_low_birth_weight = births_lbw / births_all
  )

```

If the denominator (low birthweight births) for the "all" group is less than 30, we assign the value to be missing
```{r replace-low-denominators}
county_pop_births_metric <- county_pop_births_metric |>
  mutate(
    share_low_birth_weight = if_else((births_lbw < 30 & subgroup=="all"), NA, share_low_birth_weight)
  )
  
```


# 7. Data Quality

todo(): No matter what I do, I can't seem to get the quality values for 2022 to match those from last year (last year's code was written in Stata and is available [here](https://docs.google.com/document/d/1PT4pb4_r6x7-RmVNYnIJmh6H02FHbPRqx4GRAUUgeIQ/edit?usp=sharing)). Initially, I read the code and aggregated all the different conditions for each quality value and tried to simplify the code. The values didn't match, so I thought it was an issue with the hierarchy of assigning values. I re-wrote the code to exactly match the hierarchy in the Stata code from last year, but they still don't match, and I'm not sure why.

## 7.1 All births
```{r filter-all}
county_pop_births_metric_all <- county_pop_births_metric |>
  filter(subgroup=="all")

```


If the denominator is less than 30, the metric value and quality value should be NA. If the value is missing, keep it missing. If the denominator is 30-100, data quality is 3, and if the denominator is 101-200, data quality is 2.

```{r assign-quality-all}
# Create variables that quality conditions will rely on
county_pop_births_metric_all <- county_pop_births_metric_all |>
    group_by(year, state) |>
  mutate(num_unidentified_counties = sum(unidentified_county),
         num_counties = n()) |>
  ungroup() |>
  mutate(ratio = num_unidentified_counties / num_counties)

# Initialize lbw_quality to NA
county_pop_births_metric_all <- county_pop_births_metric_all |>
  mutate(quality = NA_real_)

# Assign lbw_quality based on conditions
county_pop_births_metric_all <- county_pop_births_metric_all |>
  mutate(
    quality = case_when(
      is.na(unidentified_county) ~ 1, # Assign quality score 1 if county flag is missing
      births_lbw < 30 | births_all < 200 ~ 2, # Numerator < 30 or Denominator [100-200]
      births_all < 100 ~ 3, # Denominator [30-100)
      unidentified_county == 1 ~ 3, # Assign quality score 3 for flagged counties
      births_all < 30 ~ -1, # Denominator < 30
      is.na(share_low_birth_weight) ~ NA_real_, # Missing share_lbw_nomiss
      TRUE ~ quality # Retain existing values if no condition is met
    )
  )

# Update lbw_quality based on state-level conditions
county_pop_births_metric_all <- county_pop_births_metric_all |>
  mutate(
    quality = case_when(
      num_unidentified_counties > 0 & num_unidentified_counties < 5 ~ 2, # Condition for unidentified counties
      num_counties <= 15 & ratio < 0.5 ~ 2, # Condition for small states
      quality == -1 ~ NA_real_, # Quality missing for suppressed denominators
      TRUE ~ quality # Retain existing values
    ),
    share_low_birth_weight = if_else(quality == -1, NA_real_, share_low_birth_weight) # Suppression for small denominators
  )
    
```


```{r check-quality-distribution-all}
county_pop_births_metric_all |> group_by(quality) |> count()

```

## 7.2 Subgroup births
```{r filter-subgroups}
county_pop_births_metric_subgroup <- county_pop_births_metric |>
  filter(subgroup!="all")
  
```

```{r assign-quality-subgroups}
# Create variables that quality conditions will rely on (checking numbers and proportions of unidentified counties by state)
county_pop_births_metric_subgroup <- county_pop_births_metric_subgroup |>
    group_by(year, state, subgroup) |>
  mutate(num_unidentified_counties = sum(unidentified_county),
         num_counties = n()) |>
  ungroup() |>
  mutate(ratio = num_unidentified_counties / num_counties)

# Initialize lbw_quality to NA
county_pop_births_metric_subgroup <- county_pop_births_metric_subgroup |>
  mutate(quality = NA_real_)

# Assign lbw_quality based on conditions
county_pop_births_metric_subgroup <- county_pop_births_metric_subgroup |>
  mutate(
    quality = case_when(
      is.na(unidentified_county) & is.na(suppressed_county) ~ 1,
      births_lbw < 30 | births_all < 200 ~ 2,
      births_all < 100 ~ 3,
      unidentified_county == 1 | suppressed_county == 1 ~ 3,
      births_all < 30 ~ -1,
      is.na(share_low_birth_weight) ~ NA_real_,
      TRUE ~ quality # Retain existing values if no condition is met
    )
  )

# Adjust lbw_quality based on state-level conditions
county_pop_births_metric_subgroup <- county_pop_births_metric_subgroup |>
  mutate(
    quality = case_when(
      num_unidentified_counties > 0 & num_unidentified_counties < 5 ~ 2,
      num_counties <= 15 & ratio < 0.5 ~ 2,
      quality == -1 ~ NA_real_,
      TRUE ~ quality
    ),
    share_low_birth_weight = if_else(quality == -1, NA_real_, share_low_birth_weight)
  )

```

```{r check-quality-distribution-subgroups}
county_pop_births_metric_subgroup |> group_by(quality) |> count()

```

# 8. Confidence Intervals

todo(): There are a few more tests from the original code that I need to include here, but I've been trying to sort out the data quality issue first, because I'm concerned there may be an error earlier in the code that may cause some of the test conditions to fail.

Following the guidance provided in the User Guide to the 2010 Natality Public Use File, we use the following process to compute 95 percent confidence intervals for the neonatal health measure.

The neonatal health measure is share low birthweight births in a county. Because this is a percentage, we follow the guidelines for computing 95-percent confidence intervals for percents and proportions.

First, we confirm that the conditions are met:

Bp ≥ 5 and Bq ≥ 5

Where:

B = number of all births with non-missing birthweight data in the denominator
p = percent of low birthweight births divided by 100
q = 1 – p

If these conditions are met, we compute the confidence intervals using the following formulas:

Lower Limit = p−1.96(√((p×q)/B))

Upper Limit = p+1.96(√((p×q)/B))

Where:

p = percent of low birthweight births divided by 100
q = 1 – p
B = number of all births with non-missing birthweight data in the denominator

These steps are repeated for births to all mothers, non-Hispanic white mothers, non-Hispanic Black mothers, Hispanic mothers, and mothers with other races or ethnicities

```{r ci-test1}
# Generate and test conditions from User Guide
test <- county_pop_births_metric_all |>
  filter(state != "09") |>
  mutate(
    test_1 = share_low_birth_weight * births_all,
    test_2 = (1 - share_low_birth_weight) * births_all
  )

test |>
  count(test_1 >= 5)
```


```{r ci-test2}
test <- test |>
  mutate(
    share_low_birth_weight_lb = (share_low_birth_weight) -  (1.96*sqrt(share_low_birth_weight*(1-share_low_birth_weight)/as.numeric(births_all))),
    
    share_low_birth_weight_ub = (share_low_birth_weight) +  (1.96*sqrt(share_low_birth_weight*(1-share_low_birth_weight)/as.numeric(births_all)))
  )
```


# 9. Save and write out data

```{r remove-files1}
# Remove obsolete files
rm(paths, births_raw, paths_subgroups, births_subgroups_raw)
```

```{r write-data}
# Remove unnecessary variables and sort by year, state, and county
final_all <- county_pop_births_metric_all |>
  select(
    year, 
    state, 
    county, 
    share_low_birth_weight, 
    share_low_birth_weight_lb, 
    share_low_birth_weight_ub, 
    share_low_birth_weight_quality
  ) |>
  arrange(year, state, county)


# Write out final data
write_csv(x = final_all,
          file = here::here(
            "04_health",
            "neonatal-health",
            "final",
            "share_low_birth_weight_metric_all_county.csv"
          )
)

# Remove unnecessary variables and sort by year, state, county, and subgroup
final_subgroup <- county_pop_births_metric_subgroup |>
  select(
    year, 
    state, 
    county, 
    share_low_birth_weight, 
    share_low_birth_weight_lb, 
    share_low_birth_weight_ub, 
    share_low_birth_weight_quality
  ) |>
  arrange(year, state, county, subgroup)


# Write out final data - subgroups
write_csv(x = final_subgroup,
          file = here::here(
            "04_health",
            "neonatal-health",
            "final",
            "share_low_birth_weight_metric_subgroup_county.csv"
          )
)

```
