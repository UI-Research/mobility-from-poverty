---
title: "Access to Health Services"
author: "Vincent Pancini"
date: "`r format(Sys.time(), '%B %d, %Y %H:%M')`"
output:
  html_document:
    number_sections: false
    self_contained: TRUE
    code_folding: show
    toc: TRUE
    toc_float: TRUE
    editor_options:
      chunk_output_type: console
---

<style>
@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');
</style>

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato" />

```{r rmarkdown-setup, echo = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r setup}
options(scipen = 999)

library(urbnthemes)
library(tidyverse)
library(tidylog)
library(testthat)
library(haven)

set_urbn_defaults(style = "print")

```

This metric represents the number of individuals served by one primary care physician in a county, if the population was equally distributed across physicians. 

The rest of this file is organized as follows:

1. Background
2. Download and read in data from AHRF
3. Clean, join, and reshape data
4. Join AHRF data onto universe of Urban counties
5. Construct ratio of population to primary care physicians
6. Validation
7. Add data quality flags
8. Save and write out data

## 1. Background
This section provides background for the data used to create this metric.

The data used to create this metric are county-level counts of primary care physicians produced by the [American Medical Association (AMA) Physician Masterfile](https://www.cdc.gov/nchs/hus/sources-definitions/ama.htm) and available via the [Area Health Resources File](https://data.hrsa.gov/data/download?data=AHRF#AHRF). The Area Health Resource File is a collection of data from more than 50 sources, including the American Medical Association, which maintains the Physician Masterfile. The Physician Masterfile contains information on nearly all the Doctors of Medicine and Doctors of Osteopathic Medicine in the nation. These are administrative data. A record for a physician is established when individuals enter medical schools accredited by the Liaison Committee on Medical Education (LCME), or in the case of international medical graduates (IMGs), upon entry into a post-graduate residency training program accredited by the Accreditation Council for Graduate Medical Education (ACGME) [source](https://www.ama-assn.org/about/physician-professional-data/ama-physician-professional-data).

To get all years 2014-2021, we need to download two versions of the AHRF data:

1. 2022-2023 County Level Data
2. 2021-2022 County Level Data

Historically, each year of the AHRF release included data from previous years as well. This changed in 2023, where the release only included the two most recent years of data for each variable in an attempt to make the files more manageable. The most recent year of data on primary care physicians available through AHRF is 2021. We get this year of data from the 2022-2023 County Level Data file, and we get 2014-2020 data from the 2021-2022 County Level Data file.

Primary care physicians include practicing non-federal physicians (M.D.s and D.O.s) under age 75 specializing in general practice medicine, family medicine, internal medicine, and pediatrics. It does not include nurse practitioners, physician assistants, or other practitioners available for primary care services. It also does not include hospital residents.

Note that this variable is not available by sex, and we cannot reconstruct this variable by sex based on other variables. For instance, AHRF does have separate variables for Total MDs, Inactive MDs, Total DOs, and Inactive DOs (all non-federal) by sex. However, taking the sum of these variables by sex would still include physicians over the age of 75, and all specialties. There are also variables for MDs by specialty and age, but not by sex.

Lastly, these data are unavailable at the Census place-level. County is the smallest geography available.

To create the ratio of population to primary care physicians, we also need a county-level population count for each year. The AHRF already includes population data from the Census County Population Estimates for each year, as well as from the 2020 Census Redistricting file for 2020. These sources are recorded in the technical documentation Excel files available after downloading the AHRF zip file as described in section 3. However, to promote consistency across all metrics created as part of the Upward Mobility Framework project, we use population data compiled by Urban Institute researchers. These data are available on our project's GitHub repository [here](https://github.com/UI-Research/mobility-from-poverty/blob/main/geographic-crosswalks/data/county-populations.csv).


## 2. Download and read in data from AHRF
This section downloads two AHRF zip files from the AHRF website. It then extracts one SAS file from each zip file and reads each file into the R environment. It deletes the zip files which contain documentation for each file. 

The primary data for this metric come from the [Area Health Resource File (AHRF)](https://data.hrsa.gov/data/download). 

To get all years 2014-2021, we must download and read in two files:

* 2022-2023 County Level Data - Previous releases included historical data for all variables. This was the first release that only includes the two most recent years of data for each variable (which are 2020 and 2021 for primary care physicians).
* 2021-2022 County Level Data - This file still includes historical data back to 2014.

Note that each code chunk below downloads the `.zip` file for each year, extracts the data we need, and deletes the `.zip` file. The `.zip` files contain the technical documentation for each file, and future analysts may want to explore this documentation before deleting the files.

```{r load-2022-2023-file}
# URL of the 2022-2023 AHRF zip file
## Note that the 2021-2022 file doesn't have a csv option, so I download the SAS version for consistency. For more information, download the `Technical documentation`.
zip_url_23 <- "https://data.hrsa.gov//DataDownload/AHRF/AHRF_SAS_2022-2023.zip"

# Destination file path where we want to save the zip file
zip_dest_23 <- here::here("04_health", "access-health-services", "data", "AHRF_SAS_2022-2023.zip")

# Download the zip file to the above path
download.file(zip_url_23, zip_dest_23, mode = "wb")

# Unzip the file
unzip(zip_dest_23, exdir = here::here("04_health", "access-health-services", "data"))

# Read in the SAS file containing the latest AHRF data
ahrf23 <- haven::read_sas(here::here("04_health", "access-health-services", "data",
                                "AHRF_SAS_2022-2023", "ahrf2023.sas7bdat"))

# Remove zip file
unlink(zip_dest_23)

# Clean up environment
rm(zip_url_23, zip_dest_23)

```

```{r load-2021-2022-file}
# URL of the 2021-2022 AHRF zip file
## Note that the 2021-2022 file doesn't have a csv option. For more information, download the `Technical documentation`.
zip_url_22 <- "https://data.hrsa.gov//DataDownload/AHRF/AHRF_2021-2022_SAS.zip"

# Destination file path where we want to save the zip file
zip_dest_22 <- here::here("04_health", "access-health-services", "data", "AHRF_SAS_2021-2022.zip")

# Download the zip file to the above path
download.file(zip_url_22, zip_dest_22, mode = "wb")

# Unzip the file
unzip(zip_dest_22, exdir = here::here("04_health", "access-health-services", "data"))

# Read in the SAS file containing the 2021-2022 AHRF data
ahrf22 <- haven::read_sas(here::here("04_health", "access-health-services", "data", "ahrf2022.sas7bdat"))

# Remove zip file and irrelevant contents
unlink(zip_dest_22)
unlink(here::here("04_health", "access-health-services", "data", "2021-2022_AHRFDUA.doc"))

# Clean up environment
rm(zip_url_22, zip_dest_22)

```



## 3. Clean, join, and reshape data
This section limits the two AHRF files from above to our variables of interest and renames them. It then joins the two files and removes observations for US territories. There are variables for the number of primary care physicians and population for each year, so it then reshapes the data to be long by year after joining the two files.

Select only the relevant variables from each AHRF file. Note that naming conventions in the 2022-2023 file differ from those in the 2021-2022 file. You can search the contents of the 2022-2023 file via `AHRF_CSV_2022-2023.zip\AHRF_CSV_2022-2023\DOC\AHRF 2022-2023 Technical Documentation.xlsx` and you can search the contents of the 2021-2022 file via `AHRF 2021-2022_User_Tech.zip\AHRF_USER_TECH_2021-2022\AHRF 2021-2022 Technical Documentation.xlsx`. You will need to re-download the zip files from above to access these documents.
```{r clean-ahrf}
# Select and rename relevant variables from the 2022-2023 file
## Note that both files have (identical) information for 2020. We keep the 2020 information from the historic file for ease of future updates.
ahrf23 <- ahrf23 |>
  select(
    state = fips_st,
    county = fips_cnty,
    pc_physicians_21 = phys_nf_prim_care_pc_exc_rsdt_21,
    pop_21 = popn_est_21,
  )

# Select and rename relevant variables from the 2021-2022 file
## Note that both files have (identical) information for 2020. We keep the 2020 information from the historic file for ease of future updates.
ahrf22 <- ahrf22 |>
  select(state = f00011, 
         county = f00012,
         pc_physicians_20 = f1467520,
         pc_physicians_19 = f1467519,
         pc_physicians_18 = f1467518,
         pc_physicians_17 = f1467517,
         pc_physicians_16 = f1467516,
         pc_physicians_15 = f1467515,
         pc_physicians_14 = f1467514,
         pop_20 = f0453020,
         pop_19 = f1198419,
         pop_18 = f1198418,
         pop_17 = f1198417,
         pop_16 = f1198416,
         pop_15 = f1198415,
         pop_14 = f1198414,
  )

# Join both AHRF files by state and county
ahrf_joined <- full_join(
  x = ahrf23, 
  y = ahrf22, 
  by = c("state", "county")
  ) |>
  # Remove US territories
  filter(
    !state %in% c('66', '72', '78')
  )

```

The 2022-2023 file (which has 2021 information for primary care physicians) has one extra observation (County FIPS 02001). This isn't a valid FIPS code, and all values are `NA` for this observation. It is unclear why this observation is included in the AHRF data. This observation gets dropped later when merging to the Urban universe of counties.
```{r check-ahrf-join}
# Check join
anti_join(
  x = ahrf22, 
  y = ahrf23, 
  by = c("state", "county")
) |>
  select(state, county)

```

Reshape the data to be long by state/county/year
```{r reshape-ahrf}
# Reshape the joined data to be long by state/county/year
ahrf_long <- pivot_longer(
  ahrf_joined, 
  cols = starts_with("pc_physicians_") | starts_with("pop"),
  names_to = c(".value", "year"),
  names_pattern = "(.*)_(\\d+)"
) |>
  mutate(year = as.numeric(paste0(20, `year`))) |>
  arrange(state, county, year)

```

```{r clean-environment-3}
# Clean up environment
rm(ahrf22, ahrf23, ahrf_joined)

```


## 4. Join AHRF data onto universe of Urban counties
This section reads in the Urban Institute's universe of counties and joins AHRF primary care physician data to those counties.

### 4.1 Read in Urban county file for 2014-2021
County-level population data compiled by Urban Institute researchers for 2014-2022 is available [here](https://github.com/UI-Research/mobility-from-poverty/blob/main/geographic-crosswalks/data/county-populations.csv). You can manually download the data by selecting the `Download raw file` button which downloads a file titled `county-populations.csv`. Then, move it into the `mobility-from-poverty\geographic-crosswalks\data` directory. If you have cloned the repository for this project from GitHub, the file will already be in that directory.
    
```{r load-counties}
# Read in Urban Institute population data.
all_counties <- read.csv(here::here("geographic-crosswalks", "data", "county-populations.csv")) |>
  filter(!year %in% c(2022)) |>
  mutate(state = str_pad(state, 2, pad = "0"),
         county = str_pad(county, 3, pad = "0"))

```

### 4.2 Identify counties in Urban universe but not in AHRF
9 observations (9 counties) are in our universe of counties but not in the AHRF data. All nine of these counties come from the state of Connecticut in 2021. The boundaries of Connecticut counties changed in 2020 ([source](https://www.census.gov/programs-surveys/geography/technical-documentation/county-changes.2020.html#list-tab-957819518)). This change is reflected in the Urban universe of counties, but not in AHRF. We don't yet have a way to crosswalk the old Connecticut counties to the new counties, so we ignore these observations for now. Future updates should consider searching to see if a crosswalk is available.
```{r check-missing-ahrf}
missing_AHRF <- anti_join(
  x = all_counties,
  y = ahrf_long,
  by = c("year", "state", "county")
)

missing_AHRF |>
  group_by(state) |>
  count(year)

```

### 4.3 Identify counties in AHRF but not in Urban universe
70 observations (17 counties) are in the AHRF data but not our universe of counties. Eight counties are from Connecticut in 2021. As explained above, Connecticut county boundaries changed in 2020. This change is reflected in the 2021 Urban population file but not in the AHRF data. We don't currently have a way to crosswalk these counties, so we ignore them for now. Future updates should consider searching to see if a crosswalk is available.
```{r check-missing-urban}
missing_urban <- anti_join(
  x = ahrf_long,
  y = all_counties,
  by = c("year", "state", "county")
)

missing_urban |>
  group_by(state, county) |>
  count(pop)

```

The remaining nine counties all appear to be counties that no longer exist, and only one of them has a non-missing value for population or number of primary care physicians. All information used to determine these changes to counties comes from [here](https://www.census.gov/programs-surveys/geography/technical-documentation/county-changes.html). Note that it is unclear why nonexistent counties are still included in AHRF:

* 02001 is not a valid county FIPS code and it is unclear why it is included in the AHRF data. It is missing values from 2014-2021
* Chugach Census Area, AK (02063) was created from part of Valdez-Cordova Census Area, AK (02261) effective 2019-01-02, so values are missing from 2014-2019
* Copper River Census Area, AK (02066) was created from part of Valdez-Cordova Census Area, AK effective 2019-01-12, so values are missing from 2014-2019
* Prince of Wales-Outer Ketchikan Census Area, AK (02201) was mostly annexed by other county equivalents and the remainding area was renamed effective 2008-05-19, so values are missing from 2014-2021
* Skagway-Hoonah-Angoon Census Area, AK (02232) split to create Skagway Municipality (02230) and Hoonah-Angoon Census Area (02105) effective 2007-06-20, so values are missing from 2014-2021.
* Valdez-Cordova Census Area, AK (02261) split to form Chugach Census Area (02063) and Copper River Census Area (02066) effective 2019-01-02, so values are missing for 2020 and 2021. Note that this county actually has a value of 11 for `pc_physicians` in 2020, but it should be missing and could be an error, so we ignore it.
* Wrangell-Petersburg Census Area, AK (02280) split to create part of Wrangell City and Borough (02275) and all of Petersburg Census Area (02195) effective 2008-06-01, so values are missing from 2014-2021.
* Bedford city, VA (51515) changed to town status and added to Bedford County (51019) effective 2013-07-01, so values are missing from 2014-2021
* Clifton Forge city, VA (51560) changed to town status and added to Alleghany County (51005) effective 2001-07-01, so values are missing from 2014-2021
```{r check-missing-non-CT}
missing_urban |>
  filter(state != "09") |>
  group_by(state, county) |>
  count(pop, pc_physicians)

```

We drop these observations from the AHRF data
```{r fix-missing-urban}
ahrf_clean <- ahrf_long |>
  mutate(GEOID = str_c(state, county)) |>
  filter(!(state == "09" & year == "2021"),
         !GEOID %in% c("02001", "02201", "02232", "02280", "51515", "51560"),
         !(GEOID %in% c("02063", "02066") & 
             year %in% c("2014", "2015", "2016", "2017", "2018", "2019")),
         !(GEOID %in% c("02261") & year %in% c("2020", "2021"))) |>
  select(-GEOID)
  
```

### 4.4 Join data
Join county-level counts of primary care physicians from AHRF for 2014-2021 onto Urban's county universe file
```{r join-data}
joined_data <- left_join(
  x = all_counties, 
  y = ahrf_clean, 
  by = c("year", "state", "county")
)

```

The unmatched observations are all the 9 counties from Connecticut in 2021. Future updates should search for a crosswalk to match the 2021 Connecticut counties between the files.
```{r check-join}
anti_join(
  x = all_counties, 
  y = ahrf_clean, 
  by = c("year", "state", "county")
) %>%
  select(year, state, county)

```

### 4.5 Create final population variable
The AHRF data already includes population counts, but we want to use the population from Urban's universe of counties to construct the ratio for this metric.

However, the Urban file is missing population counts for 2014. We use the 2014 population counts from AHRF for this year instead.
```{r fix-pop}
joined_data <- joined_data |>
  mutate(population = if_else(year==2014, pop, population))

```

Urban Institute and AHRF population sources match for every year except 2021.
```{r check-pop}
# Check whether Urban population source matched AHRF population source
stopifnot(joined_data |>
            mutate(pop_diff = population - pop) |>
            filter(pop_diff != 0) |>
            distinct(year) |>
            pull(year) == 2021
          )

```

```{r clean-environment-4.5}
# Remove obsolete objects
rm(ahrf_long, ahrf_clean, all_counties, missing_AHRF, missing_urban)

```


## 5. Construct ratio of population to primary care physicians
This section creates actual the metric (ratio of population to primary care physicians).

The antecedent of the ratio (numerator) is population and the consequent of the ratio (denominator) is number of primary care physicians. When there is at least 1 primary care physician in the county, the variable created in this step is the population per 1 primary care physician. If there are no primary care physicians in the county, we assign a value of 0.

```{r create-ratio}
# Create the ratio
joined_data <- joined_data |>
  mutate(
    ratio_population_pc_physician = case_when(
      pc_physicians > 0 ~ round(population/pc_physicians),
      pc_physicians == 0 ~ 0
      )
  )

```


## 6. Validation

### 6.1 Table of ratio of population to primary care physicians

We first explore the data with this table that shows the ratio of population to primary care physicians in each county. Click on the variable columns to sort the table.

```{r table, echo = FALSE}
joined_data |>
  select(
    county_name, state, county, year,
    ratio_population_pc_physician
  ) |>
  reactable::reactable(
    filterable = TRUE,
    searchable = TRUE,
    defaultPageSize = 10,
    highlight = TRUE
  )

```


### 6.2 Distribution of ratio and missingness

The county-level ratio of population to primary care physicians ranges from 0 to 46,784. 6.8% of observations do not have a primary care physician.

```{r check-distribution-ratio}
quantile(
  joined_data$ratio_population_pc_physician,
  probs = c(0, .068, .069, 0.2, 0.4, 0.6, 0.8, 0.9, 0.99, 1),
  na.rm = TRUE
)
```
```{r check-distribution-count}
quantile(
  joined_data$pc_physicians,
  probs = c(0, .068, .069, 0.2, 0.4, 0.6, 0.8, 0.9, 0.99, 1),
  na.rm = TRUE
)

```


There are no missing ratios for 2014-2019, but 2 in 2020 (from Alaska) and 9 in 2021 (the 9 in 2021 are from Connecticut). These are expected.
```{r check-missings}
joined_data |>
  group_by(year) |>
  summarize(
    missing = sum(is.na(ratio_population_pc_physician)),
    missing_pct = sum(is.na(ratio_population_pc_physician)) / n() * 100
  )

```



### 6.3 Visualizations

There are roughly the same number of observations with ratios over 10,000 in each year
```{r check-outliers}
# These outliers make the following histograms hard to interpret, so we check that there are roughly the same number in each year before filtering in the graphs below
joined_data |>
  filter(ratio_population_pc_physician >= 10000) |>
  group_by(year) |>
  count()

```

The distribution of ratios is roughly the same across all years
```{r plot-distribution}
joined_data |>
  filter(!is.na(ratio_population_pc_physician),
         # Filter out outliers, otherwise graphs are harder to interpret
         ratio_population_pc_physician < 10000) |>
  ggplot(aes(ratio_population_pc_physician)) +
  geom_histogram(binwidth = 100) +
  facet_wrap(~ year, scales = "free_x") +
  labs(title = "")

```


### 6.4 Checking ratios against County Health Rankings
The 2023 release of [County Health Rankings](https://www.countyhealthrankings.org/explore-health-rankings/county-health-rankings-model/health-factors/clinical-care/access-to-care/primary-care-physicians) data includes this same metric using the AHRF data. We check our calculations against theirs.

For a while, we could not get our results to match the latest results from County Health Rankings. The number of primary care physicians were identical, but the ratios were not, which indicated that we used a different population source (population was not reported in CHR data). I recreated our ratio multiple times using different sources of population but could not match the CHR results.

The CHR documentation indicates that they used 2021 Census Population Estimates for their ratio. However, on 2024-01-31, Vincent and Lily Robin met with a team of County Health Rankings researchers, and one of their researchers told us that they created their ratio using Vintage 2020 population estimates, which are based on the 2010 Census (see more [here](https://www.census.gov/programs-surveys/popest/technical-documentation/research/evaluation-estimates/2020-evaluation-estimates.html)). We are eventually able to recreate their ratio for 2020 using this population data. The ratio reported by County Health Rankings still does not match our ratio, but we used a more recent population count, so our ratio is likely more accurate (at least for 2020).

#### 6.4a Download, read in, and clean the 2023 County Health Rankings data

The landing page to download these data is [here](https://www.countyhealthrankings.org/explore-health-rankings/rankings-data-documentation).

```{r load-chr}
# Download file directly from internet
download.file(
  url = "https://www.countyhealthrankings.org/sites/default/files/media/document/2023%20County%20Health%20Rankings%20Data%20-%20v2.xlsx",
  destfile = "04_health/access-health-services/data/chr2023.xlsx",
  mode = "wb"
)

# Read in CHR data
## I set `guess_max = Inf` to forestall a warning when reading columns. Without this parameter specified, `readxl::read_excel()` guesses that column 17 is a logical column (because it's mostly missing) when in fact it's a character column. We don't use this column, but still want to provide clarity about the warning.
chr2023 <- readxl::read_excel(here::here("04_health", "access-health-services", "data", "chr2023.xlsx"),
                              sheet = "Ranked Measure Data",
                              skip = 1,
                              col_names = TRUE,
                              guess_max = Inf
                              )

# Limit CHR data to relevant variables
chr2023 <- chr2023 |>
  select(
    GEOID = "FIPS",
    state_name = State,
    county_name = County,
    # Number of primary care physicians (PCP) in patient care
    pc_physicians_chr = "# Primary Care Physicians",
    # Primary Care Physicians per 100,000 population
    rate_pc_physicians_chr = "Primary Care Physicians Rate", 
    # Population to Primary Care Physicians ratio
    ratio_population_pc_physician_chr = "Primary Care Physicians Ratio",
  ) |>
  # Delete state-level observations
  filter(!is.na(county_name))

# The CHR metric is reported as an actual ratio, so we split the ratio into its parts
chr2023 <- chr2023 |>
  separate(col = ratio_population_pc_physician_chr,
           into = c('ratio_population_pc_physician_chr', 'consequent'),
           remove = TRUE)

# Split GEOID into separate state and county variables so we can join to main AHRF data
chr2023 <- chr2023 |>
  mutate(
    state = str_sub(GEOID, 1, 2),
    county = str_sub(GEOID, 3, 5)
  )

```

#### 6.4b Join 2023 AHRF data and 2023 CHR data
The 2023 County Health Rankings uses the 2021-2022 AHRF file [(see Data and methods -> Methods -> Data Source)](https://www.countyhealthrankings.org/explore-health-rankings/county-health-rankings-model/health-factors/clinical-care/access-to-care/primary-care-physicians?) for their ratio. The latest year of primary care physician data available in the 2021-2022 AHRF file is 2020. So we are comparing 2020 data from each file. Our file is long by year. We need to filter to 2020 and then reshape our file to properly join to the County Health Rankings file.

Note that the [CHR documentation](https://www.countyhealthrankings.org/health-data/methodology-and-sources/rankings-data-documentation) indicates that the population used to create this metric was from 2021, so we also retain 2021 population data.
```{r prepare-ahrf-for-test}
ahrf_test <- joined_data |>
  filter(year %in% c("2020", "2021")) |>
  select(-c(state_name, county_name)) |>
  pivot_wider(
    names_from = year,
    values_from = c(pc_physicians, population, pop, ratio_population_pc_physician)
  )

```

Now we can join AHRF data onto CHR data
```{r join-chr-ahrf}
chr_test <- full_join(
  x = chr2023 |>
    select(-c(GEOID, state_name)) |>
    mutate(ratio_population_pc_physician_chr = as.numeric(ratio_population_pc_physician_chr)),
  y = ahrf_test |>
    select(-c(pc_physicians_2021, ratio_population_pc_physician_2021)),
  by = c("state", "county")
)
  
```

The CHR data also has Valdez-Cordova, AK listed for 2020 instead of Chugach and Copper River. We remove all 3 of these observations for this exercise. We also remove the 9 Connecticut counties from 2021 that are in our data but not the CHR data for the purposes of this exercise.
```{r clean-chr-test}
chr_test <- chr_test |>
  mutate(GEOID = str_c(state, county)) |>
  filter(!GEOID %in% c("02261", "02063", "02066", 
                       "09110", "09120", "09130", 
                       "09140", "09150", "09160", 
                       "09170", "09180", "09190")) |>
  select(-GEOID)


# Reorder chr_test
chr_test <- chr_test |>
  select(state, county, county_name, 
         pc_physicians_2020, pc_physicians_chr,
         ratio_population_pc_physician_2020, ratio_population_pc_physician_chr, consequent,
         population_2020, pop_2020, population_2021, pop_2021)
  
```


#### 6.4c Compare values from CHR and AHRF
County Health Rankings reports a missing value for counties with population greater than 2,000 and 0 primary care physicians. We do not report a missing value for these observations. There are 147 of these observations in 2020. Future updates may want to consider contacting County Health Rankings to learn more about this suppression decision. We remove these observations for this exercise.

```{r compare-suppressed}
# Create subset of observations where PCP counts were suppressed by CHR
chr_test_suppressed <- chr_test |>
  filter(is.na(pc_physicians_chr) & pc_physicians_2020 == 0)

# Count number of these observations in 2020
chr_test_suppressed |>
  count()

# Remove these counties for comparison
chr_test <- chr_test |>
  filter(!(is.na(pc_physicians_chr) & pc_physicians_2020 == 0))

```

Two counties from Missouri (Jasper and Newton Counties) are missing PCP counts from CHR but not from our data. These counties do not seem to be disbanded or otherwise unreliable. We remove these counties for this exercise.
```{r check-missouri}
# Check PCP counts missing in CHR but not our data
chr_test |>
  filter(is.na(pc_physicians_chr) & !is.na(pc_physicians_2020))

# Remove these counties for comparison
chr_test <- chr_test |>
  filter(!(is.na(pc_physicians_chr) & !is.na(pc_physicians_2020)))

```

After removing the observations described above, the number of PCPs is consistent across our data and the CHR data. This makes sense, because AHRF was the source for both.
```{r test-pcps}
stopifnot(all.equal(chr_test$pc_physicians_chr, chr_test$pc_physicians_2020))

```

County Health Rankings reports the ratio of population to primary care physicians as an actual ratio (e.g., `2500:1` or `2500:0`). Our ratio for this observation would just be `2500` if there are any primary care physicians, or `0` if there are no primary care physicians. We have already split CHR's ratio into its parts, and now for comparison, we need to replace their ratio for observations with `0` PCPs to `0` so that it matched our ratio.
```{r fix-chr-ratio}
chr_test <- chr_test |>
  mutate(ratio_population_pc_physician_chr = if_else(
    consequent=="0", 0, ratio_population_pc_physician_chr
  ))

```

However, even after correcting for observations with 0 PCPs, our ratio does not equal County Health Rankings' ratio for 2020. This implies that County Health Rankings used a different population source than we did. We used the 2020 Decennial Census population. This population data is also available directly in the AHRF file.
```{r check-ratios-diff}
chr_test |>
  select(ratio_population_pc_physician_2020, ratio_population_pc_physician_chr) |>
  head(10)

chr_test <- chr_test |>
  mutate(ratio_diff_pct = 
           abs(ratio_population_pc_physician_2020 - ratio_population_pc_physician_chr) / ((ratio_population_pc_physician_chr + ratio_population_pc_physician_2020)/2))

quantile(chr_test$ratio_diff_pct, probs = c(0, 0.2, 0.4, 0.6, 0.8, 0.99, 1), na.rm = TRUE)

```

County Health Rankings documentation indicates that they use 2021 Census Population Estimates for their ratio, even though the measure of primary care physicians is from 2020. However, during a meeting with CHR researchers on 2024-01-31, one of their team members said they used Vintage 2020 population estimates, which are based on the 2010 Census (see more [here](https://www.census.gov/programs-surveys/popest/technical-documentation/research/evaluation-estimates/2020-evaluation-estimates.html)).

We download the Vintage 2020 population estimates and are able to recreate their ratio.
```{r load-vintage-2020-pop}
# Download the Vintage 2020 population estimates 
download.file(
  url = "https://www2.census.gov/programs-surveys/popest/datasets/2010-2020/counties/totals/co-est2020.csv",
  destfile = "04_health/access-health-services/data/chr_pop.csv",
  mode = "wb"
)

# Read in and clean the Vintage 2020 population estimates
chr_pop <- read_csv(here::here("04_health", "access-health-services", "data", "chr_pop.csv")) |>
  select(
    state = STATE,
    county = COUNTY,
    pop_2020_chr = POPESTIMATE2020
  ) |>
  filter(county != "000")

# Join these population data only to the counties left in our testing file
chr_test_2 <- left_join(
  x = chr_test,
  y = chr_pop,
  by = c("state", "county")
)

# Recreate CHR ratio using their true population source
chr_test_2 <- chr_test_2 |>
  mutate(
    ratio_test = case_when(
      pc_physicians_chr > 0 ~ round(pop_2020_chr/pc_physicians_chr),
      pc_physicians_chr == 0 ~ 0
      )
  ) |>
  select(state, 
         county, 
         ratio_population_pc_physician_2020,
         ratio_population_pc_physician_chr,
         ratio_test
         ) |>
  mutate(ratio_diff = ratio_population_pc_physician_chr - ratio_test)

```

We were able to recreate the CHR ratio almost perfectly with their true population source. About 2 percent of observations are off by one, but this is just a rounding error. The ratio reported by County Health Rankings still does not match our ratio, but we used a more recent population count, so our ratio is likely more accurate (at least for 2020).
```{r assert-ratios-equal}
# Visually inspect recreated ratio
chr_test_2 |>
  head(10)

# Check distribution of difference between CHR reported and re-constructed ratio
quantile(
  chr_test_2$ratio_diff,
  probs = c(0.97, 0.98, 1),
  na.rm = TRUE
)

# Test that all values are within 1 of each other
testthat::test_that("Check that reconstructed CHR ratio matches reported CHR ratio", {
  expect_equal(chr_test_2$ratio_population_pc_physician_chr, 
               chr_test_2$ratio_test,
               tolerance = 1)
})

```
```{r clean-environment-6.4}
# Remove obsolete files
rm(chr2023, chr_test, chr_test_suppressed, chr_pop, chr_test_2, ahrf_test)

```


## 7. Add data quality flags
This section adds a flag for counties with less than 2,000 people to indicate low population, and assigns a data quality flag based on the ratio's sensitivity to an extra primary care physician in the county.

Note that County Health Rankings suppresses data for counties with population greater than 2,000 and 0 primary care physicians. They report a missing value for these observations. It is not entirely clear to me why they suppress these data. One potential explanation is that they assume "0 PCPs" could be a reporting error for counties with a decent-sized population. We do not apply this suppression rule, and any county with 0 reported PCPs is assigned a quality value of `NA`. Future updates may want to think more about how to handle the quality indicator for counties that actually have 0 PCPs and those that have 0 reported PCPs due to a reporting error in the data.
    
Create a flag for counties with low population    
```{r flag-low-pop}
joined_data <- joined_data |>
  mutate(
    ratio_population_pc_physician_flag_low_pop = case_when(
      population < 2000 ~ "1",
      population >= 2000 ~ "0"
    )
  )

```

We calculate the sensitivity of the ratio as measured by percent change in the ratio when adding 1 PCP to each county. E.g., if there are 2,000 people in a county with 1 physician, the addition of 1 more physician changes the ratio drastically.

Note that the quality indicator, which is based on the value of `sensitivity`, will be `NA` when there are 0 primary care physicians in a county. Some counties may actually have 0 PCPs, while others may only have 0 reported due to an error in the data (lack of reporting, etc.). We assign `NA` to all of these counties, but future updates may want to consider how to differentiate these cases. One potential solution would be to assume that counties with population greater than 2,000 but 0 reported PCPs are a reporitng error, while counties with population less than 2,000 and 0 reported PCPs actually do not have any PCPs.
```{r calculate-sensitivity}
joined_data <- joined_data |>
  mutate(
    # Add 1 to the denominator of the ratio and reconstruct the ratio
    plus1 = population / (pc_physicians + 1),
    # Calculate the differences between each of the new ratios and the original ratio
    plus1_diff = abs(plus1 - as.numeric(ratio_population_pc_physician)),
    sensitivity = ifelse(
      ratio_population_pc_physician != 0,
      plus1_diff / ratio_population_pc_physician,
      NA
    )
  )

```

90 percent of counties across all years have a percent change less than or equal to 33 percent.
```{r check-sensitivity}
quantile(joined_data$sensitivity, probs = c(0, 0.2, 0.4, 0.6, 0.75, 0.8, 0.9, 1), na.rm = TRUE)

```

Counties with the lowest number of PC physicians have the highest sensitivity.
```{r visualize-sensitivity}
joined_data |>
  filter(!is.na(ratio_population_pc_physician)) |>
  ggplot(aes(pc_physicians, sensitivity)) +
  geom_point(alpha = 0.2) +
  labs(title = "Counties with the lowest number of PC physicians have the highest sensitivity",
       subtitle = "") +
  scatter_grid()

```

To measure the data quality, we've added 1 to the number of primary care physicians in each county and re-created the ratio of the number of population per primary care physician. If the ratio changes less than 20 percent we assign a quality value of 1. If the ratio changes between 20 percent and 39 percent we assign a quality value of 2. If the ratio changes between 40 percent and 59 percent we assign a quality value of 3.
```{r assign-data-quality}
# Assign a data quality flag
joined_data <- joined_data |>
  mutate(ratio_population_pc_physician_quality = 
           case_when(
             sensitivity < 0.2 ~ 1,
             sensitivity < 0.4 ~ 2,
             sensitivity < 0.6 ~ 3
           )
  )
```

Most counties are of high quality in all years.
```{r check-quality}
joined_data |>
  filter(!is.na(ratio_population_pc_physician_quality)) |>
  ggplot(aes(x = ratio_population_pc_physician_quality)) +
  geom_bar() +
  facet_wrap(~ year, scales = "free_x")

joined_data |>
  count(ratio_population_pc_physician_quality)

```

There are more counties missing quality in later years than earlier years.
```{r}
joined_data |>
  filter(is.na(ratio_population_pc_physician_quality)) |>
  group_by(year) |>
  count()
```

This is because more counties have 0 primary care physicians in later years than earlier years.
```{r}
joined_data |>
  filter(pc_physicians==0) |>
  group_by(year) |>
  count()

```


Checking combinations of `0` and `NA` values for important variables. All `NA` values of the `quality` indicator come from observations where the `ratio` is `0` or `NA`.
```{r check-missing-na}
# Create subset
test <- joined_data |>
  filter(pc_physicians == 0 | ratio_population_pc_physician == 0 |
           is.na(sensitivity) | is.na(ratio_population_pc_physician_quality))

# Count number of unique observations
test %>%
  distinct(pc_physicians, ratio_population_pc_physician,
           sensitivity, ratio_population_pc_physician_quality) %>%
  count(pc_physicians, ratio_population_pc_physician,
           sensitivity, ratio_population_pc_physician_quality)

```

```{r clean-environment-7}
# Remove obsolete observations
rm(test)
```



## 8. Save and write out data
```{r write-data}
# Remove unnecessary variables and sort by year, state, and county
final_data <- joined_data |>
  select(-c(population, pc_physicians, pop, plus1, plus1_diff, sensitivity)) |>
  arrange(year, state, county)


# Write out final data
write_csv(x = final_data,
          file = here::here(
            "04_health",
            "access-health-services",
            "final",
            "ratio_pop_pcp_metric_all_county.csv"
          )
)

```

