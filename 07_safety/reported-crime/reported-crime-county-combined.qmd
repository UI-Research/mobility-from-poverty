---
title: "Reported Violent Crime and Property Crime - County"
author: "Vincent Pancini"
date: "`r format(Sys.time(), '%B %d, %Y %H:%M')`"
output:
  html_document:
    number_sections: false
    self_contained: TRUE
    code_folding: show
    toc: TRUE
    toc_float: TRUE
    editor_options:
      chunk_output_type: console
---

<style>
@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');
</style>

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Lato" />


```{r rmarkdown-setup, echo = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r setup}
options(scipen = 999)

library(tidyverse)
library(tidylog)
library(urbnthemes)
source(here::here("functions", "testing", "evaluate_final_data.R"))

set_urbn_defaults(style = "print")

```

This metric represents the county-level rate of reported violent crimes per 100,000 people and reported property crimes per 100,000 people for years 2021-2023.

The rest of this program is organized as follows:

0. Background and changes
1. Manually download NIBRS offense data
2. Clean and append NIBRS offense data
3. Aggregate offenses from individual to agency-level
4. Aggregate offenses from agency to county-level
5. Calculate metric
6. Construct quality indicators
7. Validation
8. Save and write out data

All data used for the creation of metrics in this program are available on Box [here](https://urbanorg.box.com/s/3emanjkl5rw1jhcnj3zuiwddt3x6s70u). Data stored on Box are only available to Urban Institute researchers.

This file assumes that you have cloned the GitHub repository for this project to your local computer. You can find the project repository [here](https://github.com/UI-Research/mobility-from-poverty) and learn how to clone a repository [here](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository).

# 0. Background and Changes
This section provides background information for the data used to create this metric and describes changes from the previous round of metric updates.

## 0.1 Background
The creation of this metric relies on data from the FBI's National Incident-Based Reporting System (NIBRS) data. To learn more about the data, see criminologist Jacob Kaplan's book ["Decoding FBI Crime Data"](https://ucrbook.com/nibrs-overview.html). There are two important things to consider in the creation of this metric:

1. Most police agencies do not report NIBRS data prior to 2021. In 2019, only 8,500 out of approximately 18,000 police agencies in the United States (covering about 45% of the US population) reported NIBRS data. Therefore, we do not create metrics using this data from years prior to 2021. Many agencies still do not submit data to NIBRS, and those that do may not submit complete information, so this metric is inherently inaccurate.
2. Data may become more comprehensive over time as more agencies report their information. E.g., the full 2022 NIBRS data may not be available until later in 2023. Therefore, previous years should be re-run with each metric update, and the values for the same year are not expected to match in newer metric updates.

We use criminologist Jacob Kaplan's pre-processed NIBRS data available [here](https://dataverse.harvard.edu/dataverse/ucrdata) instead of raw data downloaded directly from the FBI. Instructions for downloading the data are included in the next section.

## 0.2 Changes from previous round of updates
+ Added the newest year of data, 2023
+ Previous versions of the metric relied on two files: One that created population weights for each agency in order to more accurately aggregate agency-level crimes to the county-level, and one that actually calculated the metric. I've integrated the two programs into one in this round of updates to be more straightforward and intuitive.
+ Access to the data changed from OpenICPSR to Harvard Dataverse, and the storage format of the data changed. Therefore, the section of the program that reads in the data has changed.

## 0.3 Suggestions for future updates
+ We use the 2012 Law Enforcement Agency Identifiers Crosswalk (LEAIC) to help match agencies to counties. 2012 is the most recent year for which this crosswalk is available. This may present issues in harmonizing data across years, because some counties have changed since 2012 and police agencies may have been created or disbanded since then. Future updates should check if a more recent crosswalk is available yet.

# 1. Instructions to manually download NIBRS Offense Segment
This section describes the steps for manually downloading the NIBRS data segments necessary for this metric.

We get offense counts from one segment of the NIBRS: the Offense Segment.

Accessing these data requires completing a license/data use agreement. Therefore, we do not directly download the data in this program. Manually downloading these data is a six-step process, but you will only need to do each of these steps once for the creation of this metric:

1. Navigate to the Uniform Crime Reporting (UCR) Program Data portal hosted on Harvard Dataverse [here](https://dataverse.harvard.edu/dataverse/ucrdata).
2. Select National Incident-Based Reporting System (NIBRS) - Offense Segment [here](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/TODXCL).
3. For each year you need to download, click on the relevant `.rds` file (e.g., `nibrs_offense_segment_YYYY.rds`).
4. Towards the top right of the screen, select `Access File` and, from the dropdown menu, select `Original File Format` under `Download Options`.
5. Complete the `License/Data Use Agreement` by entering your `Name`, `Email`, `Institution`, `Position`, and the `Additional Questions` (`How will this data be used (e.g. personal project, academic paper, for-profit project)`, `What is your research question?`, and `Do you agree to cite the data properly if used in publications?`).
6. Move the zip file from your `Downloads` folder to the `\mobility-from-poverty\07_safety\data\offense-segment` directory.

# 2. Prepare to read in and clean NIBRS Offense Segment
This section reads in and cleans the NIBRS Offense Segment data for 2021-2023. Each offense in the data has an offense code. We are interested in the rate of both violent crimes and property crimes. We first identify each offense type in the data using Section 2.3 of the [2021.1 National Incident-Based Reporting System User Manual](https://bjs.ojp.gov/sites/g/files/xyckuh236/files/sarble/data_common/nibrs-user-manual-2021-1041521.pdf) so that we can later aggregate offenses from the individual-level to the agency-level by offense type.

## 2.1 Identify violent and property crimes
```{r identify-crime-type, eval=FALSE}
# Create data frame for all offense and type combinations for 2021-2023.
codes <- tribble(
  ~offense,	~crime_against,
  "animal cruelty",	                                                    "society",	
  "arson",	                                                            "property",		
  "assault offenses - aggravated assault",	                            "person",	
  "assault offenses - intimidation",	                                  "person",
  "assault offenses - simple assault",	                                "person",		
  "bribery",	                                                          "property",		
  "burglary/breaking and entering",	                                    "property",		
  "commerce violations - federal liquor offenses",	                    "society",		
  "commerce violations - federal tobacco offenses",	                    "society",		
  "commerce violations - wildlife trafficking",	                        "society",		
  "counterfeiting/forgery",	                                            "property",		
  "destruction/damage/vandalism of property",	                          "property",
  "drug/narcotic offenses - drug equipment violations",	                "society",
  "drug/narcotic offenses - drug/narcotic violations",	                "society",		
  "embezzlement",	                                                      "property",		
  "extortion/blackmail",	                                              "property",		
  "fraud offenses - credit card/atm fraud",	                            "property",	
  "fraud offenses - false pretenses/swindle/confidence game",	          "property",
  "fraud offenses - hacking/computer invasion",	                        "property",
  "fraud offenses - identity theft",	                                  "property",
  "fraud offenses - impersonation",	                                    "property",
  "fraud offenses - money laundering",	                                "society",
  "fraud offenses - welfare fraud",	                                    "property",		
  "fraud offenses - wire fraud",	                                      "property",
  "fugitive offenses - flight to avoid deportation",                    "society",
  "fugitive offenses - flight to avoid prosecution",	                  "society",
  "fugitive offenses - harboring escapee/concealing from arrest",       "society",
  "gambling offenses - betting/wagering",	                              "society",
  "gambling offenses - gambling equipment violations",	                "society",
  "gambling offenses - operating/promoting/assisting gambling",	        "society",		
  "gambling offenses - sports tampering",	                              "society",	
  "human trafficking - commercial sex acts",	                          "person",
  "human trafficking - involuntary servitude",	                        "person",		
  "immigration violations - illegal entry into the united states",	    "society",
  "justifiable homicide - not a crime",                                 "not a crime",
  "kidnapping/abduction",	                                              "person",
  "larceny/theft offenses - all other larceny",	                        "property",
  "larceny/theft offenses - pocket-picking",	                          "property",		
  "larceny/theft offenses - purse-snatching",	                          "property",		
  "larceny/theft offenses - shoplifting",	                              "property",		
  "larceny/theft offenses - theft from building",	                      "property",		
  "larceny/theft offenses - theft from coin-operated machine or device", "property",
  "larceny/theft offenses - theft from motor vehicle",	                "property",		
  "larceny/theft offenses - theft of motor vehicle parts/accessories",	"property",
  "motor vehicle theft",	                                              "property",
  "murder/nonnegligent manslaughter",                                   "person",     
  "negligent manslaughter",                                             "person",
  "pornography/obscene material",	                                      "society",
  "prostitution offenses - assisting or promoting prostitution",	      "society",
  "prostitution offenses - prostitution",	                              "society",		
  "prostitution offenses - purchasing prostitution",	                  "society",		
  "robbery",	                                                          "property",
  "sex offenses - failure to register as a sex offender",	              "society",
  "sex offenses - fondling (incident liberties/child molest)",	        "person",
  "sex offenses - incest",	                                            "person",
  "sex offenses - rape",	                                              "person",
  "sex offenses - sexual assault with an object",	                      "person",
  "sex offenses - sodomy",	                                            "person",		
  "sex offenses - statutory rape",	                                    "person",		
  "stolen property offenses (receiving, selling, etc.)",	              "property",
  "weapon law violations - explosives",	                                "society",
  "weapon law violations - violation of national firearm act of 1934",  "society",
  "weapon law violations - weapon law violations",	                    "society"
)

```

Using the data frame above, group offenses into violent crimes and property crimes.
```{r subset-crimes, eval=FALSE}
# Extract offenses into vectors for property crimes and violent crimes
property <- subset(codes, crime_against=="property")$offense
violent <- subset(codes, crime_against=="person")$offense

```

# 3. Read in NIBRS offense data, clean, and aggregate from individual- to agency-level
Note that future updates may want to consider turning this section into a function so that code isn't repeated, but the files are very large, and loading each year separately ended up being faster.
```{r read-offense, eval = FALSE}
offenses_23 <- readRDS(here::here("07_safety", "data", "offense-segment", "nibrs_offense_segment_2023.rds"))

offenses_23_agency <- offenses_23 |>
  # Limit to variables of interest
    select(ori, # unique agency identifier
           ucr_offense_code,
           year
    ) |>
    # Create indicator variables for property 
    mutate(
      property = ifelse(ucr_offense_code %in% property, 1, 0),
      violent = ifelse(ucr_offense_code %in% violent, 1, 0),
      year = as.character(year)
    ) |>
    # Aggregate property and violent crimes by agency
    group_by(ori, year) |>
    summarize(all = n(),
              violent = sum(violent),
              property = sum(property)) |>
    ungroup()

offenses_22 <- readRDS(here::here("07_safety", "data", "offense-segment", "nibrs_offense_segment_2022.rds"))

offenses_22_agency <- offenses_22 |>
  # Limit to variables of interest
    select(ori, # unique agency identifier
           ucr_offense_code,
           year
    ) |>
    # Create indicator variables for property 
    mutate(
      property = ifelse(ucr_offense_code %in% property, 1, 0),
      violent = ifelse(ucr_offense_code %in% violent, 1, 0),
      year = as.character(year)
    ) |>
    # Aggregate property and violent crimes by agency
    group_by(ori, year) |>
    summarize(all = n(),
              violent = sum(violent),
              property = sum(property)) |>
    ungroup()

offenses_21 <- readRDS(here::here("07_safety", "data", "offense-segment", "nibrs_offense_segment_2021.rds"))

offenses_21_agency <- offenses_21 |>
  # Limit to variables of interest
    select(ori, # unique agency identifier
           ucr_offense_code,
           year
    ) |>
    # Create indicator variables for property 
    mutate(
      property = ifelse(ucr_offense_code %in% property, 1, 0),
      violent = ifelse(ucr_offense_code %in% violent, 1, 0),
      year = as.character(year)
    ) |>
    # Aggregate property and violent crimes by agency
    group_by(ori, year) |>
    summarize(all = n(),
              violent = sum(violent),
              property = sum(property)) |>
    ungroup()
```

Append each year of data
```{r append-offenses, eval = FALSE}
offenses_agency <- bind_rows(offenses_21_agency, offenses_22_agency, offenses_23_agency)

rm(codes, violent, property, offenses_21, offenses_21_agency, offenses_22, offenses_22_agency, offenses_23, offenses_23_agency)

```

For ease of use, I write out the agency-level data and then read it back in.
```{r write-offenses, eval = FALSE}
# Write out agency-level offense data
write_csv(offenses_agency, file = here::here("07_safety", "data", "offense-segment", "offenses_agency.csv"))
```


```{r read-appended-offenses}
offenses_agency <- read.csv(here::here("07_safety", "data", "offense-segment", "offenses_agency.csv"))

```

Check the distribution of each crime type by year. 2023 has a much higher maximum number of reported crime counts for each type of crime.
```{r check-distribution-crime-types}
offenses_agency |>
  pivot_longer(
    cols = c(all, property, violent),
    names_to = "crime_type",
    values_to = "crime_count"
  ) |>
  group_by(crime_type, year) |>
  summarize(
    quantiles = list(quantile(crime_count,
                                      probs = c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.99, 1),
                                      na.rm = TRUE))
  ) |>
  unnest_wider(quantiles)

```

Check the number of agencies that are included in the NIBRS offense data in each year. More agencies report to NIBRS each year.
```{r check-offense-agencies}
offenses_agency |>
  group_by(year) |>
  summarize(
    n_agencies = n_distinct(ori)
  )

```


# 4. Aggregate offenses to county-level
This section uses the Batch Header Segment of the NIBRS. The Batch Header Segment includes metadata about each participating police agency. Each individual police agency (identified by originating agency identifier, or ORI) that has submitted any information to NIBRS for that year will appear in this segment only once. Police agencies that have not submitted their data to NIBRS do not appear in this segment, so it is inherently incomplete. 

Some police agencies have jurisdiction in more than one county. The Batch Header Segment includes county information for all counties associated with each agency. This section reshapes the file to be long by agency/county-pairs, merges on county population by county and year, and creates weights to more accurately aggregate arrest counts from the agency-level to the county-level.

## 4.1 Instructions to manually download NIBRS Batch Header Segment
Manually downloading these data from the Harvard Dataverse is a five-step process, but you will only need to do each of these steps once for the creation of this metric:

  1. Navigate to the Uniform Crime Reporting (UCR) Program Data portal hosted on Harvard Dataverse [here](https://dataverse.harvard.edu/dataverse/ucrdata).
  2. Select National Incident-Based Reporting System - Batch Header Segment [here](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/HUI9WF).
  3. Scroll down to `nibrs_batch_header_1991_2023.rds` and select the file [here](https://dataverse.harvard.edu/file.xhtml?fileId=10899624&version=2.0).
  4. Select `Access File`
      + Select `Gzip Archive` under `Download Options`
      + Agree to the Dataset Terms by entering your `Name`, `Email`, `Institution`, `Position`, and answer `How will this data be used`, and then select `Accept` at the bottom of the pop-up
  5. This will download an `.rds` file titled `nibrs_batch_header_1991_2023.rds`. Move this file to the `mobility-from-poverty\07_safety\data\batch-header-segment-and-agencies` directory after you have cloned the repository for this project from GitHub.

## 4.2 Load and clean NIBRS Batch Header Files
Load Batch Header File
```{r load-bhf, message=FALSE}
batch_header_file_full <- readRDS(here::here("07_safety", "data", "batch-header-segment-and-agencies", "nibrs_batch_header_1991_2023.rds"))

```

Check the number of agencies included in the batch header file in each year. There are more agencies in the batch header file than the offense segment, which is consistent with what we expect.
```{r check-bhf-agencies}
batch_header_file_full |>
  filter(year %in% c(2021, 2022, 2023)) |>
  group_by(year) |>
  summarize(
    n_agencies = n_distinct(ori)
  )
```


Filter the file to the appropriate year, select relevant variables, and rename as necessary.
```{r clean-bhf}
batch_header_file <- batch_header_file_full |>
  filter(
    year %in% c(2021, 2022, 2023),
    # number_of_months_reported != "0"
    ) |>
  select(
    ori,
    agency_indicator,
    year,
    state_name = state,
    state_abbreviation,
    city_name,
    core_city,
    county_fips_1 = fips_county_code_1,
    county_fips_2 = fips_county_code_2,
    county_fips_3 = fips_county_code_3,
    county_fips_4 = fips_county_code_4,
    county_fips_5 = fips_county_code_5
  ) |>
  # Edit county FIPS codes to have three digits
  mutate(
    across(starts_with("county_fips_"),
           ~ str_pad(.x, 3, side = "left", pad = "0"))
  )

```

Change the values for core city indicator from `Y`/`N` to `0`/`1`
```{r fix-core-indicator}
batch_header_file <- batch_header_file |>
  mutate(
    core_city = case_when(
      core_city=="Y" ~ as.numeric(1),
      core_city=="N" ~ as.numeric(0),
      TRUE ~ NA_real_
    )
  )

```


Clean geography information on the batch header file.
```{r check-bhf-states}
# See what states/territories are included
batch_header_file |>
  group_by(state_name, state_abbreviation) |>
  count()

```


```{r edit-bhf-geos}
batch_header_file <- batch_header_file |>
  # Remove US territories by name because no FIPS codes
  filter(!state_name %in% c("Guam", "Puerto Rico", "Virgin Islands")) |>
  mutate(
    # The NIBRS data abbreviates Nebraska as "NB" instead of its correct abbreviation "NE"
    state_abbreviation = if_else(state_abbreviation=="NB", "NE", state_abbreviation),
    # Wyoming is also named "Wyoming V2" but it is unclear why
    state_name = if_else(state_name=="Wyoming V2", "Wyoming", state_name)
  )

```

The batch header file identifies state by name and abbreviation, but not state FIPS code. We manually add on state FIPS codes to the batch header file
```{r add-statefips-bhf}
# Create crosswalk of state FIPS codes to state names/abbreviations
state_fips_xw <- tribble(
  ~state_fips, ~state_abbreviation, ~state_name,
  "01",	"AL", "Alabama",
  "02",	"AK", "Alaska",
  "04",	"AZ", "Arizona", 
  "05",	"AR", "Arkansas",	
  "06",	"CA", "California",	
  "08",	"CO", "Colorado",
  "09",	"CT", "Connecticut",
  "10",	"DE", "Delaware",
  "11",	"DC", "District of Columbia",
  "12",	"FL", "Florida",
  "13",	"GA", "Georgia",	
  "15",	"HI", "Hawaii",
  "16",	"ID", "Idaho",
  "17",	"IL", "Illinois",
  "18",	"IN", "Indiana",
  "19",	"IA", "Iowa",	
  "20",	"KS", "Kansas",	
  "21",	"KY", "Kentucky",	
  "22",	"LA", "Louisiana",
  "23",	"ME", "Maine",
  "24",	"MD", "Maryland",
  "25",	"MA", "Massachusetts",
  "26",	"MI", "Michigan",	
  "27",	"MN", "Minnesota",	
  "28",	"MS", "Mississippi",	
  "29",	"MO", "Missouri",	
  "30",	"MT", "Montana",	
  "31",	"NE", "Nebraska",	
  "32",	"NV", "Nevada",	
  "33",	"NH", "New Hampshire",	
  "34",	"NJ", "New Jersey",	
  "35",	"NM", "New Mexico",	
  "36",	"NY", "New York",	
  "37",	"NC", "North Carolina",
  "38",	"ND", "North Dakota",	
  "39",	"OH", "Ohio",	
  "40",	"OK", "Oklahoma",	
  "41",	"OR", "Oregon",	
  "42",	"PA", "Pennsylvania",	
  "44",	"RI", "Rhode Island",	
  "45",	"SC", "South Carolina",	
  "46",	"SD", "South Dakota",
  "47",	"TN", "Tennessee",
  "48",	"TX", "Texas",	
  "49",	"UT", "Utah",	
  "50",	"VT", "Vermont",	
  "51",	"VA", "Virginia",	
  "53",	"WA", "Washington",	
  "54",	"WV", "West Virginia",	
  "55",	"WI", "Wisconsin",	
  "56",	"WY", "Wyoming"
)

# Join state FIPS codes onto the batch header file
batch_header_file <- batch_header_file |> 
  tidylog::left_join(
    y = state_fips_xw, by = c("state_name", "state_abbreviation")
  )

# Remove crosswalk
rm(state_fips_xw)

```

### 4.2a Exclude state police and other state agencies
Check distribution of agency types. There are 7 types of agencies. Note that I'm not sure what an agency indicator of "5" represents, and I can't find any information about it in the [available documentation](https://ucrbook.com/). In data year 2022, a value of 5 represented "special agencies" (last year's values shown below), so it could be an error in the pre-processing of this data. 

| Value | Label                     |
|:-----:|:--------------------------|
|   0   | Covered by another agency |
|   1   | City                      |
|   2   | County                    |
|   3   | University or college     |
|   4   | State Police              |
|   5   | Special Agency            |
|   6   | Other state agencies      |
|   7   | Tribal agencies           |
|   8   | Federal agencies          |

```{r count-agency-types}
batch_header_file |>
  count(agency_indicator) |>
  mutate(percent = n/nrow(batch_header_file))

```

State agencies cover multiple counties, so we remove these agencies for simplicity. In the last round of updates, Metric Round 2024, which used an older version of these data, "other state agencies" were removed. In this round, Metric Round 2025, which uses the most recent version of these data, the value "other state agencies" no longer exists for any of the years. They could be included in the new "other agencies" category, but I'm not sure how to be certain, so leaving this category for now.
```{r remove-state-agencies}
batch_header_file <- batch_header_file |>
  filter(!agency_indicator %in% c("state police"))

```

Almost 400 agencies have a missing county FIPS value in each year.
```{r check-missing-county-bhf}
# Subset data to examine further
bhf_missing_county <- batch_header_file |>
  filter(is.na(county_fips_1))

bhf_missing_county |>
  count(year)

```


## 4.3 Use LEAIC to identify some of the agencies with missing county information

The goal of this section is to match a county FIPS code onto every agency in the 2022 NIBRS Batch Header File. The Batch Header Segment already includes a county FIPS code for most agencies, but some agencies still do not have a county associated with them. We attempt to get county information for these agencies using the Law Enforcement Agency Identifiers Crosswalk (LEAIC).

### 4.3a Background on LEAIC and manual download
To address the agencies that are missing county information, we use the 2012 Law Enforcement Agency Identifiers Crosswalk (LEAIC)

The LEAIC facilitates linking reported crime data with socio-economic data. The LEAIC file is available for download from the National Archive of Criminal Justice Data (NACJD) available through ICPSR at the following link:

  * [LEAIC](https://www.icpsr.umich.edu/web/NACJD/studies/35158)
  
Note that 2012 is the most recent year for which this crosswalk is available. This may present issues in harmonizing data across years, because some counties have changed since 2012. Future updates should check if a more recent crosswalk is available yet.
  
Accessing these data requires an ICPSR account. Manually downloading these data is a five-step process, but you will only need to do each of these steps once for the creation of this metric:

  1. Create an ICPSR account [here](https://www.icpsr.umich.edu/cgi-bin/newacct).
  2. Navigate to the National Archive of Criminal Justice Data (NACJD) landing page for the LEAIC [here](https://www.icpsr.umich.edu/web/NACJD/studies/35158)).
  3. Select `Download`
      + Select `Delimited`
      + Select `Agree` on the `Terms of Use`
  4. Sign into your ICPSR account
  5. This will download a zip file titled `ICPSR_35158-V2`. Unzip the file and navigate to `ICPSR_35158\DS0001\35158-0001-Data.tsv`. Move this file to the `mobility-from-poverty\07_safety\data\batch-header-segment-and-agencies` directory after you have cloned the repository for this project from GitHub.

### 4.3b Load and clean LEAIC
After downloading the LEAIC, read it in. This file has a county FIPS linked to every reporting agency.
```{r load-leaic}
# Read in crosswalk
leaic <- read_tsv(here::here("07_safety", "data", "batch-header-segment-and-agencies", "35158-0001-Data.tsv"))

```

971 of the 1113 agency-years with missing county information from the Batch Header File are in the LEAIC.
```{r check-missing-in-leaic}
# Check how many agencies with missing county are in LEAIC
sum(bhf_missing_county$ori %in% leaic$ORI9)

```

Limit file to necessary variables and rename. We use the codebook (`ICPSR_35158\DS0001\35158-0001-Codebook`) to determine what each variable represents.
```{r clean-leaic}
leaic <- leaic |>
  select(
    ori = ORI9,
    # state = FIPS_ST,
    county_fips_1 = FIPS_COUNTY
  ) |>
  # Remove agencies with invalid ORI
  filter(ori != "-1") # Not in UCR/NCIC 

```

### 4.3c Join LEAIC onto NIBRS data with missing counties by agency identifier
Join the LEAIC to the NIBRS Batch Header Segment by agency.
142 agencies still have no county after using the county information from LEAIC. Most of these observations are tribal or other agencies.
```{r join-missing-bhf-leaic}
bhf_missing_county <- left_join(
  x = bhf_missing_county |>
    select(-starts_with("county_fips")),
  y = leaic,
  by = c("ori")
)

bhf_missing_county |>
  filter(is.na(county_fips_1)) |>
  count(agency_indicator)

```

### 4.3d Use LEAIC to create final agency-county data
Replace county information in NIBRS data for observations that initially had a missing county value with the updated county information from LEAIC.
```{r replace-counties}
batch_header_file <- batch_header_file |>
  # Drop the 376 NIBRS agencies with a missing county value
  filter(!is.na(county_fips_1)) |>
  # Append those 376 agencies back onto main data with the county info gleaned from LEAIC
  bind_rows(bhf_missing_county)


# Remove obsolete files
#rm(leaic, bhf_missing_county)

```



## 4.4 Create population weights for each agency

This section relies on the `tidycensus` package, which requires a Census API key. You can acquire a key [here](https://api.census.gov/data/key_signup.html) and learn more about installing your key [here](https://walker-data.com/tidycensus/reference/census_api_key.html). Replace `[YOUR-KEY-HERE]` in the code below with your Census API key (leave the quotation marks).
```{r set-api-key}
# set Census API once
# tidycensus::census_api_key("[YOUR-KEY-HERE]", install=TRUE, overwrite = TRUE)

```

### 4.4a Check ACS variable names and identify those we need
Load ACS variables for our first and last years. Manually explore each file and spot check several observations. The naming conventions of ACS variables do not seem to change during our time period. Note that if they did we would need to split up the code that reads in the years below.
```{r check-acs-variables, eval = FALSE}
# Check ACS variables for the first and last years to see if they change over time
variables_fy <- tidycensus::load_variables(2021, "acs5")
variables_ly <- tidycensus::load_variables(2023, "acs5")

test_fy <- variables_fy |> filter(name %in% c("B01003_001", "B01001_005", "B01001_006", "B01001_029", "B01001_030", "B01001A_005", "B01001B_005", "B01001C_005", "B01001D_005", "B01001E_005"))

rm(test_fy)

test_ly <- variables_ly |> filter(name %in% c("B01003_001", "B01001_005", "B01001_006", "B01001_029", "B01001_030", "B01001A_005", "B01001B_005", "B01001C_005", "B01001D_005", "B01001E_005"))

rm(test_ly)

```


### 4.4b Pull 5-year ACS data for each year at the county level

First create vectors for years and variables of interest
```{r specify-acs-years-vars}
# Create a list of all our years
years <- lst(2021, 2022, 2023)

# Create a vector for our ACS variables of interest
my_vars <- c(
  total_people = "B01003_001"
)

```

Then pull 5-year ACS data at the county level for each year
```{r load-acs-data}
# Pull data
acs_pops_full <- map_dfr(
  years,
  ~ tidycensus::get_acs(
    geography = "county",
    variables = my_vars,
    year = .x,
    survey = "acs5",
    output = "wide",
    geometry = FALSE
  ),
  # Create a year variable for each year
  .id = "year"
)

# Remove Puerto Rico from ACS data
acs_pops <- acs_pops_full |>
  mutate(state_fips = substr(GEOID, 1, 2),
         county_fips = substr(GEOID, 3, 5)) |>
  filter(state_fips != "72")

# Remove obsolete files
#rm(variables_fy, variables_ly, years, my_vars)

rm(years, my_vars, acs_pops_full)

```

### 4.4c Clean ACS data
Clean variable names and drop margins of error
```{r clean-acs-data}
acs_pops <- acs_pops |>
  rename_with(~ sub("E$", "", .x), everything()) |>
  select(-c(ends_with("M")))

```


### 4.4d Join BHF onto ACS data

```{r reshape-bhf}
# Reshape NIBRS data to be long by agency AND county
batch_header_file_long <- batch_header_file |>
  pivot_longer(
    cols = starts_with("county_fips_"),
    values_to = "county_fips"
  ) |>
  # Remove observations that are not relevant to more that one county
  drop_na(county_fips) |>
  select(-c(name))

```

Join agency/county pairs onto the ACS county/year-level population and demographics
```{r join-acs-bhf}
# Create GEOID
batch_header_file_long <- batch_header_file_long |>
  mutate(GEOID = str_c(state_fips, county_fips))

# Join data
bhf_acs_joined <- left_join(
  x = acs_pops |> 
    select(year, GEOID, total_people) |>
    mutate(year = as.numeric(year)),
  y = batch_header_file_long,
  by = c("GEOID", "year")
)

```

### 4.4e Calculate weights
For agencies that cover multiple counties, assign weight based on county population (e.g., if Agency A has jurisdiction in both County 1 which has 10,000 people and County 2 which has 5,000 people, the weights will be 0.667 and 0.333, respectively).
```{r create-agency-weights}
# Make agency weights based on population of counties they cover
agency_weights <- bhf_acs_joined |>
  filter(!is.na(total_people)) |>  
  group_by(year, ori) |>
  mutate(
    weight = total_people / sum(total_people),
    weight = if_else(is.na(ori), NA, weight)
  ) |>
  ungroup()

```


### 4.4e Join offense counts onto the weight file and Multiply arrest variables by population weight
Join offenses onto the full universe of county-agencies and multiply counts by the agency-county weight.

We expect a lot of unmatched observations from the `agency_weights` file, because this is derived from the Batch Header Segment. Agencies may be included in the Batch Header Segment if they submitted any information to NIBRS across all segments, but may not have provided information on offenses.

There are 2,510 unmatched observations in the `offenses_agency` file. Theoretically, because an agency included in the Offense Segment is by definition included in the Batch Header Segment, all of these observations should match onto the Batch Header Segment. However, we made some exclusions to the Batch Header Segment (e.g., removing state police agencies and observations from US territories). After the join, we prove that these unmatched agencies are included in the full batch header segment.
```{r join-weights-offenses}
# Join agency-level juvenile arrests onto universe of agencies
offenses_agency_county <- left_join(
  x = agency_weights,
  y = offenses_agency, 
  by = c("ori", "year")
) |>
  mutate(
    # Multiply counts by agency-county weights
    across(all:property, ~.x * weight),
    # Create variables for reporting
    reporting_all = ifelse(is.na(all), 0, 1),
    reporting_violent = ifelse(is.na(violent), 0, 1),
    reporting_property = ifelse(is.na(property), 0, 1)
  )

```

Prove that these unmatched agencies are included in the full batch header segment.
```{r check-missing-offenses}
missing_offenses <- anti_join(
  x = offenses_agency,
  y = agency_weights, 
  by = c("ori", "year")
) |>
  select(year, ori)

batch_header_file_test <- batch_header_file_full |>
  filter(year %in% c(2021, 2022, 2023)) |>
  select(year, ori, agency_indicator, state, fips_county_code_1)

test <- left_join(
  x = missing_offenses,
  y = batch_header_file_test,
  by = c("year", "ori")
)

# 2,404 of the unmatched 2,510 agencies are from state police agencies that we dropped, US territories that we dropped, or that had missing county information
test |>
  filter(
    agency_indicator=="state police" | 
      state %in% c("Guam", "Puerto Rico", "Virgin Islands") | 
      is.na(fips_county_code_1)
  ) |>
  count()
  
```


### 4.4f Finish aggregating from agency-level to county-level
This section aggregates the agency-level offense counts (all, violent, and property) from the agency-level to the county-level. Counts for agencies that serve more than one county are weighted by population.

Note that this section calculates the percent of agencies reporting violent crimes and property crimes separately from all crimes because the 2022 update requires separate quality measures for each rate. However, all agencies either report both types of crime or no crime, so the numbers are identical.
```{r aggregate-offenses-county}
offenses_county <- offenses_agency_county |>
  group_by(year, GEOID, state_fips, county_fips) |>
  summarize(
    total_people = mean(total_people),
    n = n(),
    n_wt = sum(weight),
    n_reporting_all = sum(reporting_all),
    n_reporting_all_wt = sum(reporting_all * weight),
    n_reporting_violent = sum(reporting_violent),
    n_reporting_violent_wt = sum(reporting_violent * weight),
    n_reporting_property = sum(reporting_property),
    n_reporting_property_wt = sum(reporting_property * weight),
    n_core_city = sum(core_city),
    n_core_city_rpt = sum(core_city==1 & reporting_all==1),
    across(all:property, ~sum(.x, na.rm=TRUE))
  ) |>
  mutate(
    agencies_reporting_all = n_reporting_all / n,
    agencies_reporting_all_wt = n_reporting_all_wt / n_wt,
    agencies_reporting_violent = n_reporting_violent / n,
    agencies_reporting_violent_wt = n_reporting_violent_wt / n_wt,
    agencies_reporting_property = n_reporting_property / n,
    agencies_reporting_property_wt = n_reporting_property_wt / n_wt,
    core_reporting = n_core_city_rpt / n_core_city,
  ) |>
  ungroup()
  
```

Check the distribution of crime counts for each year after aggregating to the county-level. 2023 shows a higher number of reported crime than in 2021 or 2022, but this is likely at least in part because more agencies submitted information to NIBRS in 2023 than in previous years.
```{r check-county-distribution-crime}
offenses_county |>
  select(year, all, property, violent) |>
  pivot_longer(
    cols = c(all, property, violent),
    names_to = "crime_type",
    values_to = "crime_count"
  ) |>
  group_by(crime_type, year) |>
  summarize(
    quantiles = list(quantile(crime_count,
                                      probs = c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.99, 1),
                                      na.rm = TRUE))
  ) |>
  unnest_wider(quantiles)

```
More agencies report data to NIBRS in 2023 than in previous years.
```{r check-total-agencies}
offenses_county |>
  group_by(year) |>
  summarize(
    n_agencies = sum(n)
  )

```


Confirm that the number of agencies reporting violent crimes and property crimes are the same for all county-years.
```{r confirm-equal-reporting-rates}
stopifnot(offenses_county$agencies_reporting_violent == offenses_county$agencies_reporting_property)

```




# 5. Calculate county-level rates of reported property crimes per 100,000 people and reported violent crimes per 100,000 people
This section calculates the violent crime rate and property crime rate. Rates are calculated as the number of crimes per 100,000 people using ACS county populations.

Crime Rate = (Crime Count / Population) * 100,000

Calculate rates of reported violent crimes per 100,000 people and reported property crimes per 100,000 people.
```{r calculate-crime-rates}
rates_county <- offenses_county |>
  mutate(
    rate_crime_violent = if_else(
      agencies_reporting_violent !=0, violent / total_people * 100000, NA
    ),
    rate_crime_property = if_else(
      agencies_reporting_property !=0, property / total_people * 100000, NA
    )
  )

```

Check numbers of zeros and missings for both crime types in each year. More counties had rates of missing in 2021 than 2023 for both crime types. This makes sense, because more agencies reported data to NIBRS over time.
```{r check-missing-zero-rates-violent}
rates_county |>
  filter(rate_crime_violent==0 | is.na(rate_crime_violent)) |>
  group_by(year) |>
  count(rate_crime_violent)

```



```{r check-missing-zero-rates-property}
rates_county |>
  filter(rate_crime_property==0 | is.na(rate_crime_property)) |>
  group_by(year) |>
  count(rate_crime_property)

```

Suppress rates for counties that have population less than 30 people.
  Note that no counties have a population of less than 30, but some counties have small populations with high crime rates (e.g., 21,000 crimes per 100,000 people with only 83 people in the county). Future updates should consider changing the population threshold for suppression, but we address the outlier described in this example next.
```{r suppress-pop-lt30}
rates_county <- rates_county |>
  mutate(
    rate_crime_violent = ifelse(total_people < 30, NA, rate_crime_violent),
    rate_crime_property = ifelse(total_people < 30, NA, rate_crime_property)
  )

```

Loving County, TX (48301) and Kenedy County, TX (48261) have a population less than 100 in all years with really high crime rates. We change the rates for these counties to missing in all years for Loving County and in 2023 for Kenedy County.
```{r check-large-property-rates-poplt100}
rates_county |>
  filter(total_people < 100) |>
  count(year, GEOID, total_people, rate_crime_property)

```

```{r check-large-violent-rates-poplt100}
rates_county |>
  filter(total_people < 100) |>
  count(year, GEOID, total_people, rate_crime_violent)

```

```{r suppress-large-rates-poplt100}
rates_county <- rates_county |>
  mutate(
    rate_crime_violent = if_else(
      GEOID == "48301" | GEOID == "48261" & year==2023, NA, rate_crime_violent
    ),
    rate_crime_property = if_else(
      GEOID == "48301" | GEOID == "48261" & year==2023, NA, rate_crime_property
    )
  )

```





# 6. Construct quality indicators
This section constructs an indicator used to assess the quality of data for each county.

A core city refers to a major urban area that is typically the primary focus of law enforcement agencies. The Batch Header File has a flag to identify whether agencies are in a core city.

Counties with 100% of agencies reporting are coded as 1; counties with 80% or more of agencies reporting OR 100% of core agencies reporting are coded as 2; counties with less than 80% of agencies reporting are coded as 3; counties with 0% of agencies reporting (or no agencies in the county) are coded as `NA`.

The quality indicator is constructed separately for agencies reporting violent crimes and agencies reporting property crimes, though the values are identical.

Construct the quality indicator.
```{r construct-quality}
rates_county <- rates_county |>
  mutate(
    rate_crime_violent_quality = case_when(
      agencies_reporting_violent == 1 ~ 1,
      agencies_reporting_violent >= 0.8 | core_reporting==1 ~ 2,
      agencies_reporting_violent > 0 ~ 3,
      agencies_reporting_violent == 0 ~ NA_real_),
    rate_crime_property_quality = case_when(
      agencies_reporting_property == 1 ~ 1,
      agencies_reporting_property >= 0.8 | core_reporting==1 ~ 2,
      agencies_reporting_property > 0 ~ 3,
      agencies_reporting_property == 0 ~ NA_real_),
  )

```

We change the quality indicators for Loving County, TX in all years and Kenedy County, TX in 2023 to missing as well due to data quality concerns from the large rates.
```{r replace-quality}
rates_county <- rates_county |>
  mutate(
    rate_crime_violent_quality = if_else(
      GEOID == "48301" | GEOID == "48261" & year==2023, NA, rate_crime_violent_quality
    ),
    rate_crime_property_quality = if_else(
      GEOID == "48301" | GEOID == "48261" & year==2023, NA, rate_crime_property_quality
    )
  )

```

The number of missing values in the quality variables is the same as for the rate variables.
```{r check-missing-quality}
rates_county |>
  filter(is.na(rate_crime_violent_quality) | is.na(rate_crime_property_quality)) |>
  group_by(year) |>
  count(rate_crime_violent_quality, rate_crime_property_quality)

```


The plurality of counties had less than 80 percent of agencies reporting. The reporting rates are the same for both property and violent crimes.
```{r}
rates_county |>
  group_by(year) |>
  ggplot(aes(x = rate_crime_property_quality)) +
  geom_bar()

```

```{r}
rates_county |>
  group_by(year) |>
  ggplot(aes(x = rate_crime_violent_quality)) +
  geom_bar()

```




# 7. Validation
This section performs several checks on the calculated rates of violent and property crimes.

Check the distribution of rates of property crimes for all years.
```{r}
rates_county %>%
  group_by(year) %>%
  summarise(
    quantiles = list(
      quantile(rate_crime_property, probs = c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.99, 1), na.rm = TRUE)
    )
  ) %>%
  unnest_wider(quantiles)
```

Check the distribution of rates of violent crimes for all years.
```{r}
rates_county %>%
  group_by(year) %>%
  summarise(
    quantiles = list(
      quantile(rate_crime_violent, probs = c(0, 0.2, 0.4, 0.6, 0.8, 0.9, 0.99, 1), na.rm = TRUE)
    )
  ) %>%
  unnest_wider(quantiles)
```

There are two large outliers in Buffalo County, SD, and Todd County, SD. Their population sizes are decent so we do not change them to missing, but they have quality indicators of `3` to indicate poor quality.
```{r}
rates_county |>
  filter(rate_crime_violent > 10000)

```


Rates of reported violent crime and reported property crime are roughly correlated, though there are some outliers.
```{r}
rates_county |>
  ggplot(aes(rate_crime_property, rate_crime_violent)) +
  geom_point(alpha = 0.2) +
  labs(title = "Rates of reported violent crime and reported property crime are roughly correlated",
       subtitle = "") +
  scatter_grid()

```

There are no major discrepancies in the rates of violent crime across years.
```{r}
rates_county |>
  filter(!is.na(rate_crime_violent)) |>
  ggplot(aes(rate_crime_violent)) +
  geom_histogram(binwidth = 20) +
  facet_wrap(~ year, scales = "free_x") +
  labs(title = "")

```

There are no major discrepancies in the rates of property crime across years.
```{r}
rates_county |>
  filter(!is.na(rate_crime_property)) |>
  ggplot(aes(rate_crime_property)) +
  geom_histogram(binwidth = 20) +
  facet_wrap(~ year, scales = "free_x") +
  labs(title = "")

```

Check where violent crime rates are concentrated
```{r}
rates_county |>
  filter(
    !is.na(total_people),
    !is.na(rate_crime_violent)
  ) |>
  mutate(size = if_else(total_people < 200000, "1. small population", "2. big population")) |>
  # Standardize population by denominating in 1000s so the axis labels are more legible
  mutate(total_people = total_people/1000) |>
  ggplot(aes(total_people, rate_crime_violent)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size + year, scales = "free_x") +
  labs(title = "The Highest Violent Crime Rates are Concentrated in Smaller Counties",
       x = "Population (thousands)",
       y = "Violent crime rate") +
  scatter_grid()
  
```

```{r}
rates_county |>
  filter(!is.na(rate_crime_violent),
         !is.na(violent)) |>
  ggplot(aes(violent, rate_crime_violent)) +
  geom_point(alpha = 0.2) +
  labs(title = "High Violent Crime Rates are Concentrated in Counties with Few Violent Crimes",
       x = "Number of Violent Crimes",
       y = "Violent Crime Rate") +  
  scatter_grid()

```


Check where property crime rates are concentrated
```{r}
rates_county |>
  filter(!is.na(total_people),
         !is.na(rate_crime_property)) |>
  mutate(size = if_else(total_people < 200000, "1. small population", "2. big population")) |>
  # Standardize population by denominating in 1000s so the axis labels are more legible
  mutate(total_people = total_people / 1000) |>
  ggplot(aes(total_people, rate_crime_property)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size + year, scales = "free_x") +
  labs(title = "No Real Relationship Between Property Crime Rates and County Population",
       x = "Population (thousands)",
       y = "Property crime rate") +
  scatter_grid()

```

```{r}
rates_county |>
  filter(!is.na(rate_crime_property),
         !is.na(property)) |>
  ggplot(aes(property, rate_crime_property)) +
  geom_point(alpha = 0.2) +
  labs(title = "High Property Crime Rates are Concentrated in Counties with Few Property Crimes",
       x = "Number of Property Crimes",
       y = "Property Crime Rate") +  
  scatter_grid()

```



The quality indicators have similar distributions of property crime rates, with poor quality observations corresponding to more counties with small rates 
```{r}
rates_county |>
  filter(!is.na(rate_crime_property)) |>
  ggplot(aes(rate_crime_property)) +
  geom_histogram(binwidth = 20) +
  facet_wrap(~ rate_crime_property_quality, scales = "free_x") +
  labs(title = "")

```


The quality indicators have similar distributions of violent crime rates, with poor quality observations corresponding to more counties with small rates 
```{r}
rates_county |>
  filter(!is.na(rate_crime_violent)) |>
  ggplot(aes(rate_crime_violent)) +
  geom_histogram(binwidth = 20) +
  facet_wrap(~ rate_crime_violent_quality, scales = "free_x") +
  labs(title = "")

```
```{r}
rates_county |>
  group_by(year) |>
  count()

```


#8. Save and write out data
This section saves and write out the final data file. This file is long by county and year (2021-2023). It contains our county-level estimates of reported violent crimes per 100,000 people and reported property crimes per 100,000 people for each year.

Construct the final file.
```{r prepare-final}
rates_crime_county_all <- rates_county |>
  mutate(
    rate_crime_property = ifelse(is.na(rate_crime_property_quality), NA, rate_crime_property),
    rate_crime_violent = ifelse(is.na(rate_crime_violent_quality), NA, rate_crime_violent),
    state = ifelse(is.na(state_fips), str_sub(GEOID, 1, 2), state_fips),
    county = ifelse(is.na(county_fips), str_sub(GEOID, 3, 5), county_fips)
  ) |>
  select(
    year,
    state,
    county,
    starts_with("rate")
  ) |>
  arrange(year, state, county)
  
```

```{r}
evaluate_final_data(
  exp_form_path = "07_safety/final/evaluation_form_rate_crime_overall_county.csv",
  data = rates_crime_county_all,
  geography = "county",
  subgroups = FALSE, 
  confidence_intervals = FALSE
  )
```

Write out the final file in `.csv` format.
```{r write-final}
write_csv(
  rates_crime_county_all,
  file = here::here("07_safety", "final", "rates_crime_county_all.csv")
)

```


