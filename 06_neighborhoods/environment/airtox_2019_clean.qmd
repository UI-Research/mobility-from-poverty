---
title: "Air quality program"
author: "JP Walsh"
format: html
editor: visual
---

```{r}
# install.packages("devtools")
library(tidyverse)
library(tidycensus)
library(tm)
library(skimr)
library(rvest)
library(httr)
library(readxl)
library(tidylog)

```


# Program Overview 

Original data: 

  [2019 Data](https://www.epa.gov/AirToxScreen/2019-airtoxscreen-assessment-results#nationwide)
  [2018 Data](https://www.epa.gov/AirToxScreen/2018-airtoxscreen-assessment-results#nationwide)
  [2014 Data](https://www.epa.gov/national-air-toxics-assessment/2014-nata-assessment-results)
  
Downloaded data is available in the Air Quality folder inside the Metrics_2024_round [box folder](https://urbanorg.box.com/s/n82wl2bv8n2nmrdcgwa07q1dyn5bldvc).

Description: 

This code updates the program titled AirTox_2018_clean.R which was written by Rebecca Marx and was last updated April 4, 2023.
The program recreates Rebecca's steps and adds environmental hazards data for 2019. Note that the census tracts included by the EPA in the 2018 and 2019 data are exactly the same. 
Steps:
(1) Add & create tract level indicators of environmental hazards for 2019
(2) create tract level indicators of environmental hazards for 2018 
(3) create tract level indicators of environmental hazards for 2014
(4) compare to affh data previously used for the environmental indicator

Create county files 
(5) population weight tract-level environmental indicators using poverty and race-identity subgroups for 2018
(6) create county level environmental index by race-identity and poverty-level for 2018
(7) population weight tract-level environmental indicators using poverty and race-identity subgroups for 2018
(8) create county level environmental index by race-identity and poverty-level for 2018
(9) population weight tract-level environmental indicators using poverty and race-identity subgroups for 2014
(10) create county level environmental index by race-identity and poverty-level for 2014
(11) bind 2019, 2018 and 2014 county files for final files 

Create place files 
(12) prep city crosswalk data from geocorr
(13) create place-level environmental indicators using poverty and race-identity subgroups for 2019 and percent of tract in place
(14) create place-level environmental indicators using poverty and race-identity subgroups for 2018 and percent of tract in place
(15) create place-level environmental indicators using poverty and race-identity subgroups for 2014 and percent of tract in place
(16) bind 2018 and 2014 place files for final files
(17) all files should be saved to mobility-from-poverty/06_neighborhoods/environment/data/output


# Create Air Quality Index for available years 

The Air Toxin screen assessment is available for years 2014, 2018 and 2019. The code segments below read in these data and create a indexed measure of air quality using normalization at the tract level. 

## Create tract-level indicators for 2019

Import 2019 AirToxScreen Data on cancer, neuroligical and respitory health.

```{r}

cancer_data19 <- read_excel(here::here("06_neighborhoods/environment/data/raw/", "2019_National_CancerRisk_by_tract_srcgrp.xlsx"))
neuro_data19 <- read_excel(here::here("06_neighborhoods/environment/data/raw/", "2019_National_NeurHI_by_tract_srcgrp.xlsx"))
resp_data19 <- read_excel(here::here("06_neighborhoods/environment/data/raw/","2019_National_RespHI_by_tract_srcgrp.xlsx"))


```

Select only the tract ID and tract level risk indicator from reach dataset.  

```{r}

cancer_data19 <- cancer_data19 %>% 
  select(Tract, `Total Cancer Risk (per million)`) 

neuro_data19 <- neuro_data19 %>% 
  select(Tract, `Total Neurological (hazard quotient)`) 

resp_data19 <- resp_data19 %>% 
  select(Tract, `Total Respiratory (hazard quotient)`)   

```

Join the datasets by census tract. Rename the variables so they are easily refered to throughout the program.

```{r}

enviro19_int <- left_join(resp_data19, cancer_data19, by = "Tract") %>%
  left_join(neuro_data19, by = "Tract") %>% 
  select(tract = Tract, resp = `Total Respiratory (hazard quotient)`, carc = `Total Cancer Risk (per million)`,
         neuro = `Total Neurological (hazard quotient)`)

```

The Tract variable contains some results that are not tracts. These rows can be identified because the last 6 digits are "0". 
Create a variable "tract1" that is just the last six digits of tract. Filter out results where tract1 is equal to "000000".

```{r}

enviro19_int <- enviro19_int %>% 
  mutate(tract1 = str_sub(tract, start = 6, end = 11))

enviro19 <- filter(enviro19_int, tract1 != "000000") %>%
  select(tract, resp, carc, neuro) 
```

Create variables with the mean and standard deviation of each health metric. 


```{r}

enviro19 <- enviro19 %>% 
  mutate(resp_mean = mean(resp, na.rm = TRUE),
         carc_mean = mean(carc, na.rm = TRUE),
         neuro_mean = mean(neuro, na.rm = TRUE),
         resp_stdv = sd(resp, na.rm = TRUE),
         carc_stdv = sd(carc, na.rm = TRUE),
         neuro_stdv = sd(neuro, na.rm = TRUE))

```

Create the Environemtnal Health Indicator using the statistics calculated above.
First calcualte the components, which is the individual health indicator for a tract minus the man of that indicator, divided by the standard deviation. 

```{r}

enviro19 <- enviro19 %>%
  mutate(resp_norm = (resp - resp_mean)/resp_stdv,
         carc_norm = (carc - carc_mean)/carc_stdv,
         neuro_norm = (neuro - neuro_mean)/neuro_stdv)

```

Add together the normalized results and multiple by negative 1.
```{r}

enviro19 <- enviro19 %>%
  mutate(envhealth19 = (resp_norm + carc_norm + neuro_norm)*-1)
```

Percent rank the calculated values.
```{r}

enviro19 <- enviro19 %>%
  mutate(index_air_quality = round(percent_rank(envhealth19) * 100, 0))
```

Keep only the tract and hazard index variable.

```{r}

haz_idx19 <- enviro19 %>% 
  select(tract, index_air_quality)

```


Visualize the distribution to see how it looks.

```{r}

haz_idx19 %>% 
ggplot(aes(x = index_air_quality)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("Tracts by air quality index, distriubtion") +
  ylab("Density")

```

## Create tract-level indicators for 2018

Import 2018 AirToxScreen Data on cancer, neurological and respiratory health.

```{r}

cancer_data18 <- read_excel(here::here("06_neighborhoods/environment/data/raw/", "2018_National_CancerRisk_by_tract_srcgrp.xlsx"))
neuro_data18 <- read_excel(here::here("06_neighborhoods/environment/data/raw/", "2018_National_NeurHI_by_tract_srcgrp.xlsx"))
resp_data18 <- read_excel(here::here("06_neighborhoods/environment/data/raw/","2018_National_RespHI_by_tract_srcgrp.xlsx"))


```

Select only the tract ID and tract level risk indicator from reach dataset.  

```{r}

cancer_data18 <- cancer_data18 %>% 
  select(Tract, `Total Cancer Risk (per million)`) 

neuro_data18 <- neuro_data18 %>% 
  select(Tract, `Total Neurological (hazard quotient)`) 

resp_data18 <- resp_data18 %>% 
  select(Tract, `Total Respiratory (hazard quotient)`)   

```

Join the datasets by census tract. Rename the variables so they are easily referred to throughout the program.

```{r}

enviro18_int <- left_join(resp_data18, cancer_data18, by = "Tract") %>%
  left_join(neuro_data18, by = "Tract") %>% 
  select(tract = Tract, resp = `Total Respiratory (hazard quotient)`, carc = `Total Cancer Risk (per million)`,
         neuro = `Total Neurological (hazard quotient)`)

```

The Tract variable contains some results that are not tracts. These rows can be identified because the last 6 digits are "0". 
Create a variable "tract1" that is just the last six digits of tract. Filter out results where tract1 is equal to "000000".

```{r}

enviro18_int <- enviro18_int %>% 
  mutate(tract1 = str_sub(tract, start = 6, end = 11))

enviro18 <- filter(enviro18_int, tract1 != "000000") %>%
  select(tract, resp, carc, neuro) 
```

Create variables with the mean and standard deviation of each health metric. 


```{r}

enviro18 <- enviro18 %>% 
  mutate(resp_mean = mean(resp, na.rm = TRUE),
         carc_mean = mean(carc, na.rm = TRUE),
         neuro_mean = mean(neuro, na.rm = TRUE),
         resp_stdv = sd(resp, na.rm = TRUE),
         carc_stdv = sd(carc, na.rm = TRUE),
         neuro_stdv = sd(neuro, na.rm = TRUE))

```

Create the Environemtnal Health Indicator using the statistics calculated above.
First calcualte the components, which is the individual health indicator for a tract minus the man of that indicator, divided by the standard deviation. 

```{r}

enviro18 <- enviro18 %>%
  mutate(resp_norm = (resp - resp_mean)/resp_stdv,
         carc_norm = (carc - carc_mean)/carc_stdv,
         neuro_norm = (neuro - neuro_mean)/neuro_stdv)

```

Add together the normalized results and multiple by negative 1.
```{r}

enviro18 <- enviro18 %>%
  mutate(envhealth18 = (resp_norm + carc_norm + neuro_norm)*-1)
```

Percent rank the calculated values.
```{r}

enviro18 <- enviro18 %>%
  mutate(index_air_quality = round(percent_rank(envhealth18) * 100, 0))
```

Keep only the tract and hazard index variable.

```{r}

haz_idx18 <- enviro18 %>% 
  select(tract, index_air_quality)

```

Visaulize the distriubtion to see how it looks.

```{r}

haz_idx18 %>% 
ggplot(aes(x = index_air_quality)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("Tracts by air quality index, distriubtion") +
  ylab("Density")

```


## Create tract-level indicators for 2014

Import 2019 AirToxScreen Data on cancer, neuroligical and respitory health.

```{r}

cancer_data19 <- read_excel(here::here("06_neighborhoods/environment/data/raw/", "2019_National_CancerRisk_by_tract_srcgrp.xlsx"))
neuro_data19 <- read_excel(here::here("06_neighborhoods/environment/data/raw/", "2019_National_NeurHI_by_tract_srcgrp.xlsx"))
resp_data19 <- read_excel(here::here("06_neighborhoods/environment/data/raw/","2019_National_RespHI_by_tract_srcgrp.xlsx"))


```

Select only the tract ID and tract level risk indicator from reach dataset.  

```{r}

cancer_data19 <- cancer_data19 %>% 
  select(Tract, `Total Cancer Risk (per million)`) 

neuro_data19 <- neuro_data19 %>% 
  select(Tract, `Total Neurological (hazard quotient)`) 

resp_data19 <- resp_data19 %>% 
  select(Tract, `Total Respiratory (hazard quotient)`)   

```

Join the datasets by census tract. Rename the variables so they are easily refered to throughout the program.

```{r}

enviro19_int <- left_join(resp_data19, cancer_data19, by = "Tract") %>%
  left_join(neuro_data19, by = "Tract") %>% 
  select(tract = Tract, resp = `Total Respiratory (hazard quotient)`, carc = `Total Cancer Risk (per million)`,
         neuro = `Total Neurological (hazard quotient)`)

```

The Tract variable contains some results that are not tracts. These rows can be identified because the last 6 digits are "0". 
Create a variable "tract1" that is just the last six digits of tract. Filter out results where tract1 is equal to "000000".

```{r}

enviro19_int <- enviro19_int %>% 
  mutate(tract1 = str_sub(tract, start = 6, end = 11))

enviro19 <- filter(enviro19_int, tract1 != "000000") %>%
  select(tract, resp, carc, neuro) 
```

Create variables with the mean and standard deviation of each health metric. 


```{r}

enviro19 <- enviro19 %>% 
  mutate(resp_mean = mean(resp, na.rm = TRUE),
         carc_mean = mean(carc, na.rm = TRUE),
         neuro_mean = mean(neuro, na.rm = TRUE),
         resp_stdv = sd(resp, na.rm = TRUE),
         carc_stdv = sd(carc, na.rm = TRUE),
         neuro_stdv = sd(neuro, na.rm = TRUE))

```

Create the Environemtnal Health Indicator using the statistics calculated above.
First calcualte the components, which is the individual health indicator for a tract minus the man of that indicator, divided by the standard deviation. 

```{r}

enviro19 <- enviro19 %>%
  mutate(resp_norm = (resp - resp_mean)/resp_stdv,
         carc_norm = (carc - carc_mean)/carc_stdv,
         neuro_norm = (neuro - neuro_mean)/neuro_stdv)


         envhealth19 = (resp_norm + carc_norm + neuro_norm)*-1)
```

Add together the normalized results and multiple by negative 1.
```{r}

enviro19 <- enviro19 %>%
  mutate(envhealth19 = (resp_norm + carc_norm + neuro_norm)*-1)
```

Percent rank the calculated values.
```{r}

enviro19 <- enviro19 %>%
  mutate(index_air_quality = round(percent_rank(envhealth19) * 100, 0))
```

Keep only the tract and hazard index variable.

```{r}

haz_idx19 <- enviro19 %>% 
  select(tract, index_air_quality)

```



# County

## Crosswalk

Crosswalk the individual years of data onto their respective county crosswalk files taken from the geographic-crosswalks folder to confirm that all counties in the main UMF data set are present in the final data. Note that the EPA did not change which counties are included between 2018 and 2019. 

Read in county crosswalk and create tract level variable that combines state, county and tract IDs.

```{r}

crosswalk_cnty <- read_csv(here::here("geographic-crosswalks/data", "tract-county-crosswalk_2018.csv")) %>% 
  mutate(tract = paste0(state, county, tract)) %>% 
  select(year, tract)

```

### Crosswalk 2019

The EPA AirToxScreen data uses some census tracts from 2010 that have been changed since then. In order to link to counties we have to adjust these tracts manually first.

```{r}

haz_idx19 <- haz_idx19 %>% 
  mutate(tract = case_when(                                  
      tract ==  "36053940101" ~ "36053030101",
      tract ==  "36053940102" ~ "36053030102",
      tract ==  "36053940103" ~ "36053030103", 
      tract ==  "36053940200" ~ "36053030200",
      tract ==  "36053940300" ~ "36053030300",
      tract ==  "36053940401" ~ "36053030401",
      tract ==  "36053940700" ~ "36053030402",
      tract ==  "36053940403" ~ "36053030403",
      tract ==  "36053940600" ~ "36053030600",
      tract ==  "36065940100" ~ "36065024700",
      tract ==  "36065940000" ~ "36065024800",
      tract ==  "36065940200" ~ "36065024900",
      tract ==  "04019002701" ~ "04019002704",
      tract ==  "04019002903" ~ "04019002906",
      tract ==  "04019410501" ~ "04019004118", 
      tract ==  "04019410502" ~ "04019004121",
      tract ==  "04019410503" ~ "04019004125", 
      tract ==  "04019470400" ~ "04019005200", 
      tract ==  "04019470500" ~ "04019005300", 
      tract ==  "06037930401" ~ "06037137000",
      tract ==  "51515050100" ~ "51019050100",
      tract ==  "02270000100" ~ "02158000100",
      tract ==  "46113940500" ~ "46102940500",
      tract ==  "46113940800" ~ "46102940800",
      tract ==  "46113940900" ~ "46102940900", 
      TRUE ~ tract
    ))


```

Remove results form Puerto Rico and Virgin Islands.

```{r}

haz_idx19 <- haz_idx19 %>%
    mutate(state = str_sub(tract, 1, 2)) %>%
  filter(state != 72 & state != 78) %>%
  select(tract, index_air_quality)

```

Merge the 2019 index data onto the country crosswalk file. Note that there are 531 tracts that do not have air quality data.

```{r}

haz_idx19_cw <- crosswalk_cnty %>% 
  left_join(haz_idx19, by = "tract")

```


Looking at the missing tracts in the crosswalk file, the states with the most missing are very large. 

```{r}
anti_join(crosswalk_cnty, haz_idx19, by = "tract") %>% 
  mutate(state = str_sub(tract, start = 1, end = 2)) %>% 
  group_by(state) %>%
  count() %>% 
  arrange(desc(n))

```

Create state and county indicator for 2019 data

```{r}

#split tract into state and county 
enviro_haz19 <- haz_idx19_cw %>%
  mutate(GEOID = str_sub(tract, start = 1, end = 11),
         state = str_sub(tract, start = 1, end = 2),
         county = str_sub(tract, start = 3, end = 5),
         tract = str_sub(tract, start = 6, end = 11)
         )


```

### Crosswalk 2018

The EPA AirToxScreen data uses some census tracts from 2010 that have been changed since then.In order to link to counties we have to adjust these tracts manually first.

```{r}

haz_idx18 <- haz_idx18 %>% 
  mutate(tract = case_when(                                  
      tract ==  "36053940101" ~ "36053030101",
      tract ==  "36053940102" ~ "36053030102",
      tract ==  "36053940103" ~ "36053030103", 
      tract ==  "36053940200" ~ "36053030200",
      tract ==  "36053940300" ~ "36053030300",
      tract ==  "36053940401" ~ "36053030401",
      tract ==  "36053940700" ~ "36053030402",
      tract ==  "36053940403" ~ "36053030403",
      tract ==  "36053940600" ~ "36053030600",
      tract ==  "36065940100" ~ "36065024700",
      tract ==  "36065940000" ~ "36065024800",
      tract ==  "36065940200" ~ "36065024900",
      tract ==  "04019002701" ~ "04019002704",
      tract ==  "04019002903" ~ "04019002906",
      tract ==  "04019410501" ~ "04019004118", 
      tract ==  "04019410502" ~ "04019004121",
      tract ==  "04019410503" ~ "04019004125", 
      tract ==  "04019470400" ~ "04019005200", 
      tract ==  "04019470500" ~ "04019005300", 
      tract ==  "06037930401" ~ "06037137000",
      tract ==  "51515050100" ~ "51019050100",
      tract ==  "02270000100" ~ "02158000100",
      tract ==  "46113940500" ~ "46102940500",
      tract ==  "46113940800" ~ "46102940800",
      tract ==  "46113940900" ~ "46102940900", 
      TRUE ~ tract
    ))


```

Remove Puerto Rico and Virgin Islands.

```{r}

haz_idx18 <- haz_idx18 %>%
    mutate(state = str_sub(tract, 1, 2)) %>%
  filter(state != 72 & state != 78) %>%
  select(tract, index_air_quality)

```

The EPA AirToxScreen data uses some census tracts from 2010 that have been changed since then.In order to link to counties we have to adjust these tracts manually first.

```{r}

haz_idx19_cw <- crosswalk_cnty %>% 
  left_join(haz_idx19, by = "tract")

nomerge_hazidx19_1 <- anti_join(crosswalk_cnty, haz_idx19, by = "tract") 

```

Create state and county indicator for 2019 data

```{r}


#split tract into state and county 
enviro_haz19 <- haz_idx19_cw %>%
  mutate(GEOID = str_sub(tract, start = 1, end = 11),
         state = str_sub(tract, start = 1, end = 2),
         county = str_sub(tract, start = 3, end = 5),
         tract = str_sub(tract, start = 6, end = 11)
         )


```







## Read in Subgroup Information

### 2019 Subgroup
First we will read in tract level population data. Total population and total white, non-Hispanic. Then total population in poverty. 

```{r}

state_abrv <- state.abb

pull_acs <- function(state_fips) {
  
  tidycensus::get_acs(geography = "tract", 
                      variables = c("total_pop" = "B02001_001",
                                    "wnh" = "B03002_003", 
                                    "total_pov" = "B17001_001", 
                                    "poverty" = "B17001_002"),
                      year = 2019,
                      state = state_fips,
                      geometry = FALSE,
                      output = "wide"
  )
}

acs19 <- map_df(state_abrv, pull_acs)

```

Use ACS data to create a variable for percent POC and percent in poverty, by 2019 tract.

```{r}

race_pov19 <- acs19 %>%
  transmute(GEOID = GEOID,
            name = NAME,
            total_pop = total_popE,
            wnh = wnhE,
            poc = total_pop - wnh, 
            percent_poc = poc/total_pop, 
            total_pov = total_povE, 
            poverty = povertyE, 
            percent_pov = poverty / total_pov
  )  


```

Create indicator variable for race based on percentage of poc/nh-White in each tract. These percentage cut offs were determined by Marge Turner.
Also create indicator for tracts in 'High Poverty', with 40% or higher poverty rate meaning the tract has a high level of poverty

```{r}

race_pov19 <- race_pov19 %>%
  mutate(
    race_ind = case_when(
      percent_poc > .4 & percent_poc < .6 ~"No Majority Race/Ethnicity",
      percent_poc >= .6 ~ "Majority Non-White",
      percent_poc <= .6 ~ "Majority White, Non-Hispanic"), 
    poverty_type = case_when(
      percent_pov < .4 ~ "Not High Poverty",
      percent_pov >=  .4 ~ "High Poverty")
  )

```
Join onto the environmental hazard index data.

```{r}

race_pov_enviro19 <- enviro_haz19 %>% 
  left_join(race_pov19, by="GEOID") %>% 
  mutate(na_pop= if_else(is.na(index_air_quality), total_pop, 0))

```

## Create county level index

### 2019 County Index

Calculate 2019 average of county level hazard index.

```{r}

all_environment19 <- race_pov_enviro19 %>%
  group_by(state, county) %>%
  summarise(index_air_quality = weighted.mean(index_air_quality, total_pop, na.rm = TRUE), 
            na_pop = sum(na_pop),
            county_pop = sum (total_pop)) %>%
  ungroup()

```

Calculate percent population of each county that has missing tract hazard information.


```{r}

all_environment19 <- all_environment19 %>%
  mutate(na_perc = na_pop / county_pop,
         subgroup = "All",
         subgroup_type = "all") %>%
  select(-c(na_pop, county_pop)) %>%
  #add in geoid so on bind_rows, all rows have geoid
  mutate(geoid = paste0(state, county))



```
Calculate county/poverty type index
Create a weighting indicator so weights can be applied to the appropriate subgroup 

```{r}

pov_environment19 <- race_pov_enviro19 %>% 
  mutate(weighting_ind = case_when(poverty_type == "High Poverty" ~ poverty,
                                   poverty_type == "Not High Poverty" ~ (total_pov - poverty)),
         na_pop = if_else(is.na(index_air_quality) | is.na(poverty_type), weighting_ind, 0)) %>%
  group_by(year, state, county, poverty_type) %>%
  summarise(index_air_quality = weighted.mean(index_air_quality, weighting_ind, na.rm = TRUE),
            na_pop = sum(na_pop, na.rm = TRUE),
            subgroup_pop = sum(weighting_ind, na.rm=TRUE)
  ) %>%
  ungroup()%>%
  mutate(geoid = str_c(state,county),
         na_perc = na_pop / subgroup_pop) %>%
  select(-c(na_pop, subgroup_pop)) %>%
  #Because we have missing data, we get nas which percolate into the poverty_type column
  #This removes them:
  filter(!is.na(poverty_type))


```

Expand data set for every county/poverty_type 

```{r}

expand_pov19 <- pov_environment19 %>%
  expand(geoid, poverty_type)

```



Make dataset of unique state/county pairs to join to 

```{r}

state_county19 <- race_pov_enviro19 %>%
  transmute(geoid = str_c(state, county), state, county) %>%
  distinct()

```

Join dataset on expanded dataset, join with geo varibale, and add subgroup type variables


```{r}

pov_environment_exp19 <- left_join(expand_pov19, 
                                   pov_environment19 %>%
                                     select(geoid, poverty_type, index_air_quality, na_perc),
                                   by=c("geoid",
                                        "poverty_type")) %>%
  left_join(state_county19, by = "geoid") %>%
  rename(subgroup = poverty_type) %>%
  mutate(subgroup_type = "poverty") %>%
  filter(!is.na(subgroup)) 

```

  

Average county level hazard by race/ethnicity
Create a weighting indicator so weights can be applied to the appropriate subgroup 
Weight the index by total population for tracts that have mixed race and ethnicity
Weight by number of people of color for tracts that are majority non-white
Weight by number of white, non-hispanic people for tracts that are majority white, non-hispanic
Calculate missingness 


```{r}


haz_by_race19 <- race_pov_enviro19 %>%
  mutate(weighting_ind = case_when(
    race_ind == "No Majority Race/Ethnicity" ~ total_pop,
    race_ind == "Majority Non-White" ~ poc,
    race_ind == "Majority White, Non-Hispanic" ~ wnh
  ),
  na_pop = if_else(is.na(index_air_quality) | is.na(race_ind), weighting_ind, 0)) %>%
  group_by(state, county, race_ind) %>%
  summarise(index_air_quality = weighted.mean(index_air_quality, weighting_ind, na.rm = TRUE),
            na_pop = sum(na_pop, na.rm = TRUE),
            subgroup_pop = sum(weighting_ind, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(geoid = str_c(state, county),
         na_perc = na_pop / subgroup_pop) %>%
  select(-c(na_pop, subgroup_pop)) %>%
  filter(!is.na(race_ind))  


```
expand dataset for every county/race/ethnicity 


```{r}
expand_race19 <- haz_by_race19 %>%
  expand(geoid, race_ind)
```


Join to expanded, add geo variables, and add subgroup variables 


```{r}
haz_by_race_exp19 <- left_join(expand_race19, 
                               haz_by_race19 %>%
                                 select(geoid, race_ind, index_air_quality, na_perc),
                               by=c("geoid", "race_ind")) %>%
  left_join(state_county19, by = "geoid") %>%
  rename(subgroup = race_ind) %>%
  mutate(subgroup_type = "race-ethnicity")
```

Append data. Final data should be 18,852 (3,142 counties*6 sub-groups)

```{r}

bind_data_cnty19 <- all_environment19 %>% 
  bind_rows(pov_environment_exp19) %>%
  bind_rows(haz_by_race_exp19)


```


Match file to data standards


```{r}
final_data_cnty_sub19 <- bind_data_cnty19 %>%
  mutate(year = 2019) %>%
  #create quality variable where quality is 2 if value is missing by more than 5 percent
  mutate(environmental_quality = if_else(na_perc >= .05,2,1)) %>%
  #select(-na_perc) %>%
  arrange(year,
          state,
          county,
          subgroup_type,
          subgroup) %>%
  select(year, state, county, subgroup_type, subgroup, index_air_quality, environmental_quality) 
```

Round environmental indicator to nearest integer

```{r}
final_data_cnty_sub19 <- final_data_cnty_sub19 %>% 
  mutate(index_air_quality = round(index_air_quality, digits = 0))
```


Create all version of data. 

```{r}
data_cnty19_final <- final_data_cnty_sub19 %>%
  filter(subgroup == "All")
```





#Place

Cross walk and create air-quality-index at the place level.

## Crosswalk

Crosswalk tract-level data to places. 

Read in crosswalk data and create GEOID that is comprised of state, county and tract. 
```{r}

crosswalk_city <- read_csv(here::here("geographic-crosswalks/data", "geocorr2018_tract_to_place.csv")) %>% 
  mutate(county = str_sub(county, start = -3L, end = -1L),
         state = str_pad(state, 2, side = "left", pad = "0"),
         tract = tract * 100,
         tract = str_pad(tract, 6, side = "left", pad = "0"),
         GEOID = paste0(state, county, tract)) %>% 
  select(place = placefp, GEOID, afact)

```


Pad the place variable with a leading zero. 
```{r}

crosswalk_city <- crosswalk_city %>% 
  mutate(place = str_pad(place, 5, side = "left", pad = "0")) %>% 
  select(place, GEOID, afact)

```

Merge the environmental index tract level data onto the city crosswalk file.

```{r}

tract_place_haz19 <- crosswalk_city %>% 
  left_join(race_pov_enviro19, by = "GEOID") %>%
  mutate(place = as.character(place)) 


anti_join(x = race_pov_enviro19, y = crosswalk_city, by = "GEOID") %>%
  filter(total_pop > 0)

```

## Create place level index

### 2019

Import places/pop file and prep to limit to population cutoff places.

```{r}
state_places_pop19 <- read_csv(here::here("geographic-crosswalks/data", "place-populations.csv")) %>% 
  filter(year == 2019)

```

Create "All" observations 
calculate place population for tracts and index_air_quality weighting by amount of tract in place and tract total population

```{r}

all_enviro_place19 <- tract_place_haz19 %>%
  mutate(tract_pop = (total_pop*afact)) %>% #to account for the fact that only part of the tract population is in the place
  group_by(state, place) %>%
  summarise(index_air_quality = weighted.mean(index_air_quality, tract_pop, na.rm = TRUE),
        na_pop = sum(na_pop * afact),
        place_pop = sum (tract_pop)) %>% 
        ungroup()
```


Add a variable with percent of population missing for each place

```{r}
all_enviro_place19 <- all_enviro_place19 %>%
  mutate(na_perc = na_pop / place_pop,
      subgroup = "All",
      subgroup_type = "all") %>%
select(-c(na_pop, place_pop))
```


Create a GEOID for later.

```{r}

all_enviro_place19 <- all_enviro_place19 %>% 
  mutate(geoid = paste0(state, place))

```


Create place level weighted index by poverty level.


```{r}

pov_enviro_place19 <- tract_place_haz19 %>%
  mutate(weighting_ind = case_when(poverty_type == "High Poverty" ~ poverty,
                                    poverty_type == "Not High Poverty" ~ (total_pov - poverty)),
          na_pop = if_else(is.na(index_air_quality) | is.na(poverty_type), weighting_ind, 0)) %>%
  group_by(state, place, poverty_type) %>%
  summarise(index_air_quality = weighted.mean(index_air_quality, weighting_ind*afact, na.rm = TRUE), #Multiplied weight by % in Tract
            na_pop = sum(na_pop*afact, na.rm = TRUE), 
            subgroup_pop = sum(weighting_ind, na.rm=TRUE)
  ) %>%
  ungroup()%>%
  mutate(geoid = str_c(state,place),
          na_perc = na_pop / subgroup_pop) %>%
  select(-c(na_pop, subgroup_pop))


```


Create a file with unique states and places.

```{r}

state_place19 <- tract_place_haz19 %>%
  transmute(geoid = str_c(state, place), state, place) %>%
  distinct()%>%
  filter(!is.na(geoid)) 

```

Expand poverty/place data set for every place and poverty type

```{r}
expand_pov_place19 <- pov_enviro_place19 %>%
  expand(geoid, poverty_type)
```


Join poverty data set. 


```{r}
pov_env_exp_place19 <- left_join(expand_pov_place19,
                                        pov_enviro_place19 %>%
                                        select(geoid, poverty_type, index_air_quality, na_perc),
                                        by=c("geoid",
                                            "poverty_type")) %>%
  left_join(state_place19, by = "geoid") %>%
  rename(subgroup = poverty_type) %>%
  mutate(subgroup_type = "poverty") %>%
  filter(!is.na(subgroup))
```


Create place level weighted index by race/ethnicity majority.

```{r}

haz_by_race_place19 <- tract_place_haz19 %>%
  mutate(weighting_ind = case_when(race_ind == "No Majority Race/Ethnicity" ~ total_pop,
                                    race_ind == "Majority Non-White" ~ poc,
                                    race_ind == "Majority White, Non-Hispanic" ~wnh),
          na_pop = if_else(is.na(index_air_quality) | is.na(race_ind), weighting_ind, 0)) %>%
  group_by(state, place, race_ind) %>%
  summarise(index_air_quality = weighted.mean(index_air_quality, weighting_ind*afact, na.rm = TRUE), ##[CHECK - weight by afact??]##
            na_pop = sum(na_pop*afact, na.rm = TRUE), 
            subgroup_pop = sum(weighting_ind*afact, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(geoid = str_c(state, place),
          na_perc = na_pop / subgroup_pop) %>%  
  select(-c(na_pop, subgroup_pop)) 

```

Expand data set for every place/race/ethnicity 


```{r}

expand_race_place19 <- haz_by_race_place19 %>%
  expand(geoid, race_ind)

```


Join to expanded, add GEO variables, and add subgroup variables 


```{r}

haz_by_race_exp_place19 <- left_join(expand_race_place19,
                                      haz_by_race_place19 %>%
                                        select(geoid, race_ind, index_air_quality, na_perc),
                                        by=c("geoid", "race_ind")) %>%
  left_join(state_place19, by = "geoid") %>%
  rename(subgroup = race_ind) %>%
  mutate(subgroup_type = "race-ethnicity") %>%
  filter(!is.na(subgroup))
  

```

Append data

```{r}

bind_data_place19 <- all_enviro_place19 %>%
  bind_rows(pov_env_exp_place19) %>%
  bind_rows(haz_by_race_exp_place19) %>%
  mutate(
    environmental_quality = if_else(na_perc >= .05,2,1),
    year = 2019
          ) %>%
  select(-na_perc) 

```

Keep only the places in the places_pop19 file 


```{r}

final_data_place19 <- bind_data_place19 %>%
  filter(geoid %in% state_places_pop19$geoid) %>%
  filter(!is.na(subgroup)) 

```

Select to match datastructure 

```{r}

final_data_place19 <-  final_data_place19 %>%
 arrange(year,
          state,
          place,
          subgroup_type,
          subgroup)%>%
  select(year, state, place, subgroup_type, subgroup, index_air_quality, environmental_quality) 

```

Round environmental indicator to nearest integer

```{r}

final_data_place19 <- final_data_place19 %>% 
  mutate(index_air_quality = round(index_air_quality, digits = 0))

```


Crate a file with just the all subgroup

```{r}
final_place_all19 <- final_data_place19 %>%
  filter(subgroup == "All")
```




#save files 

## County

Save county all and county subgroup data for 2019

```{r}
write_csv(data_cnty19_final,"06_neighborhoods/environment/data/output/environment_county19.csv")
write_csv(final_data_cnty_sub19, "06_neighborhoods/environment/data/output/environment_county_sub19.csv")
```


## Place

Save place all and place subgroup data for 2019


```{r}
write_csv(final_place_all19,"06_neighborhoods/environment/data/output/environment_place19.csv")
write_csv(final_data_place19, "06_neighborhoods/environment/data/output/environment_place_sub19.csv")
```



