---
title: "Air Quality Index Program"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

*Program for the creation of the Air Quality index metric under the Environemntal quality predictor*

ACS Code: Initially written by Rebecca Marx and updated by JP Walsh 2022-2023.

Primary data derived from the EPA AirTox Screen Assessment (data source linked below).

## Housekeeping {#housekeeping}

Read in packages for use. If you do not have an IPUMS API key you will need to make one via the [IPUMS website](https://www.ipums.org/).

```{r, results='hide'}

library(tidycensus)
library(tidyverse)
library(tm)
library(skimr)
library(rvest)
library(httr)
library(readxl)
library(tidylog)
library(reactable)
library(janitor)

#Enter census API key here.
#census_api_key(YOUR KEY)

options(scipen = 999)
```

## Program Overview {#program-overview}

Original data pulled from the EPA website:

[2019 Data](https://www.epa.gov/AirToxScreen/2019-airtoxscreen-assessment-results#nationwide) [2018 Data](https://www.epa.gov/AirToxScreen/2018-airtoxscreen-assessment-results#nationwide) [2014 Data](https://www.epa.gov/national-air-toxics-assessment/2014-nata-assessment-results)

Downloaded data is available in the Air Quality folder inside the Metrics_2024_round [box folder](https://urbanorg.box.com/s/n82wl2bv8n2nmrdcgwa07q1dyn5bldvc).

Description:

This code updates the program titled AirTox_2018_clean.R which was written by Rebecca Marx and was last updated April 4, 2023. The program recreates Rebecca's steps and adds environmental hazards data for 2019.Note that the EPA uses the same list of census tracts in all years.

## Read data {#read-data}

Import AirTox Screen Data on Cancer, Neuroligical and Respitory health for years 2014, 2018 and 2019. These data are in three seperate excel files for each year. Bind them together using map.

```{r}
airtox_data19 <- map_df(list.files(here::here("06_neighborhoods/environment/data/raw/2019/")), 
~read_excel(paste0(here::here("06_neighborhoods/environment/data/raw/2019"), "/", .x))) %>% 
  clean_names() %>% 
  mutate(year = "2019")
  
airtox_data18 <- map_df(list.files(here::here("06_neighborhoods/environment/data/raw/2018/")), 
~read_excel(paste0(here::here("06_neighborhoods/environment/data/raw/2018"), "/", .x))) %>%  
  clean_names() %>% 
  mutate(year = "2018")

airtox_data14 <- map_df(list.files(here::here("06_neighborhoods/environment/data/raw/2014/")), 
~read_excel(paste0(here::here("06_neighborhoods/environment/data/raw/2014"), "/", .x))) %>% 
  clean_names() %>% 
  mutate(year = "2014")
```

Confirm that the census tracts included are the same for each year of data.

```{r}
tracts19 <- airtox_data19 %>% 
  select(year19 = year, tract) %>% 
  unique()

tracts18 <- airtox_data18 %>% 
  select(year18 = year, tract) %>% 
  unique()

tracts14 <- airtox_data14 %>% 
  select(year14 = year, tract) %>% 
  unique()
```

Comparing the 2019 and 2018 data the tract list is exactly the same.

```{r}
anti_join(tracts19, tracts18)
anti_join(tracts18, tracts19)

```

For 2014 there are several tracts that are included but changed in the 18/19 data.These are corrrected for in the crosswalk section below.

```{r}
anti_join(tracts14, tracts19)
anti_join(tracts14, tracts18)
```

Create versions of the data with only the census tract ID and tract level risk indicator from each year of data.

Starting with the cancer indicator, select only cases where total_cancer_risk is filled in the data and bind the individual years. The data frame cancer_data will now have the cancer metric for 2014, 2018 and 2019.

```{r}
cancer_data <- bind_rows(airtox_data19 %>% filter(!is.na(total_cancer_risk_per_million)), 
                               airtox_data18 %>% filter(!is.na(total_cancer_risk_per_million)),
                         airtox_data14 %>% filter(!is.na(total_cancer_risk_per_million))) %>% 
  select(year, tract, total_cancer_risk_per_million)
```

Check the distribution of the cancer metric by year.There are some significant outliers in the data where tracts have a very high cancer hazard risk (we can leave these in as there is no reason to belive the EPA made a mistake). The second graph removes outliers and shows that after 2014 the EPA started rounding this statistic to the nearest 10th (not sure if this was intentional or an unintended consequence of using the xlsx format).

```{r}
cancer_data %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = total_cancer_risk_per_million, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by cancer risk hazard, distriubtion") +
  ylab("Density")

cancer_data %>% 
  filter(total_cancer_risk_per_million < 100) %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = total_cancer_risk_per_million, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by cancer risk hazard, distriubtion (no outliers)") +
  ylab("Density")

```

Next, select only cases where total_neurological_hazard is filled in and bind all years.

```{r}
nuero_data <- bind_rows(airtox_data19 %>% filter(!is.na(total_neurological_hazard_quotient)), 
                               airtox_data18 %>% filter(!is.na(total_neurological_hazard_quotient)),
                         airtox_data14 %>% filter(!is.na(total_neurological_hazard_quotient))) %>% 
  select(year, tract, total_neurological_hazard_quotient)
```

Check the distribution of the nuero metric by year.There are some significant outliers in the data where tracts have a very high nuero hazard risk. The same issue exists as above with rounding.

```{r}
nuero_data %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = total_neurological_hazard_quotient, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by cancer risk hazard, distriubtion") +
  ylab("Density")

nuero_data %>% 
  filter(total_neurological_hazard_quotient < 0.15) %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = total_neurological_hazard_quotient, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by cancer risk hazard, distriubtion (no outliers)") +
  ylab("Density")
```

Next, select only cases where total_respiratory_hazard is filled in and bind all years.

```{r}
resp_data <- bind_rows(airtox_data19 %>% filter(!is.na(total_respiratory_hazard_quotient)), 
                               airtox_data18 %>% filter(!is.na(total_respiratory_hazard_quotient)),
                         airtox_data14 %>% filter(!is.na(total_respiratory_hazard_quotient))) %>% 
  select(year, tract, total_respiratory_hazard_quotient)

```

Check the distribution of the nuero metric by year. Graph 1 again shows there are some tracts with significantly higher respo risk. Note same issue as prior years with rounding.

```{r}
resp_data %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = total_respiratory_hazard_quotient, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by resp risk hazard, distriubtion") +
  ylab("Density")

resp_data %>% 
  filter(total_respiratory_hazard_quotient < 1) %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = total_respiratory_hazard_quotient, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by resp risk hazard, distriubtion (no outliers)") +
  ylab("Density")
```

Join the data sets for each risk category by census tract. Rename the variables so they are easily referenced throughout the program.

```{r}
enviro_all <- left_join(cancer_data, nuero_data, by = c("tract", "year")) %>%
  left_join(resp_data, by = c("tract", "year")) %>% 
  select(year, tract, resp = total_respiratory_hazard_quotient, canc = total_cancer_risk_per_million,
         neuro = total_neurological_hazard_quotient)
```

### ACS Tract Data

Add tract-level subgroup information which will be used to break out the racial composition and poverty level of each census tract. First we will read in tract level population data. Total population and total white, non-Hispanic. Then total population in poverty.

```{r}
load_variables(2019, "acs5", cache = TRUE) %>% 
  filter(name %in% c("B01003_001", "B03002_003", "B03002_001", "B17001_001", "B17001_002")) %>% 
  reactable(searchable = TRUE)
```

```{r}
state_abrv <- c("DC", state.abb) 

pull_acs <- function(years) {
  
  tidycensus::get_acs(geography = "tract", 
                      variables = c("total_pop" = "B01003_001",
                                    "total_pop_race" = "B03002_001",
                                    "wnh" = "B03002_003", 
                                    "total_pop_pov" = "B17001_001", 
                                    "poverty" = "B17001_002"),
                      year = years,
                      state = state_abrv,
                      geometry = FALSE,
                      output = "wide"
  ) %>% 
    mutate(year = as.character(years))
}

acs_tracts <- map_dfr(list(2019, 2018, 2014), pull_acs)

```

## Clean Data {#clean-data}

Remove results form Puerto Rico and Virgin Islands.

```{r}

enviro_all_clean <- enviro_all %>%
  mutate(state = str_sub(tract, 1, 2)) %>%
  filter(state != 72 & state != 78) 

```

The EPA AirToxScreen data uses some census tracts from 2010 that have been changed since then. Adjust these tracts manually first.

```{r}
enviro_all_clean <- enviro_all_clean %>% 
  mutate(tract = case_when(                                  
      tract ==  "36053940101" ~ "36053030101",
      tract ==  "36053940102" ~ "36053030102",
      tract ==  "36053940103" ~ "36053030103", 
      tract ==  "36053940200" ~ "36053030200",
      tract ==  "36053940300" ~ "36053030300",
      tract ==  "36053940401" ~ "36053030401",
      tract ==  "36053940700" ~ "36053030402",
      tract ==  "36053940403" ~ "36053030403",
      tract ==  "36053940600" ~ "36053030600",
      tract ==  "36065940100" ~ "36065024700",
      tract ==  "36065940000" ~ "36065024800",
      tract ==  "36065940200" ~ "36065024900",
      tract ==  "04019002701" ~ "04019002704",
      tract ==  "04019002903" ~ "04019002906",
      tract ==  "04019410501" ~ "04019004118", 
      tract ==  "04019410502" ~ "04019004121",
      tract ==  "04019410503" ~ "04019004125", 
      tract ==  "04019470400" ~ "04019005200", 
      tract ==  "04019470500" ~ "04019005300", 
      tract ==  "06037930401" ~ "06037137000",
      tract ==  "51515050100" ~ "51019050100",
      tract ==  "02270000100" ~ "02158000100",
      tract ==  "46113940500" ~ "46102940500",
      tract ==  "46113940800" ~ "46102940800",
      tract ==  "46113940900" ~ "46102940900", 
      TRUE ~ tract
    ))
```

The data contains some results that are not at the tract level. Some of these rows can be identified because the tract ID will be entirely zeros.

Create a variable with just the tract ID information alone (remove county and state from the GEOID).

```{r}
enviro_all_clean <- enviro_all_clean %>% 
  mutate(tract_id = str_sub(tract, start = 6, end = 11))
```

Count the number of these rows.

```{r}
enviro_all_clean %>% 
  filter(tract_id == "000000") %>% 
  group_by(tract_id) %>% 
  count()
```

Join onto the ACS tract data so we know we are only keeping census tract level data.

```{r}
enviro_all_tracts <- acs_tracts %>% 
  filter(year == 2019) %>% 
  select(GEOID) %>% 
  left_join(enviro_all_clean, by = c("GEOID" = "tract")) %>% 
  filter(!is.na(tract_id)) %>% 
  rename(tract = GEOID)
```

This leaves us with approximately 72,525 tracts per year (note 2014 has one additional tract). Looking at the removed tracts, these are all cases where the EPA did not have tract level information. Many of these have small population counts.

```{r}
count(enviro_all_clean, year)
count(enviro_all_tracts, year)

anti_join(acs_tracts, enviro_all_tracts, by = c("GEOID" = "tract")) %>% 
  filter(total_popE != 0)
```

Confirm there are no non-tract level rows remaining.

```{r}
enviro_all_tracts %>% 
  filter(tract_id == "000000") %>% 
  group_by(tract_id) %>% 
  count()
```

## Create AirTox Metric {#create-airtox-metric}

Create variables with the mean and standard deviation of each health metric for each year. This will be used in creating the indexed variable.

```{r}
enviro_index_all <- enviro_all_tracts %>% 
  group_by(year) %>% 
  mutate(resp_mean = mean(resp, na.rm = TRUE),
         canc_mean = mean(canc, na.rm = TRUE),
         neuro_mean = mean(neuro, na.rm = TRUE),
         resp_stdv = sd(resp, na.rm = TRUE),
         canc_stdv = sd(canc, na.rm = TRUE),
         neuro_stdv = sd(neuro, na.rm = TRUE)) %>% 
  ungroup()
```

Create the Environmental Health Indicator using the statistics calculated above. First calculate the components, which is the individual health indicator for a tract minus the mean of that indicator and divided by the standard deviation.

```{r}

enviro_index_all  <- enviro_index_all  %>%
  mutate(resp_norm = (resp - resp_mean)/resp_stdv,
         canc_norm = (canc - canc_mean)/canc_stdv,
         neuro_norm = (neuro - neuro_mean)/neuro_stdv)

```

Add together the normalized results and multiple by negative 1 to create the index.

```{r}
enviro_index_all  <- enviro_index_all  %>%
  mutate(envhealth = (resp_norm + canc_norm + neuro_norm)*-1)
```

Percent rank the calculated value, again grouping by year.

```{r}
enviro_index_all  <- enviro_index_all  %>%
  group_by(year) %>% 
  mutate(index_air_hazard = round(percent_rank(envhealth) * 100, 0)) %>% 
  ungroup()
```

Keep only the tract and hazard index variable.

```{r}
haz_index_all <- enviro_index_all  %>% 
  select(year, tract, index_air_hazard)
```

Visualize the distribution to see how it looks. Note that 2018 and 2019 have slightly less even distributions due to the inclusion of 100ths in the EPA data.

```{r}
haz_index_all %>% 
  mutate(year = factor(year)) %>% 
  ggplot(aes(x = index_air_hazard, color = year, fill = year)) +
  geom_density(adjust = 4, alpha = 0.15) +
  theme_minimal() +
  ggtitle("Tracts by air quality index, distriubtion") +
  ylab("Density")
```

### Subgroup information

The poverty total population is different in some cases from the total pop estimate from the race variable. The median difference is 15 and average difference is 108, though there are some large differences. It makes sense to use the total from the poverty variable as the denominator for the poverty indicator to avoid inflating or deflating results.

```{r}
acs_tracts %>% 
  mutate(population_diff_race = abs(total_popE - total_pop_raceE),
         population_diff_pov = abs(total_popE - total_pop_povE)) %>% 
  arrange(desc(population_diff_race)) %>% 
  select(NAME, year, total_popE, total_pop_raceE, total_pop_povE, population_diff_race, population_diff_pov) %>% 
  summary()
```

Use ACS data to create a variable for percent of each tract that are people of color and the percent in poverty. Remove the estimate indicator "E" from value names. The variable `total_pop` will be used for weighting census tracts as it is the most complete indicator of tract population.

```{r}
acs_tracts <- acs_tracts %>%
  select(year, geoid = GEOID,
         total_pop = total_popE,
            total_pop_race = total_pop_raceE,
            wnh = wnhE,
          total_pop_pov = total_pop_povE, 
            poverty = povertyE) %>% 
  mutate(poc = total_pop_race - wnh,
         percent_poc = poc/total_pop_race,
         percent_pov = poverty / total_pop_pov)
```

Create indicator variable for race based on percentage of poc/nh-White in each tract. These percentage cut offs were determined by Marge Turner. Also create indicator for tracts in 'High Poverty', with 40% or higher poverty rate meaning the tract has a high level of poverty

```{r}

race_pov <- acs_tracts %>%
  mutate(
    race_ind = case_when(
      percent_poc > .4 & percent_poc < .6 ~"No Majority Race/Ethnicity",
      percent_poc >= .6 ~ "Majority Non-White",
      percent_poc <= .6 ~ "Majority White, Non-Hispanic"), 
    poverty_type = case_when(
      percent_pov < .4 ~ "Not Extreme Poverty",
      percent_pov >=  .4 ~ "Extreme Poverty")
  ) %>% 
  select(year, geoid, race_ind, poverty_type, total_pop)

```

## Crosswalk to County

Crosswalk the individual years of data onto the UMF geographic crosswalk for counties file taken from the geographic-crosswalks folder. This will create a version of the data where all tracts that fall within counties used in the main UMF data set are present in the final data (regardless of missing EPA data). Note that the EPA did not change which counties are included between 2014, 2018 and 2019.

Read in county crosswalk and create tract level variable that combines state, county and tract IDs. To merge with AirTox index which includes 2014, 2018 and 2019, create a tract to county row for each year in the data.

```{r}
crosswalk_cnty <- read_csv(here::here("geographic-crosswalks/data", "tract-county-crosswalk_2018.csv")) %>% 
  mutate(year1 = "2019",
         year2 = "2018",
         year3 = "2014",
         tract = paste0(state, county, tract)) %>% 
  select(tract, year1:year3) %>% 
  pivot_longer(!tract, values_to = "year", names_to = "value") %>% 
  select(-value)
```

Remove results form Puerto Rico and Virgin Islands.

```{r}

haz_index_all <- haz_index_all %>%
  select(year, tract, index_air_hazard)

```

Merge the index data onto the country crosswalk file.

```{r}

haz_index_crosswalk <- crosswalk_cnty %>% 
  left_join(haz_index_all, by = c("tract", "year"))

```

Looking at the missing tracts in the crosswalk file, the states with the most missing are very large and populous (Florida, Michigan, New York).

```{r}
anti_join(crosswalk_cnty, haz_index_all, by = "tract") %>% 
  mutate(state = str_sub(tract, start = 1, end = 2)) %>% 
  group_by(state, year) %>%
  count() %>% 
  arrange(desc(n))
```

Create state and county indicator for 2019 data

```{r}

#split tract into state and county 
haz_index_crosswalk <- haz_index_crosswalk %>%
  mutate(geoid = str_sub(tract, start = 1, end = 11),
         state = str_sub(tract, start = 1, end = 2),
         county = str_sub(tract, start = 3, end = 5),
         county_id = str_sub(tract, start = 1, end = 5)
         )
```

Read in crosswalk file with all counties.

```{r}
county_crosswalk <- read_csv(here::here("geographic-crosswalks", "data", "crosswalk_puma_to_county.csv")) %>% 
  select(state = statefip, county) %>% 
  unique() %>% 
  filter(state != 72) %>% 
   mutate(year1 = "2019",
         year2 = "2018",
         year3 = "2014") %>% 
  pivot_longer(!c(state, county), values_to = "year", names_to = "value") %>% 
  select(-value) %>% 
  mutate(county_id = paste0(state, county))
```

## Create AriTox Index Metric: County

### All

Join onto the environmental hazard index data. Calculate the total population for tracts where the index data is missing.

```{r}
haz_index_acs <- haz_index_crosswalk %>% 
  left_join(race_pov, by=c("geoid", "year")) %>% 
  mutate(na_pop= if_else(is.na(index_air_hazard), total_pop, 0))
```

Calculate the average of county level hazard index for each year. Weight the mean by the total population inside each tract the value is coming from.

```{r}

haz_index_county_all <- haz_index_acs %>%
  group_by(year, county_id, state, county) %>%
  summarise(index_air_hazard = weighted.mean(index_air_hazard, total_pop, na.rm = TRUE), 
            na_pop = sum(na_pop),
            county_pop = sum(total_pop)) %>%
  ungroup()

```

Calculate percent population of each county that has missing tract hazard information.

```{r}
haz_index_county_all <- haz_index_county_all %>%
  mutate(na_perc = na_pop / county_pop,
         subgroup = "All",
         subgroup_type = "all") %>%
  select(-c(na_pop, county_pop)) 

```

Merge on to the county_crosswalk file so all counties are present.

```{r}
haz_index_county_all <- left_join(
  county_crosswalk,
  haz_index_county_all,
  by = c("county_id", "state", "county", "year")
  
)
  
stopifnot(nrow(haz_index_county_all) == 3143 * 3)
```

### Subgroups

Create an NA indicator counting population of tracts where either index air quality or poverty_type are missing.

```{r}
haz_index_pov <- haz_index_acs %>% 
  mutate(na_pop = if_else(is.na(index_air_hazard) | is.na(poverty_type), total_pop, 0))
```

Calculate county/poverty type index using tract population as the weight. *Note* this is a change from the original version. The previous program weighted each tract by the count of individuals in poverty for high_poverty tracts and the county of individuals not in poverty in not_high_poverty tracts. This version considers the total population of the tracts and weights based on that.

```{r}
haz_index_sub_poverty <- haz_index_pov %>% 
  group_by(year, county_id, state, county, poverty_type) %>%
  summarise(index_air_hazard = weighted.mean(index_air_hazard, total_pop, na.rm = TRUE),
            na_pop = sum(na_pop, na.rm = TRUE),
            subgroup_pop = sum(total_pop, na.rm=TRUE)
  ) %>%
  ungroup()%>%
  mutate(na_perc = na_pop / subgroup_pop) %>%
  select(-c(na_pop, subgroup_pop)) %>%
  filter(!is.na(poverty_type))
```

Expand data set for every county/poverty_type

```{r}
haz_index_sub_pov_expand <- left_join(
  county_crosswalk,
  haz_index_sub_poverty,
  by = c("year", "county_id", "state", "county")
) %>%
  expand(year, county_id, poverty_type) %>% 
  select(year, county_id, poverty_type) %>% 
  filter(!is.na(poverty_type))
```

Join dataset on expanded dataset, join with geo varibale, and add subgroup type variables

```{r}

haz_by_poverty <- haz_index_sub_pov_expand  %>% 
  left_join(haz_index_sub_poverty %>% 
  select(year, county_id, state, county, poverty_type, index_air_hazard,
         na_perc), 
  by = c("year", "county_id", "poverty_type")) %>% 
  rename(subgroup = poverty_type) %>%
  mutate(subgroup_type = "poverty",
         state = str_sub(county_id, 1, 2),
         county = str_sub(county_id, 3, 5))

stopifnot(nrow(haz_by_poverty) == 3143 * 3 *2)

```

### Neighborhood racial majority

Create neighborhood racial majority weight.

```{r}
haz_index_race <- haz_index_acs %>%
  mutate(na_pop = if_else(is.na(index_air_hazard) | is.na(race_ind), total_pop, 0)) 
```

Calculate average county/race type index using tract population as the weight. *Note* this is a change from the original version. The previous program weighted each tract by the count of people of color for maj. POC tracts and the count of white individuals for not maj. white tracts. This version considers the total population of the tracts and weights based on that.

```{r}
haz_index_sub_race <- haz_index_race %>%
  group_by(year, county_id, state, county, race_ind) %>%
  summarise(index_air_hazard = weighted.mean(index_air_hazard, total_pop, na.rm = TRUE),
            na_pop = sum(na_pop, na.rm = TRUE),
            subgroup_pop = sum(total_pop, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(na_perc = na_pop / subgroup_pop) %>%
  select(-c(na_pop, subgroup_pop)) %>%
  filter(!is.na(race_ind))  


```

Expand data set for every year, county and race/ethnicity tract designation.

```{r}
haz_index_sub_race_expand <- left_join(
  county_crosswalk,
  haz_index_sub_race,
  by = c("year", "county_id", "state", "county")
) %>%
  expand(year, county_id, race_ind) %>% 
  select(year, county_id, race_ind) %>% 
  filter(!is.na(race_ind))
```

Join to expanded, add geo variables, and add subgroup variables.

```{r}
haz_by_race <- haz_index_sub_race_expand %>% 
  left_join(haz_index_sub_race %>%
              select(year, county_id, state, county, race_ind, index_air_hazard, na_perc),
            by=c("year", "county_id", "race_ind")) %>%
  rename(subgroup = race_ind) %>%
  mutate(subgroup_type = "race-ethnicity",
         state = str_sub(county_id, 1, 2),
         county = str_sub(county_id, 3, 5))

stopifnot(nrow(haz_by_race) == 3143 * 3 *3)
```

### Clean county data

Append data.

```{r}

airtox_county_all <- haz_index_county_all %>% 
  bind_rows(haz_by_poverty) %>%
  bind_rows(haz_by_race)


```

Match file to data standards

```{r}
final_data_county <- airtox_county_all %>%
  mutate(environmental_quality = if_else(na_perc >= .05,2,1)) %>%
  arrange(year,
          state,
          county,
          subgroup_type,
          subgroup) %>%
  select(year, state, county, subgroup_type, subgroup, index_air_hazard, environmental_quality) 
```

Round environmental indicator to nearest integer

```{r}
final_data_county_sub  <- final_data_county  %>% 
  mutate(index_air_hazard = round(index_air_hazard, digits = 0))
```

Create all version of data.

```{r}
final_data_county_all <- final_data_county_sub %>%
  filter(subgroup == "All")
```

## Crosswalk place

Crosswalk the individual years of data onto the UMF geographic tract crosswalk for places file taken from the geographic-crosswalks folder. This will create a version of the data where all tracts that fall within places used in the main UMF data set are present in the final data (regardless of missing EPA data). Note that the EPA did not change which counties are included between 2014, 2018 and 2019.

```{r}

crosswalk_tract_place <- read_csv(here::here("geographic-crosswalks", "data", "geocorr2018_tract_to_place.csv")) %>% 
  mutate(county = str_sub(county, start = -3L, end = -1L),
         state = str_pad(state, 2, side = "left", pad = "0"),
         tract = tract * 100,
         tract = str_pad(tract, 6, side = "left", pad = "0"),
         tract = paste0(state, county, tract),
         year1 = "2019",
         year2 = "2018",
         year3 = "2014") %>% 
  select(place = placefp, tract, afact,  year1:year3) %>% 
  pivot_longer(!c(place, tract, afact), values_to = "year", names_to = "value") %>% 
  select(-value)
```

Pad the place variable with a leading zero.

```{r}
crosswalk_tract_place <- crosswalk_tract_place %>% 
  mutate(place = str_pad(place, 5, side = "left", pad = "0")) %>% 
  select(year, place, tract, afact)
```

Merge the environmental index ACS data onto the city crosswalk file.

```{r}
tract_place_hazard <- crosswalk_tract_place %>% 
  left_join(haz_index_all, by = c("year", "tract")) %>%
  mutate(place = as.character(place),
         state = str_sub(tract, 1, 2)) %>% 
  mutate(place_id = str_c(state, place))

anti_join(crosswalk_tract_place, haz_index_all, by = c("year", "tract")) %>% 
  mutate(state = str_sub(tract, start = 1, end = 2)) %>% 
  group_by(state, year) %>%
  count() %>% 
  arrange(desc(n))
```

Merge on ACS information.

```{r}
haz_index_acs <- tract_place_hazard %>% 
  left_join(race_pov, by=c("tract" = "geoid", "year")) %>% 
  mutate(na_pop= if_else(is.na(index_air_hazard), total_pop, 0))
```

Read in file with just places used in UMF data.

```{r}
place_file <- read_csv(here::here("geographic-crosswalks", "data", "crosswalk_puma_to_place.csv")) %>% 
  select(state = statefip, place) %>% 
  unique() %>% 
   mutate(year1 = "2019",
         year2 = "2018",
         year3 = "2014") %>% 
  pivot_longer(!c(state, place), values_to = "year", names_to = "value") %>% 
  select(-value) %>% 
  mutate(place_id = paste0(state, place))
```

## Create place level index

## All

Import places/pop file and prep to limit to population cutoff places.

```{r}
state_place_pop <- read_csv(here::here("geographic-crosswalks", "data", "place-populations.csv")) %>% 
  mutate(place_id = paste0(state, place))
```

Create "All" observations calculate place population for tracts and index_air_hazard weighting by amount of tract in place and tract total population

```{r}
all_enviro_place <- haz_index_acs %>%
  mutate(tract_pop = (total_pop*afact)) %>% #to account for the fact that only part of the tract population is in the place
  group_by(year, place_id, state, place) %>%
  summarise(index_air_hazard = weighted.mean(index_air_hazard, tract_pop, na.rm = TRUE),
        na_pop = sum(na_pop * afact),
        place_pop = sum(tract_pop)) %>% 
        ungroup()
```

Add a variable with percent of population missing for each place

```{r}
all_enviro_place <- all_enviro_place %>%
  mutate(na_perc = na_pop / place_pop,
      subgroup = "All",
      subgroup_type = "all") %>%
select(-c(na_pop, place_pop))
```

Merge on to the place file so all counties are present.

```{r}
haz_index_place_all <- left_join(
  place_file,
  all_enviro_place,
  by = c("place_id", "state", "place", "year")
  
)
  
stopifnot(nrow(haz_index_place_all) == 486 * 3)
```

### Poverty level

Create place level weighted index by poverty level.

```{r}
hazard_place_pov <- haz_index_acs %>%
  mutate(na_pop = if_else(is.na(index_air_hazard) | is.na(poverty_type), total_pop*afact, 0)) 
```

Create the index in each place by the poverty type subgroup.

```{r}
hazard_place_sub_pov <- hazard_place_pov %>%
   mutate(tract_pop = (total_pop*afact)) %>%
  group_by(year, place_id, state, place, poverty_type) %>%
  summarise(index_air_hazard = weighted.mean(index_air_hazard, tract_pop, na.rm = TRUE), #Multiplied weight by % in Tract
            na_pop = sum(na_pop, na.rm = TRUE), 
            subgroup_pop = sum(tract_pop, na.rm=TRUE)
  ) %>%
  ungroup()%>%
  mutate(na_perc = na_pop / subgroup_pop) %>%
  select(-c(na_pop, subgroup_pop))
```

Expand data set for every place/poverty_type

```{r}
haz_index_sub_pov_expand <- left_join(
  place_file,
  hazard_place_sub_pov,
  by = c("year", "place_id", "state", "place")
) %>%
  expand(year, place_id, poverty_type) %>% 
  select(year, place_id, poverty_type) %>% 
  filter(!is.na(poverty_type))
```

Join poverty data set.

```{r}
hazard_by_pov_sub_place <- haz_index_sub_pov_expand %>% 
  left_join(hazard_place_sub_pov %>%
              select(year, place_id, poverty_type, index_air_hazard, na_perc),
                                        by=c("year",
                                        "place_id",
                                        "poverty_type")) %>%
  rename(subgroup = poverty_type) %>%
  mutate(subgroup_type = "poverty",
         state = str_sub(place_id, 1, 2),
         place = str_sub(place_id, 3, 8)) %>%
  filter(!is.na(subgroup))

stopifnot(nrow(hazard_by_pov_sub_place) == 486 * 3 *2)
```

### Neighborhood race status

Create place level count of missing population by race/ethnicity majority.

```{r}
hazard_place_race <- haz_index_acs %>%
  mutate(na_pop = if_else(is.na(index_air_hazard) | is.na(race_ind), total_pop, 0)) 
```

```{r}
hazard_place_sub_race <- hazard_place_race %>% 
  group_by(year, place_id, state, place, race_ind) %>%
  summarise(index_air_hazard = weighted.mean(index_air_hazard, total_pop*afact, na.rm = TRUE),
            na_pop = sum(na_pop*afact, na.rm = TRUE), 
            subgroup_pop = sum(total_pop*afact, na.rm = TRUE)
  ) %>%
  ungroup() %>%
  mutate(na_perc = na_pop / subgroup_pop) %>%  
  select(-c(na_pop, subgroup_pop)) 
```

Expand data set for every place/race indicator

```{r}
haz_index_sub_race_expand <- left_join(
  place_file,
  hazard_place_sub_race,
  by = c("year", "place_id", "state", "place")
) %>%
  expand(year, place_id, race_ind) %>% 
  select(year, place_id, race_ind) %>% 
  filter(!is.na(race_ind))
```

Join to expanded, add GEO variables, and add subgroup variables

```{r}
hazard_by_race_sub_place <- haz_index_sub_race_expand %>% 
  left_join(hazard_place_sub_race %>% 
              select(year, place_id, race_ind, index_air_hazard, na_perc),
                                        by=c("year",
                                        "place_id",
                                        "race_ind")) %>%
  rename(subgroup = race_ind) %>%
  mutate(subgroup_type = "race-ethnicity",
         state = str_sub(place_id, 1, 2),
         place = str_sub(place_id, 3, 8)) %>%
  filter(!is.na(subgroup))

stopifnot(nrow(hazard_by_race_sub_place) == 486 * 3 *3)
```

### Clean data

Append data

```{r}

bind_data_place <- all_enviro_place %>%
  bind_rows(hazard_by_pov_sub_place) %>%
  bind_rows(hazard_by_race_sub_place) %>%
  mutate(
    environmental_quality = if_else(na_perc >= .05,2,1)
          ) %>%
  select(-na_perc) 

```

Keep only the places in the places_pop file (these are the places used in the UMF project).

```{r}
final_data_place <- bind_data_place %>%
  filter(place_id %in% state_place_pop$place_id) %>%
  filter(!is.na(subgroup)) 
```

Select to match data structure

```{r}

final_data_place<-  final_data_place %>%
 arrange(year,
          state,
          place,
          subgroup_type,
          subgroup)%>%
  select(year, state, place, subgroup_type, subgroup, index_air_hazard, environmental_quality) 

```

Round environmental indicator to nearest integer

```{r}

final_data_place <- final_data_place %>% 
  mutate(index_air_hazard = round(index_air_hazard, digits = 0))

```

Crate a file with just the all subgroup

```{r}
final_data_place_all <- final_data_place %>%
  filter(subgroup == "All")
```

#save files

## County

Save county all and county subgroup data for 2019

```{r}
write_csv(final_data_county_all, here::here("06_neighborhoods", "environment", "data", "final", "environment_county_longitudinal.csv"))

county_sub_pov <- final_data_county_sub %>% 
  filter(subgroup_type %in% c("all", "poverty"))

write_csv(county_sub_pov, here::here("06_neighborhoods", "environment", "data", "final", "environment_county_poverty_longitudinal.csv"))

county_sub_race <- final_data_county_sub %>% 
  filter(subgroup_type %in% c("all", "race-ethnicity"))

write_csv(county_sub_race, here::here("06_neighborhoods", "environment", "data", "final", "environment_county_race-ethnicity_longitudinal.csv"))
```

## Place

Save place all and place subgroup data for 2019

```{r}
write_csv(final_data_place_all, here::here("06_neighborhoods", "environment", "data", "final", "environment_place_longitudinal.csv"))

final_data_place_pov <- final_data_place %>% 
  filter(subgroup_type %in% c("all", "poverty"))

write_csv(final_data_place_pov, here::here("06_neighborhoods", "environment", "data", "final", "environment_place_poverty_longitudinal.csv"))

final_data_place_race <- final_data_place %>% 
  filter(subgroup_type %in% c("all", "race-ethnicity"))

write_csv(final_data_place_race, here::here("06_neighborhoods", "environment", "data", "final", "environment_place_race-ethnicity_longitudinal.csv"))
```
