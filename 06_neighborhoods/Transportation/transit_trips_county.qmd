---
title: "Transportation Trips County"
author: "Tina Chelidze"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

*2024-2025 Mobility Metrics update* 

SUMMARY-LEVEL VALUES 

Raw data pulled from https://htaindex.cnt.org/download/ The Housing and Transportation (H+T) Affordability Index from the Center for Neighborhood Technology (CNT)

*User Notice: This program requires downloading raw files from the Metrics_2024_round Box folder prior to running. See details under the Read Data section.*

## Housekeeping

Read in packages for use.

```{r}
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(purrr)
library(tidycensus)
```

Read in final evaluation function forlater
```{r}
source(here::here("functions", "testing", "evaluate_final_data.R"))
```

## Read data

The data from HUD cannot be easily read directly into this program.
Before running, please download the files below from the following [Box
folder](https://urbanorg.app.box.com/folder/250262697073) into the
repository folder. To do this, you will have to create a "data" folder within
the transportation folder. This data folder will not be published outside your 
branch as it is gitignored (to preserve the file structure as only for code, not
raw data files).
`"mobility-from-poverty\06_neighborhoods\Transportation\data"`

-   htaindex2015_data_counties.csv
-   htaindex2019_data_counties.csv
-   htaindex2020_data_counties.csv

Import all the files (and/or combine into one file) with only the
relevant variables and years

FOR COUNTIES - import the raw data files

Unlike for Places and Tracts, the CNT website allows you to download raw
data for all counties at once so we just import the all-county file for
the two available years; 2015 and 2019

### 2015

```{r}
transport_county_2015 <- read_csv(here::here("06_neighborhoods",
                                             "Transportation", 
                                             "data", 
                                             "htaindex2015_data_counties.csv"))
```

Create correct FIPS columns.

```{r}
transport_county_2015 <- transport_county_2015 %>%
  mutate(
    state = substr(county, start = 2, stop = 3),
    county = substr(county, start = 4, stop = 6)
  )
```

Keep only variables of interest

```{r}
transit_trips_county_2015 <- transport_county_2015 %>%
  select(state, county, blkgrps, population, households, transit_trips_80ami)
```

### 2019

```{r}
transport_county_2019 <- read_csv(here::here("06_neighborhoods",
                                             "Transportation", 
                                             "data", 
                                             "htaindex2019_data_counties.csv"))

transport_county_2019 <- transport_county_2019 %>%
  select(county, blkgrps, population, households, transit_trips_80ami)
```

Create correct FIPS columns

```{r}
transport_county_2019 <- transport_county_2019 %>%
  mutate(
    state = substr(county, start = 2, stop = 3),
    county = substr(county, start = 4, stop = 6)
  )
```

Keep only variables of interest

```{r}
transit_trips_county_2019 <- transport_county_2019 %>%
  select(state, county, blkgrps, population, households, transit_trips_80ami)
```


### 2020

```{r}
transport_county_2020 <- read_csv(here::here("06_neighborhoods",
                                             "Transportation", 
                                             "data", 
                                             "htaindex2020_data_counties.csv"))

transport_county_2020 <- transport_county_2020 %>%
  select(county, blkgrps, population, households, transit_trips_80ami)
```

Create correct FIPS columns

```{r}
transport_county_2020 <- transport_county_2020 %>%
  mutate(
    state = substr(county, start = 2, stop = 3),
    county = substr(county, start = 4, stop = 6)
  )
```

Keep only variables of interest

```{r}
transit_trips_county_2020 <- transport_county_2020 %>%
  select(state, county, blkgrps, population, households, transit_trips_80ami)
```



Compare to our official county file to make sure we have all counties
accounted for Bring in the official county file

```{r}
counties <- read_csv(here::here("geographic-crosswalks", 
                                "data", 
                                "county-populations.csv"))
```

```{r}
counties_2015 <- counties %>%
  filter(year == 2015)
cat("Number of rows in counties_2015:", nrow(counties_2015), "\n")

counties_2019 <- counties %>%
  filter(year == 2019)
cat("Number of rows in counties_2019:", nrow(counties_2019), "\n")

counties_2020 <- counties %>%
  filter(year == 2020)
cat("Number of rows in counties_2020:", nrow(counties_2020), "\n")

```

All county files have the same number of observations as their corresponding year's
transportation files, so no merging needed to account for missings!
Note: 2020 has one more observation than 2015 and 2019 because one Alaskan county split into two that year.


## Quality Control Checks

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

County-Level Transit Trips 2015

```{r}
ggplot(transit_trips_county_2015, aes(x=transit_trips_80ami)) + geom_histogram(binwidth=5) + labs(y="number of counties", x="Annual Transit Trips for the Regional Moderate Income Household, 2015")
```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport.

Look at summary stats

```{r}
summary(transit_trips_county_2015$transit_trips_80ami)
```

Examine outliers

```{r}
transit_trips_county_2015_outliers <- transit_trips_county_2015 %>% 
  filter(transit_trips_80ami>250)
```

1057 trips in 38059 county -- Morton County, North Dakota -- seems to be
a railroad town... 1300 trips in 36047 -- Kings County, New York -- this
is Brooklyn, makes total sense all the highest ones(1000+) are in New
York counties - checks out 313 trips in 06037 -- Los Angeles county,
California - checks out

Use stopifnot to check if all values in "transit_trips_county_2015" are
non-negative

```{r}
stopifnot(min(transit_trips_county_2015$transit_trips_80ami, na.rm = TRUE) >= 0)
```

Good to go.

Find indices of missing values for the "transit_trips_80ami" variable.

```{r}
missing_indices <- which(is.na(transit_trips_county_2015$transit_trips_80ami))

```

Print observations with missing values.

```{r}
if (length(missing_indices) > 0) {
  cat("Observations with missing values for transit_trips_80ami:\n")
  print(transit_trips_county_2015[missing_indices, , drop = FALSE])
} else {
  cat("No missing values for transit_trips_county_2015.\n")
}
```

One missing value: Loving County, Texas (FIPS 48301).


County-Level Transit Trips 2019

```{r}
ggplot(transit_trips_county_2019, aes(x=transit_trips_80ami)) + geom_histogram(binwidth=5) + labs(y="number of counties", x="Annual Transit Trips for the Regional Moderate Income Household, 2019")
```

Looks similar, checks out.

Look at summary stats.

```{r}
summary(transit_trips_county_2019$transit_trips_80ami)  
```

Examine outliers

```{r}
transit_trips_county_2019_outliers <- transit_trips_county_2019 %>% 
  filter(transit_trips_80ami>250) %>%
  arrange(desc(transit_trips_80ami))
```

1160 trips in 42101 county - Bowling Green, Kentucky. GObg, Bowling
Green's public transit system, provides para-transit service throughout
the City of Bowling Green 2105 trips in 25025 county - Suffolk County,
MA - Boston metro area, makes sense 1150 trips in 11001 county -
Washington DC, makes sense all the highest ones(1000+) are in New York
counties - checks out

Use stopifnot to check if all values in "transit_trips_county_2019" are
non-negative

```{r}
stopifnot(min(transit_trips_county_2019$transit_trips_80ami, na.rm = TRUE) >= 0)
```

Good to go

Find indices of missing values for the "transit_trips_80ami" variable

```{r}
missing_indices <- which(is.na(transit_trips_county_2019$transit_trips_80ami))
```

Print observations with missing values

```{r}
if (length(missing_indices) > 0) {
  cat("Observations with missing values for transit_trips_80ami:\n")
  print(transit_trips_county_2019[missing_indices, , drop = FALSE])
} else {
  cat("No missing values for transit_trips_county_2019\n")
}
```

No missing values for 2019.


County-Level Transit Trips 2020

```{r}
ggplot(transit_trips_county_2020, aes(x=transit_trips_80ami)) + geom_histogram(binwidth=5) + labs(y="number of counties", x="Annual Transit Trips for the Regional Moderate Income Household, 2020")
```

Looks similar, checks out.

Look at summary stats.

```{r}
summary(transit_trips_county_2020$transit_trips_80ami)  
```

Examine outliers

```{r}
transit_trips_county_2020_outliers <- transit_trips_county_2020 %>% 
  filter(transit_trips_80ami>250) %>%
  arrange(desc(transit_trips_80ami))
```

County 25025 is Sufoflk County, MA - robust transit system, dense population
County 06075 is San Francisco County, CA - same
County 36085 is Richmond County, New York, eg Staten Island - same
County 47141 is Putnam County, Tennessee - Upper Cumberland Area Rural Transit System (U-CARTS) 

Use stopifnot to check if all values in "transit_trips_county_2020" are
non-negative

```{r}
stopifnot(min(transit_trips_county_2020$transit_trips_80ami, na.rm = TRUE) >= 0)
```

Good to go

Find indices of missing values for the "transit_trips_80ami" variable

```{r}
missing_indices <- which(is.na(transit_trips_county_2020$transit_trips_80ami))
```

Print observations with missing values

```{r}
if (length(missing_indices) > 0) {
  cat("Observations with missing values for transit_trips_80ami:\n")
  print(transit_trips_county_2020[missing_indices, , drop = FALSE])
} else {
  cat("No missing values for transit_trips_county_2019\n")
}
```

One missing value for 2020 - county FIPS 48243, Davis County, TX.


### Create national percentile ranking for 'transit_trips_80ami'

```{r}
transit_trips_county_2015 <- transit_trips_county_2015 %>%
  mutate(rank = rank(transit_trips_80ami),
         percentile_rank = (rank - 1) / (n() - 1) * 100,
         percentile_rank = round(percentile_rank, 2)) %>%
  rename(index_transit_trips = percentile_rank)

transit_trips_county_2019 <- transit_trips_county_2019 %>%
  mutate(rank = rank(transit_trips_80ami),
         percentile_rank = (rank - 1) / (n() - 1) * 100,
         percentile_rank = round(percentile_rank, 2)) %>%
  rename(index_transit_trips = percentile_rank)

transit_trips_county_2020 <- transit_trips_county_2020 %>%
  mutate(rank = rank(transit_trips_80ami),
         percentile_rank = (rank - 1) / (n() - 1) * 100,
         percentile_rank = round(percentile_rank, 2)) %>%
  rename(index_transit_trips = percentile_rank)

```

## Data Quality Marker

Determine data quality cutoffs based on number of observations (all at
the HH level for these values).

```{r}
summary(transit_trips_county_2015$households) 
summary(transit_trips_county_2019$households) 
summary(transit_trips_county_2020$households) 
```

We use a 30 HH cutoff for Data Quality 3 for the ACS variables, so for
the sake of consistency, since none of these are less than 30 (all
minimum values are at least 30 HHs), Data Quality can be 1 for all these
observations

```{r}
transit_trips_county_2015 <- transit_trips_county_2015 %>%
  mutate(index_transit_trips_quality = ifelse(households > 30, 1, 3))
cat("Number of rows in transit_trips_county_2015:", nrow(transit_trips_county_2015), "\n")

transit_trips_county_2019 <- transit_trips_county_2019 %>%
  mutate(index_transit_trips_quality = ifelse(households > 30, 1, 3))
cat("Number of rows in transit_trips_county_2019:", nrow(transit_trips_county_2019), "\n")

transit_trips_county_2020 <- transit_trips_county_2020 %>%
  mutate(index_transit_trips_quality = ifelse(households > 30, 1, 3))
cat("Number of rows in transit_trips_county_2020:", nrow(transit_trips_county_2020), "\n")

```

3142 observations in 2015 and 2019; 3143 observations in 2020. As expected.


## Export final files

Add a variable for the year of the data.

```{r}
transit_trips_county_2015 <- transit_trips_county_2015 %>%
  mutate(
    year = 2015
  )
transit_trips_county_2019 <- transit_trips_county_2019 %>%
  mutate(
    year = 2019
  )
transit_trips_county_2020 <- transit_trips_county_2020 %>%
  mutate(
    year = 2020
  )

```

Combine the three years into one overall file.

```{r}
transit_trips_county <- rbind(transit_trips_county_2015, transit_trips_county_2019, transit_trips_county_2020)
cat("Number of rows in transit_trips_county:", nrow(transit_trips_county), "\n")

```

9427 observations -- correct (3142 + 3142 + 3143)

Keep variables of interest and order them appropriately.

```{r}
transit_trips_county <- transit_trips_county %>%
  select(year, state, county, index_transit_trips, index_transit_trips_quality) %>%
  arrange(year, state, county, index_transit_trips, index_transit_trips_quality)
```

Save as non-subgroup all-year files.

```{r}
write_csv(transit_trips_county, here::here("06_neighborhoods", 
                                           "Transportation", 
                                           "final", 
                                           "transit_trips_all_county.csv"))
```

Run final data test function:

```{r}
evaluate_final_data(exp_form_path = "10a_final-evaluation/evaluation_form_transit_trips_all_county_TC.csv",
                data = transit_trips_county,  geography = "county",
                subgroups = FALSE, confidence_intervals = FALSE)
```
