---
title: "Transit Trips and Transportation Costs -- County"
author: "Tina Chelidze and Aaron R. Williams"
abstract: This script calculates `share_transportation_cost` and `share_transit_commuter` using Center for Neighborhood Technology (CNT) and Census Bureau data. 
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

::: {.callout-tip}
Raw CNT data pulled from https://htaindex.cnt.org/download/. 

1. Navigate to the data download page. 
2. Select "County".
3. Download the data for all counties. 

To save time, we store data on Box in Metrics_2024_round/. See details under the Read Data section.*
:::

## Setup

### Load Packages

```{r}
library(tidyverse)
library(tidycensus)
library(here)

source(here("functions", "testing", "evaluate_final_data.R"))

theme_set(theme_minimal())

options(scipen = 999)

```

### Read data

Before running, please download the files below from the following [Box
folder](https://urbanorg.app.box.com/folder/250262697073) into the
repository folder
`"mobility-from-poverty/06_neighborhoods/transportation/data/"`

- htaindex2015_data_counties.csv
- htaindex2019_data_counties.csv
- htaindex2022_data_counties.csv   

Import all the files (and/or combine into one file) with only the
relevant variables and years

```{r}
read_transportation_data <- function(year) {
  
  data <- read_csv(
    here("06_neighborhoods",
         "Transportation", 
         "data", 
         str_glue("htaindex{year}_data_counties.csv"))
  ) |>
    mutate(year = year)
  
  return(data)
  
}

transport_county <- map_dfr(
  .x = c(2015, 2019, 2022),
  .f = read_transportation_data
)

```

## Clean Data

Create correct FIPS variables.

```{r}
transport_county <- transport_county |>
  mutate(
    state = substr(county, start = 2, stop = 3),
    county = substr(county, start = 4, stop = 6)
  )
```

Only keep variables of interest. `pct_transit_commuters_80ami` is "Transit Ridership % of Workers for the Regional Moderate Household." `t_80ami` is "Transportation Costs % Income for the Regional Typical Household."

```{r}
transportation_county <- transport_county |>
  select(year, state, county, blkgrps, population, households, pct_transit_commuters_80ami, t_80ami)
```

Load our target counties file to compare the transportation counties to the counties we need for 2015, 2019, and 2022.

```{r}
counties <- read_csv(
  here("geographic-crosswalks", "data", "county-populations.csv")
) |>
  filter(year %in% c(2015, 2019, 2022))

```

Test the counties.

```{r}
stopifnot(
  full_join(transportation_county, counties, by = c("year", "state", "county")) |>
    nrow() == 
  nrow(counties)
)
  
stopifnot(
  anti_join(transportation_county, counties, by = c("year", "state", "county")) |>
    nrow() == 0
)

```

As shown by `full_join()` and `anti_join()`, the transportation data contain the counties included in the target counties file, so we don't need to merge the data. 

```{r}
transportation_county <- transportation_county |>
  rename(
    share_transit_commuter = pct_transit_commuters_80ami,
    share_transportation_cost = t_80ami
  )

```

We transform transportation cost from an unlabeled percentage to a proportion. 

```{r}
transportation_county <- transportation_county |>
  mutate(
    share_transit_commuter = share_transit_commuter / 100,
    share_transportation_cost = share_transportation_cost / 100
  )

```

## Transit Trips Quality Control Checks

### Missing Data

```{r}
transportation_county |>
  filter(is.na(share_transit_commuter))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_county` are
non-negative

```{r}
stopifnot(min(transportation_county$share_transit_commuter, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_county, aes(x = share_transit_commuter)) +
  geom_histogram() + 
  facet_wrap(~ year, nrow = 2) +
  labs(
    x = "Annual Transit Trips for the Regional Moderate Income Household", 
    y = "number of counties"
  )
```

Most counties have really low transit trip numbers. Some counties are extreme values. 

Look at summary stats

```{r}
summary(transportation_county$share_transit_commuter)
```

Examine extreme values

```{r}
transportation_county |>
  group_by(year) |>
  slice_max(n = 10, order_by = share_transit_commuter) |>
  select(-population, -share_transportation_cost) |>
  print(n = Inf)

```

### Change

```{r}
transportation_county |>
  filter(year %in% c(2015, 2019)) |>
  select(state, county, year, households, share_transit_commuter) |>
  pivot_wider(
    names_from = year, 
    values_from = c(households, share_transit_commuter)
  ) |>
  mutate(size = if_else(households_2019 > 200000, "Large counties", "Small counties")) |>
  ggplot(aes(share_transit_commuter_2015, share_transit_commuter_2019, size = households_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 200,000 households")

transportation_county |>
  filter(year %in% c(2019, 2022)) |>
  select(state, county, year, households, share_transit_commuter) |>
  pivot_wider(
    names_from = year, 
    values_from = c(households, share_transit_commuter)
  ) |>
  mutate(size = if_else(households_2022 > 200000, "Large counties", "Small counties")) |>
  filter(!is.na(households_2022)) |>
  ggplot(aes(share_transit_commuter_2019, share_transit_commuter_2022, size = households_2022)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 200,000 households")

```

Examine extreme changes. 

```{r}
transportation_county |>
  group_by(state, county) |>
  mutate(share_transit_commuter_change = share_transit_commuter - lag(share_transit_commuter)) |>
  ungroup() |>
  filter(year %in% c(2019, 2022)) |>
  slice_max(order_by = abs(share_transit_commuter_change), n = 10) |>
  select(year, state, county, households, share_transit_commuter, share_transit_commuter_change) |>
  print(n = Inf)

```

## Cost Quality Control Checks

### Missing Data

```{r}
transportation_county |>
  filter(is.na(share_transportation_cost))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_county` are
non-negative

```{r}
stopifnot(min(transportation_county$share_transportation_cost, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_county, aes(x = share_transportation_cost)) +
  geom_histogram() + 
  facet_wrap(~ year, nrow = 2) +
  labs(
    x = "Annual Transportation Costs for the Regional Moderate Income Household", 
    y = "number of counties"
  )

```

Look at summary stats

```{r}
summary(transportation_county$share_transportation_cost)
```

Examine extreme values

```{r}
transportation_county |>
  group_by(year) |>
  slice_max(n = 10, order_by = share_transportation_cost) |>
  select(-population, -share_transit_commuter) |>
  print(n = Inf)

```

### Change

```{r}
transportation_county |>
  filter(year %in% c(2015, 2019)) |>
  select(state, county, year, households, share_transportation_cost) |>
  pivot_wider(
    names_from = year, 
    values_from = c(households, share_transportation_cost)
  ) |>
  mutate(size = if_else(households_2019 > 200000, "Large counties", "Small counties")) |>
  ggplot(aes(share_transportation_cost_2015, share_transportation_cost_2019, size = households_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 200,000 households")

transportation_county |>
  filter(year %in% c(2019, 2022)) |>
  select(state, county, year, households, share_transportation_cost) |>
  pivot_wider(
    names_from = year, 
    values_from = c(households, share_transportation_cost)
  ) |>
  filter(!is.na(households_2022)) |>
  mutate(size = if_else(households_2022 > 200000, "Large counties", "Small counties")) |>
  ggplot(aes(share_transportation_cost_2019, share_transportation_cost_2022, size = households_2022)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 200,000 households")

```

Examine extreme changes.

```{r}
transportation_county |>
  group_by(state, county) |>
  mutate(share_transportation_cost_change = share_transportation_cost - lag(share_transportation_cost)) |>
  ungroup() |>
  filter(year %in% c(2019, 2022)) |>
  slice_max(order_by = abs(share_transportation_cost_change), n = 10) |>
  select(year, state, county, households, share_transportation_cost, share_transportation_cost_change) |>
  print(n = Inf)

```

## Data Quality Marker

We used to use `B00002_001`, which is the UNWEIGHTED SAMPLE HOUSING UNITS for the data quality measure. This variable was [discontinued](https://www.census.gov/programs-surveys/acs/technical-documentation/user-notes/2020-05.html) after 2018. H+T doesn't report margins of error. Median household income (`B19013_001`) is an important predictor in H+T's models so we use the coefficient of variation for median household income to determine data quality. 

```{r}
acs_sample_size <- bind_rows(
  `2015` = get_acs(
    geography = "county",
    variables = c("B00002_001", "B19013_001"),
    year = 2015,
    survey = "acs5",
    output = "wide"
  ),
  `2019` = get_acs(
    geography = "county",
    variables = "B19013_001",
    year = 2019,
    survey = "acs5",
    output = "wide"
  ),
  `2022` = get_acs(
    geography = "county",
    variables = "B19013_001",
    year = 2022,
    survey = "acs5",
    output = "wide"
  ),
  .id = "year"
) |>
  rename(
    sample_size = B00002_001E,
    med_hh_income = B19013_001E,
    med_hh_income_moe = B19013_001M,
  ) |>
  mutate(
    year = as.numeric(year),
    state = str_sub(GEOID, start = 1, end = 2),
    county = str_sub(GEOID, start = 3, end = 5)
  )

```

```{r}
acs_sample_size <- acs_sample_size |>
  # turn a 90% MOE into a standard error
  mutate(med_hh_income_se = med_hh_income_moe / qnorm(0.95)) |>
  # calculate the coefficient of variation
  mutate(med_hh_income_cv = med_hh_income_se / med_hh_income) |>
  select(-med_hh_income, -med_hh_income_se, -med_hh_income_moe)

```

```{r}
transportation_county <- left_join(
  transportation_county,
  acs_sample_size,
  by = c("year", "state", "county")
)

```

Determine data quality cutoffs based on number of observations (all at the HH level for these values).

```{r}
summary(transportation_county$med_hh_income_cv) 

```

Elsewhere, we use 0.2 and 0.4 as cutoffs for the coefficient of variation. These metrics contain extra uncertainty from other variables and modelings, so we 0.1 and 0.3 as cutoffs. 

```{r}
transportation_county <- transportation_county |>
  mutate(
    share_transit_commuter_quality = case_when(
      med_hh_income_cv < 0.1 ~ 1,
      med_hh_income_cv < 0.3 ~ 2,
      TRUE ~ 3
    ),
    share_transportation_cost_quality  = case_when(
      med_hh_income_cv < 0.1 ~ 1,
      med_hh_income_cv < 0.3 ~ 2,
      TRUE ~ 3
    )
  )

```

Suppress data quality flags if the metric is missing.

```{r}
transportation_county <- transportation_county |>
  mutate(
    share_transit_commuter_quality = 
      if_else(is.na(share_transit_commuter), NA, share_transit_commuter_quality), 
    share_transportation_cost_quality = 
      if_else(is.na(share_transportation_cost), NA, share_transportation_cost_quality), 
  )

```

Examine the data quality flags. 

```{r}
count(transportation_county, year, share_transit_commuter_quality)

count(transportation_county, year, share_transportation_cost_quality)

```

Confirm there isn't a mismatch between missing values and missing quality flags.

```{r}
stopifnot(
  transportation_county |>
    filter(
      (!is.na(share_transit_commuter) & is.na(share_transit_commuter_quality)) |
        (!is.na(share_transportation_cost) & is.na(share_transportation_cost_quality))
    ) |>
    nrow() == 0
)

stopifnot(
  transportation_county |>
    filter(
      (is.na(share_transit_commuter) & !is.na(share_transit_commuter_quality)) |
        (is.na(share_transportation_cost) & !is.na(share_transportation_cost_quality))
    ) |>
    nrow() == 0
)

```

## Test Final File

Keep variables of interest and order them appropriately.

```{r}
final_data <- transportation_county |>
  select(year, state, county, share_transit_commuter, share_transit_commuter_quality, share_transportation_cost, share_transportation_cost_quality) |>
  arrange(year, state, county) 

```

Run the evaluation function. 

```{r}
evaluate_final_data(
  exp_form_path = here("10a_final-evaluation", "evaluation_form_transportation.csv"), 
  data = final_data, 
  geography = "county",
  confidence_intervals = FALSE
)

```

Write the final data.

```{r}

final_data |>
  write_csv(
    here("06_neighborhoods", 
         "Transportation", 
         "final", 
         "transportation_all_county.csv")
  )

```
