---
title: "Transit Trips and Transportation Costs -- County"
author: "Tina Chelidze and Aaron R. Williams"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

::: {.callout-tip}
Raw data pulled from https://htaindex.cnt.org/download/ The Housing and Transportation (H+T) Affordability Index from the Center for Neighborhood Technology (CNT)
:::

::: {.callout-tip}
*User Notice: This program requires downloading raw files from the Metrics_2024_round Box folder prior to running. See details under the Read Data section.*

:::

## Setup

### Load Packages

```{r}
library(tidyverse)
library(tidycensus)
library(here)

source(here("functions", "testing", "evaluate_final_data.R"))

theme_set(theme_minimal())

```

### Read data

Before running, please download the files below from the following [Box
folder](https://urbanorg.app.box.com/folder/250262697073) into the
repository folder
`"mobility-from-poverty\06_neighborhoods\Transportation\data"`

-   htaindex2015_data_counties.csv
-   htaindex2019_data_counties.csv

Import all the files (and/or combine into one file) with only the
relevant variables and years

```{r}
transport_county_2015 <- read_csv(
  here("06_neighborhoods",
       "Transportation", 
       "data", 
       "htaindex2015_data_counties.csv")
)

transport_county_2019 <- read_csv(
  here("06_neighborhoods",
       "Transportation", 
       "data", 
       "htaindex2019_data_counties.csv")
)

transport_county <- bind_rows(
  `2015` = transport_county_2015,
  `2019` = transport_county_2019,
  .id = "year"
) |>
  mutate(year = as.numeric(year))

rm(transport_county_2015, transport_county_2019)
```

## Clean Data

Create correct FIPS columns.

```{r}
transport_county <- transport_county |>
  mutate(
    state = substr(county, start = 2, stop = 3),
    county = substr(county, start = 4, stop = 6)
  )
```

Only keep variables of interest.

```{r}
transportation_county <- transport_county |>
  select(year, state, county, blkgrps, population, households, transit_trips_80ami, t_80ami)
```

Compare to our official county file to make sure we have all needed counties. 

```{r}
counties <- read_csv(here("geographic-crosswalks", 
                          "data", 
                          "county-populations.csv"))
```

```{r}
counties <- counties |>
  filter(year %in% c(2015, 2019))

```

```{r}
stopifnot(
  full_join(transportation_county, counties, by = c("year", "state", "county")) |>
    nrow() == 
  nrow(counties)
)
  
stopifnot(
  anti_join(transportation_county, counties, by = c("year", "state", "county")) |>
    nrow() == 0
)

```

As shown by `full_join()` and `anti_join()`, the transportation data contain the correct counties, so we don't need to merge the data. 

```{r}
transportation_county <- transportation_county |>
  rename(
    count_transit_trips = transit_trips_80ami,
    index_transportation_cost = t_80ami
  )

```

## Transit Trips Quality Control Checks

### Missing Data

```{r}
transportation_county |>
  filter(is.na(count_transit_trips))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_county` are
non-negative

```{r}
stopifnot(min(transportation_county$count_transit_trips, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_county, aes(x = count_transit_trips)) +
  geom_histogram(binwidth = 5) + 
  facet_wrap(~ year, nrow = 2) +
  labs(
    x = "Annual Transit Trips for the Regional Moderate Income Household", 
    y = "number of counties"
  )
```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport

Look at summary stats

```{r}
summary(transportation_county$count_transit_trips)
```

Examine extreme values

```{r}
transportation_county |>
  group_by(year) |>
  slice_max(n = 10, order_by = count_transit_trips)

```

### Change

```{r}
transportation_county |>
  select(state, county, year, households, count_transit_trips) |>
  pivot_wider(
    names_from = year, 
    values_from = c(households, count_transit_trips)
  ) |>
  mutate(size = if_else(households_2019 > 200000, "Large counties", "Small counties")) |>
  ggplot(aes(count_transit_trips_2015, count_transit_trips_2019, size = households_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 200,000 households")


transportation_county |>
  group_by(state, county) |>
  mutate(count_transit_trips_change = count_transit_trips - lag(count_transit_trips)) |>
  ungroup() |>
  filter(year == 2019) |>
  slice_max(order_by = abs(count_transit_trips_change), n = 10)

```

## Cost Quality Control Checks

### Missing Data

```{r}
transportation_county |>
  filter(is.na(index_transportation_cost))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_county` are
non-negative

```{r}
stopifnot(min(transportation_county$index_transportation_cost, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_county, aes(x = index_transportation_cost)) +
  geom_histogram(binwidth = 5) + 
  facet_wrap(~ year, nrow = 2) +
  labs(
    x = "Annual Transportation Costs for the Regional Moderate Income Household", 
    y = "number of counties"
  )

```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport

Look at summary stats

```{r}
summary(transportation_county$index_transportation_cost)
```

Examine extreme values

```{r}
transportation_county |>
  group_by(year) |>
  slice_max(n = 10, order_by = index_transportation_cost)

```

### Change

```{r}
transportation_county |>
  select(state, county, year, households, index_transportation_cost) |>
  pivot_wider(
    names_from = year, 
    values_from = c(households, index_transportation_cost)
  ) |>
  mutate(size = if_else(households_2019 > 200000, "Large counties", "Small counties")) |>
  ggplot(aes(index_transportation_cost_2015, index_transportation_cost_2019, size = households_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 200,000 households")


transportation_county |>
  group_by(state, county) |>
  mutate(index_transportation_cost_change = index_transportation_cost - lag(index_transportation_cost)) |>
  ungroup() |>
  filter(year == 2019) |>
  slice_max(order_by = abs(index_transportation_cost_change), n = 10)

```

## Data Quality Marker

We pull `B00002_001`, which is the UNWEIGHTED SAMPLE HOUSING UNITS for the data quality measure. This series discontinues in the 2019, so we use 2018 as an approximation for 2019.

```{r}
acs_sample_size <- bind_rows(
  `2015` = get_acs(
    geography = "county",
    variables = "B00002_001",
    year = 2015,
    survey = "acs5",
    output = "wide"
  ),
  `2019` = get_acs(
    geography = "county",
    variables = "B00002_001",
    year = 2018,
    survey = "acs5",
    output = "wide"
  ),
  .id = "year"
) |>
  rename(sample_size = B00002_001E) |>
  mutate(
    year = as.numeric(year),
    state = str_sub(GEOID, start = 1, end = 2),
    county = str_sub(GEOID, start = 3, end = 5)
  )

transportation_county <- left_join(
  transportation_county,
  acs_sample_size,
  by = c("year", "state", "county")
)

```

Determine data quality cutoffs based on number of observations (all at the HH level for these values).

```{r}
summary(transportation_county$sample_size) 

```

We use a 30 HH cutoff for Data Quality 3 for the ACS variables, so for
the sake of consistency, since none of these are less than 30 (all
minimum values are at least 30 HHs), Data Quality can be 1 for all these
observations

```{r}
transportation_county <- transportation_county |>
  mutate(
    count_transit_trips_quality = ifelse(sample_size > 30, 1, 3),
    index_transportation_cost_quality = ifelse(sample_size > 30, 1, 3)
  )

```

## Test Final File

Keep variables of interest and order them appropriately.

```{r}
final_data <- transportation_county |>
  select(year, state, county, count_transit_trips, count_transit_trips_quality, index_transportation_cost, index_transportation_cost_quality) |>
  arrange(year, state, county) 

```

Run the evaluation function. 

```{r}
evaluate_final_data(
  exp_form_path = here("06_neighborhoods", 
       "Transportation", 
       "final", 
       "final_data_evaluation_form.csv"), 
  data = final_data, 
  geography = "county",
  confidence_intervals = FALSE
)

```

Write the final data.

```{r}

final_data |>
  write_csv(
    here("06_neighborhoods", 
         "Transportation", 
         "final", 
         "transportation_all_county.csv")
  )

```
