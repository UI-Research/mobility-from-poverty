---
title: "Transit Trips and Transportation Costs -- City"
author: "Tina Chelidze and Aaron R. Williams"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

::: {.callout-tip}
Raw data pulled from https://htaindex.cnt.org/download/ The Housing and Transportation (H+T) Affordability Index from the Center for Neighborhood Technology (CNT)
:::

::: {.callout-tip}
*User Notice: This program requires downloading raw files from the Metrics_2024_round Box folder prior to running. See details under the Read Data section.*

:::

## Setup

### Load Packages

```{r}
library(tidyverse)

theme_set(theme_minimal())

```

### Read data

The data from HUD cannot be easily read directly into this program.
Before running, please download the entirety of the folders listed below from the following [Box
folder](https://urbanorg.app.box.com/folder/250262697073) into the
repository folder. You may be required to unzip the folders but keep the raw files in their folders. 
`"mobility-from-poverty\06_neighborhoods\Transportation\data"`

-   2015_tract
-   2019_tract

Import all the files (and/or combine into one file) with only the
relevant variables and years

```{r}
tractpath15 <- list.files(
  path = here::here("06_neighborhoods",
                    "Transportation", 
                    "data", 
                    "2015_tract"), 
  pattern = "*.csv", 
  full.names = TRUE
)

tractpath19 <- list.files(
  path = here::here("06_neighborhoods",
                    "Transportation", 
                    "data", 
                    "2019_tract"), 
  pattern = "*.csv", 
  full.names = TRUE
)

transportation_tracts <- bind_rows(
  `2015` = map_df(tractpath15, read_csv),
  `2019` = map_df(tractpath19, read_csv),
  .id = "year"
) |>
  mutate(year = as.numeric(year))

```

## Clean Data

Create correct FIPS columns.

```{r}
transportation_tracts <- transportation_tracts %>%
  rename (GEOID = tract) %>%
  mutate(
    state = substr(GEOID, start = 2, stop = 3),
    county = substr(GEOID, start = 4, stop = 6),
    tract = substr(GEOID, start = 7, stop = 12)
  )

transportation_tracts <- transportation_tracts %>%
  select(
    year, GEOID, state, county, tract, blkgrps, population, households, 
    count_transit_trips = transit_trips_80ami, 
    index_transportation_cost = t_80ami
  )

```

Many tracts have no households. We drop these tracts.

```{r}
transportation_tracts <- transportation_tracts |>
  filter(households > 0)

```

## Crosswalk to Cities

Bring in the crosswalk of interest (we want the year range to be before 2020, when tract definitions changed)

```{r}
tract_place <- read_csv(here::here("geographic-crosswalks", 
                                   "data", 
                                   "geocorr2018_tract_to_place.csv"))
```

Remove the decimal from the tract variable

```{r}
tract_place <- tract_place %>%
  mutate(tract = tract * 100)
```

Add in leading zeroes as needed

```{r}
tract_place <- tract_place %>%
  mutate(
    state = sprintf("%0.2d", as.numeric(state)),
    tract = sprintf("%0.6d", as.integer(as.character(tract))),
    placefp = sprintf("%0.5d", as.numeric(placefp)),
    county = substr(county, nchar(county) - 2, nchar(county))
  ) %>%
  rename(place = placefp)
```

NOW, aggregate the tract-level data to the place levels for each variable for each year

For when we want to: Limit to the Census Places we want 
first, bring in the places crosswalk (place-populations.csv)

```{r}
places <- read_csv(here::here("geographic-crosswalks", 
                              "data", 
                              "place-populations.csv"))
```

Filter the crosswalk to only include the places in the place destination file. 

```{r}
tract_place <- tract_place |>
  filter(paste0(state, place) %in% paste0(places$state, places$place))

# places <- places %>%
#   filter(year == 2019)
```

## Join and Aggregate

The CNT data contains tracts not included in our places. Our places include tracts not included in the CNT data. 

```{r}
anti_join(
  transportation_tracts, 
  tract_place, 
  by = c("state", "county", "tract")
)

anti_join(
  tract_place,
  transportation_tracts, 
  by = c("state", "county", "tract")
)

```

```{r}
transportation_tracts_places <- left_join(
  transportation_tracts, 
  tract_place, 
  by = c("state", "county", "tract")
)
# %>%
  # mutate(index_transportation_cost = index_transportation_cost / 100)

transportation_tracts_places <- transportation_tracts_places |>
  filter(!is.na(place))


```






Collapse to places and also create data quality marker data quality can be 1 when most of the tracts that fall in the place (e.g., >50% of the tracts) have most of their area falling in the place (e.g., >50% of the tract's area is in the place) otherwise, data quality is 2

```{r}
transportation_places <- transportation_tracts_places %>% 
  dplyr::group_by(year, state, place) %>% 
  dplyr::summarize(
    n = n(),
    count_transit_trips = weighted.mean(count_transit_trips, w = households * afact, na.rm = TRUE),
    index_transportation_cost = weighted.mean(index_transportation_cost, w = households * afact, na.rm = TRUE),
    match_pop = sum(population * afact),
    match_quality = weighted.mean(afact > 0.5, weight = households, na.rm = TRUE)
  ) %>%
  ungroup() |>
  dplyr::mutate(
    index_transportation_cost_quality = case_when(
      match_quality >= 0.5 ~ 1,
      match_quality < 0.5 ~ 2,
      TRUE ~ NA
    )
  ) |>
  mutate(count_transit_trips_quality = index_transportation_cost_quality)
  
```

Left join with places file to get rid of irrelevant places data

```{r}
transportation_city <- left_join(
  places, 
  transportation_places, 
  by = c("year", "state", "place")
) |>
  filter(year %in% c(2015, 2019))

transportation_city |>
  ggplot(aes(population, match_pop)) +
  geom_abline(color = "red") +
  geom_point(alpha = 0.2) +
  labs(
    title = "Points on the line suggest high-quality"
  )

```

```{r}
map_dbl(transportation_city, ~sum(is.na(.x)))


```



## Transit Trips Quality Control Checks

### Missing Data

```{r}
transportation_city |>
  filter(is.na(count_transit_trips))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_city` are non-negative.

```{r}
stopifnot(min(transportation_city$count_transit_trips, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_city, aes(x = count_transit_trips)) +
  geom_histogram(binwidth = 5) + 
  facet_wrap(~ year, nrow = 2) +
  labs(
    x = "Annual Transit Trips for the Regional Moderate Income Household", 
    y = "number of counties"
  )
```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport

Look at summary stats

```{r}
summary(transportation_city$count_transit_trips)
```

Examine extreme values

```{r}
transportation_city |>
  group_by(year) |>
  slice_max(n = 10, order_by = count_transit_trips)

```

1057 trips in 38059 county -- Morton County, North Dakota -- seems to be
a railroad town... 1300 trips in 36047 -- Kings County, New York -- this
is Brooklyn, makes total sense all the highest ones(1000+) are in New
York counties - checks out 313 trips in 06037 -- Los Angeles county,
California - checks out

### Change

```{r}
transportation_city |>
  select(state, place, year, population, count_transit_trips) |>
  pivot_wider(
    names_from = year, 
    values_from = c(population, count_transit_trips)
  ) |>
  mutate(size = if_else(population_2019 > 400000, "Large cities", "Small cities")) |>
  ggplot(aes(count_transit_trips_2015, count_transit_trips_2019, size = population_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 400,000 people")


transportation_city |>
  group_by(state, place) |>
  mutate(change = count_transit_trips - lag(count_transit_trips)) |>
  ungroup() |>
  filter(year == 2019) |>
  slice_max(order_by = abs(change), n = 10)

```

## Cost Quality Control Checks

### Missing Data

```{r}
transportation_city |>
  filter(is.na(index_transportation_cost))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_city` are
non-negative

```{r}
stopifnot(min(transportation_city$index_transportation_cost, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_city, aes(x = index_transportation_cost)) +
  geom_histogram(binwidth = 5) + 
  facet_wrap(~ year, nrow = 2) +
  labs(
    x = "Annual Transportation Costs for the Regional Moderate Income Household", 
    y = "number of counties"
  )

```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport

Look at summary stats

```{r}
summary(transportation_city$index_transportation_cost)
```

Examine extreme values

```{r}
transportation_city |>
  group_by(year) |>
  slice_max(n = 10, order_by = index_transportation_cost)

```

### Change

```{r}
transportation_city |>
  select(state, place, year, population, index_transportation_cost) |>
  pivot_wider(
    names_from = year, 
    values_from = c(population, index_transportation_cost)
  ) |>
  mutate(size = if_else(population_2019 > 400000, "Large cities", "Small cities")) |>
  ggplot(aes(index_transportation_cost_2015, index_transportation_cost_2019, size = population_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 400,000 people")


transportation_city |>
  group_by(state, place) |>
  mutate(change = index_transportation_cost - lag(index_transportation_cost)) |>
  ungroup() |>
  filter(year == 2019) |>
  slice_max(order_by = abs(change), n = 10)
```

## Data Quality Marker

Data quality is calculated above using the match quality. 

## Export final files

Keep variables of interest and order them appropriately.

```{r}
transportation_city |>
  select(year, state, place, count_transit_trips, count_transit_trips_quality) |>
  arrange(year, state, place) |>
  write_csv(
    here::here("06_neighborhoods", 
               "Transportation", 
               "final", 
               "transit_trips_all_city.csv")
  )


transportation_city |>
  select(year, state, place, index_transportation_cost, index_transportation_cost_quality) %>%
  arrange(year, state, place) |>
  write_csv(
    here::here("06_neighborhoods", 
               "Transportation", 
               "final", 
               "transportation_cost_all_city.csv")
  )

```

