---
title: "Transit Trips and Transportation Costs -- City"
author: "Tina Chelidze and Aaron R. Williams"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

::: {.callout-tip}
Raw data pulled from https://htaindex.cnt.org/download/ The Housing and Transportation (H+T) Affordability Index from the Center for Neighborhood Technology (CNT)
:::

::: {.callout-tip}
*User Notice: This program requires downloading raw files from the Metrics_2024_round Box folder prior to running. See details under the Read Data section.*

:::

## Setup

### Load Packages

```{r}
library(tidyverse)
library(tidycensus)
library(here)

source(here("functions", "testing", "evaluate_final_data.R"))

theme_set(theme_minimal())

```

### Read data

Before running, please download the entirety of the folders listed below from the following [Box
folder](https://urbanorg.app.box.com/folder/250262697073) into the
repository folder. You may be required to unzip the folders but keep the raw files in their folders. 
`"mobility-from-poverty\06_neighborhoods\Transportation\data"`

- 2015_tract
- 2019_tract
- 2022_tract

```{r}
tractpath15 <- list.files(
  path = here("06_neighborhoods",
              "Transportation", 
              "data", 
              "2015_tract"), 
  pattern = "*.csv", 
  full.names = TRUE
)

tractpath19 <- list.files(
  path = here("06_neighborhoods",
              "Transportation", 
              "data", 
              "2019_tract"), 
  pattern = "*.csv", 
  full.names = TRUE
)

tractpath22 <- list.files(
  path = here("06_neighborhoods",
              "Transportation", 
              "data", 
              "2022_tract"), 
  pattern = "*.csv", 
  full.names = TRUE
)

transportation_tracts <- bind_rows(
  `2015` = map_dfr(tractpath15, read_csv),
  `2019` = map_dfr(tractpath19, read_csv),
  `2022` = map_dfr(tractpath22, read_csv),
  .id = "year"
) |>
  mutate(year = as.numeric(year))

```

## Clean Transportation Data

Create correct FIPS columns.

```{r}
transportation_tracts <- transportation_tracts |>
  rename(GEOID = tract) |>
  mutate(
    state = substr(GEOID, start = 2, stop = 3),
    county = substr(GEOID, start = 4, stop = 6),
    tract = substr(GEOID, start = 7, stop = 12)
  )

```

```{r}
transportation_tracts <- transportation_tracts |>
  mutate(GEOID = paste0(state, county, tract))

```

```{r}
transportation_tracts <- transportation_tracts |>
  select(
    year, GEOID, state, county, tract, blkgrps, population, households, 
    count_transit_trips = transit_trips_80ami, 
    index_transportation_cost = t_80ami
  )

```

Many tracts have no households. We drop these tracts.

```{r}
transportation_tracts <- transportation_tracts |>
  filter(households > 0)

```

## Clean Census Quality Data

```{r}
my_states <- fips_codes |> 
  filter(!state %in% c("PR", "UM", "VI", "GU", "AS", "MP")) |>
  pull(state) |>
  unique()

```

```{r}
acs_sample_size <- bind_rows(
  `2015` = map_dfr(
    .x = my_states,
    .f = ~ get_acs(
      geography = "tract",
      state = .x,
      variables = c("B00002_001", "B25001_001"),
      year = 2015,
      survey = "acs5",
      output = "wide"
    )
  ),
  `2019` = map_dfr(
    .x = my_states,
    .f = ~ get_acs(
      geography = "tract",
      state = .x,
      variables = c("B25001_001"),
      year = 2019,
      survey = "acs5",
      output = "wide"
    )
  ),
  `2022` = map_dfr(
    .x = my_states,
    .f = ~ get_acs(
      geography = "tract",
      state = .x,
      variables = c("B25001_001"),
      year = 2022,
      survey = "acs5",
      output = "wide"
    )
  ),
  .id = "year"
) |>
  rename(
    sample_size = B00002_001E,
    households_est = B25001_001E,
    households_moe = B25001_001M
  ) |>
  mutate(
    year = as.numeric(year),
    state = str_sub(GEOID, start = 1, end = 2),
    county = str_sub(GEOID, start = 3, end = 5)
  )
 
```

```{r}
acs_sample_size <- acs_sample_size |>
  # turn a 90% MOE into a standard error
  mutate(
    households_se = households_moe / qnorm(0.95)
  )

```

`sample_size` is only pulled for exploratory uses. 

```{r}
acs_sample_size <- acs_sample_size |>
  select(-sample_size)

```

After this, there shouldn't be any missing values.

```{r}
stopifnot(
  all(map_dbl(acs_sample_size, ~sum(is.na(.x))) == 0)
)

```


## Clean Census Demographic Data

### Pull Data

We need to pull counts of different races and ethnicities at the census tract level to identify tracts for the subgroup analysis. To do this, we pull detailed information and roll up the categories. The following table shows the race/ethnicity categories and the combination of ACS variables into our new variables.

| Variable.    | Depth       | Description    | New Variable   |
| -----|----|--------------------------------- | -------------- |
| `B03002_001` | 1 | Estimate!!Total | `total_population`   |
| `B03002_002` | 2 | Estimate!!Total!!Not Hispanic or Latino | `NA` |
| `B03002_003` | 3 | Estimate!!Total!!Not Hispanic or Latino!!White alone | `whitenh`  |
| `B03002_004` | 3 | Estimate!!Total!!Not Hispanic or Latino!!Black or African American alone | `poc`   |
| `B03002_005` | 3 | Estimate!!Total!!Not Hispanic or Latino!!American Indian and Alaska Native alone | `poc`   |
| `B03002_006` | 3 | Estimate!!Total!!Not Hispanic or Latino!!Asian alone | `poc`   |
| `B03002_007` | 3 | Estimate!!Total!!Not Hispanic or Latino!!Native Hawaiian and Other Pacific Islander alone | `poc`   |
| `B03002_008` | 3 | Estimate!!Total!!Not Hispanic or Latino!!Some other race alone | `poc`   |
| `B03002_009` | 3 | Estimate!!Total!!Not Hispanic or Latino!!Two or more races | `poc`  |
| `B03002_010` | 4 | Estimate!!Total!!Not Hispanic or Latino!!Two or more races!!Two races including Some other race | `NA` |
| `B03002_011` | 4 | Estimate!!Total!!Not Hispanic or Latino!!Two or more races!!Two races excluding Some other race, and three or more races | `NA` |
| `B03002_012` | 2 | Estimate!!Total!!Hispanic or Latino | `poc` |
| `B03002_013` | 3 | Estimate!!Total!!Hispanic or Latino!!White alone | `NA` |
| `B03002_014` | 3 | Estimate!!Total!!Hispanic or Latino!!Black or African American alone | `NA` |
| `B03002_015` | 3 | Estimate!!Total!!Hispanic or Latino!!American Indian and Alaska Native alone | `NA` |
| `B03002_016` | 3 | Estimate!!Total!!Hispanic or Latino!!Asian alone | `NA` |
| `B03002_017` | 3 | Estimate!!Total!!Hispanic or Latino!!Native Hawaiian and Other Pacific Islander alone | `NA` |
| `B03002_018` | 3 | Estimate!!Total!!Hispanic or Latino!!Some other race alone | `NA` |
| `B03002_019` | 3 | Estimate!!Total!!Hispanic or Latino!!Two or more races | `NA` |
| `B03002_020` | 4 | Estimate!!Total!!Hispanic or Latino!!Two or more races!!Two races including Some other race | `NA` |
| `B03002_021` | 4 | Estimate!!Total!!Hispanic or Latino!!Two or more races!!Two races excluding Some other race, and three or more races | `NA` |

```{r}
acs_tract_pop15 <- map_dfr(
  .x = my_states,
  .f = ~ get_acs(
    geography = "tract",
    state = .x,
    table = "B03002",
    year = 2015,
    survey = "acs5",
    output = "wide"
  )
)

acs_tract_pop19 <- map_dfr(
  .x = my_states,
  .f = ~ get_acs(
    geography = "tract",
    state = .x,
    table = "B03002",
    year = 2019,
    survey = "acs5",
    output = "wide"
  )
)

acs_tract_pop22 <- map_dfr(
  .x = my_states,
  .f = ~ get_acs(
    geography = "tract",
    state = .x,
    table = "B03002",
    year = 2022,
    survey = "acs5",
    output = "wide"
  )
)

acs_tracts <- bind_rows(
  `2015` = acs_tract_pop15,
  `2019` = acs_tract_pop19,
  `2022` = acs_tract_pop22,
  .id = "year"
) |>
  mutate(year = as.numeric(year))

acs_tracts <- acs_tracts |>
  mutate(
    state = substr(GEOID, start = 1, stop = 2),
    county = substr(GEOID, start = 3, stop = 5),
    tract = substr(GEOID, start = 6, stop = 11)
  )

```

We join the quality information to the main demographic information. 

```{r}
acs_tracts <- full_join(
  acs_tracts,
  acs_sample_size,
  by = c("year", "state", "county", "GEOID"), 
  relationship = "one-to-one"
)

```

Rename columns for clarity and calculate counts of people by different races and ethnicities. 

```{r}
acs_tracts <- acs_tracts |>  
  rename(
    total_population = B03002_001E,
    non_hispanic = B03002_002E,
    white_nh = B03002_003E,
    hispanic = B03002_012E
  ) |>
  mutate(
    poc_non_hispanic =     
      B03002_004E +
      B03002_005E +
      B03002_006E +
      B03002_007E +
      B03002_008E +
      B03002_009E
  ) |>
  mutate(poc = poc_non_hispanic + hispanic)

stopifnot(
  acs_tracts |>
    filter(total_population != (white_nh + poc_non_hispanic + hispanic)) |>
    nrow() == 0
)

stopifnot(
  acs_tracts |>
    filter(total_population != (white_nh + poc)) |>
    nrow() == 0
)

```

Keep only vars we want.

```{r}
acs_tracts <- acs_tracts |>
  select(
    year, GEOID, state, county, tract, total_population, white_nh, poc,
    households_est, households_se
  )

```

### Calculate race category

For each tract, ID the race category by calculating the proportion White, Non-Hispanic and the proportion of every other race and ethnicity. 

```{r}
acs_tracts <- acs_tracts |>
  mutate(
    prop_white_nh = white_nh / total_population,
    prop_poc = poc / total_population
  )

stopifnot(
  acs_tracts |>
    filter(prop_white_nh + prop_poc != 1) |>
    nrow() == 0
)

```

Assign race-category for each tract. These assignments should align with the debt metric.

```{r}
acs_tracts <- acs_tracts |>
  mutate(
    subgroup = case_when(
      total_population == 0 ~ "No population",
      prop_white_nh >= 0.6 ~ "White neighborhoods",
      prop_poc >= 0.6 ~ "Neighborhoods of color",
      prop_white_nh >= 0.4 | prop_poc >= 0.4 ~ "Mixed neighborhoods",
      prop_white_nh < 0.4 & prop_poc < 0.4 ~ as.character(NA)
    )
  ) 

acs_tracts |>
  count(subgroup)

```

## Merge ACS and Transportation Data

We join the ACS demographic information to the transportation information. 

```{r}
combined_tracts <- left_join(
  transportation_tracts,
  acs_tracts,
  by = c("year", "GEOID", "state", "county", "tract")
)

```

No tracts with transportation data are missing demographic data. There are demographic tracts without transportation information but this is expected because of empty tracts and tracts without households.

```{r}
anti_join(
  transportation_tracts,
  acs_tracts, 
  by = c("year", "GEOID", "state", "county", "tract")
)

anti_join(
  acs_tracts, 
  transportation_tracts, 
  by = c("year", "GEOID", "state", "county", "tract")
) |>
  filter(total_population > 0)

```

## Crosswalk Tracts to Places

Bring in the crosswalk of interest (we want the year range to be before 2020, when tract definitions changed)

```{r}
tract_place <- read_csv(
  here::here("geographic-crosswalks", "data", "geocorr2018_2010tract_to_2014place.csv")
) %>%
  rename(
    place = placefp,
    state_county = county
  ) %>%
  mutate(tract = tract * 100) |>
  mutate(
    state_county = str_pad(state_county, width = 5, side = "left", pad = "0"),
    state = str_sub(state_county, start = 1, end = 2),
    county = str_sub(state_county, start = 3, end = 5),
    tract = str_pad(tract, width = 6, side = "left", pad = "0"),
    place = str_pad(place, width = 5, side = "left", pad = "0")
  )

```

Limit to the Census Places we want first, bring in the places crosswalk (place-populations.csv).

```{r}
places <- read_csv(here("geographic-crosswalks", 
                        "data", 
                        "place-populations.csv"))
```

Filter the crosswalk to only include the places in the place destination file. 

```{r}
# tract_place <- tract_place |>
  # filter(paste0(state, place) %in% paste0(places$state, places$place))

```

The CNT data contains tons of tracts not included in our places.

```{r}
anti_join(
  combined_tracts, 
  tract_place, 
  by = c("state", "county", "tract")
) |>
  count(state, county)

```

Our places do not include tracts not included in the CNT data. 

```{r}
anti_join(
  combined_tracts,
  transportation_tracts, 
  by = c("state", "county", "tract")
) |>
  count(state, county)

```

```{r}
transportation_tracts_places <- left_join(
  combined_tracts, 
  tract_place, 
  by = c("state", "county", "tract")
)

transportation_tracts_places <- transportation_tracts_places |>
  filter(!is.na(place))

```

## Calculate metrics

Collapse to places and also create data quality marker data quality can be 1 when most of the tracts that fall in the place (e.g., >50% of the tracts) have most of their area falling in the place (e.g., >50% of the tract's area is in the place) otherwise, data quality is 2

```{r}
transportation_places_all <- transportation_tracts_places |>
  filter(subgroup != "No population") |>
  group_by(year, state, place) |>
  summarize(
    n = n(),
    count_transit_trips = weighted.mean(count_transit_trips, w = households * afact, na.rm = TRUE),
    index_transportation_cost = weighted.mean(index_transportation_cost, w = households * afact, na.rm = TRUE),
    households_est = sum(households_est * afact),
    households_se = sqrt(sum(households_se ^ 2)),
    match_pop = sum(population * afact),
    match_quality = weighted.mean(afact > 0.5, weight = households, na.rm = TRUE)
  ) |>
  ungroup() |>
  mutate(
    subgroup_type = "all",
    subgroup = "All"
  )

transportation_places_subgroup <- transportation_tracts_places |> 
  dplyr::group_by(year, state, place, subgroup) |> 
  dplyr::summarize(
    n = n(),
    count_transit_trips = weighted.mean(count_transit_trips, w = households * afact, na.rm = TRUE),
    index_transportation_cost = weighted.mean(index_transportation_cost, w = households * afact, na.rm = TRUE),
    households_est = sum(households_est * afact),
    households_se = sqrt(sum(households_se ^ 2)),
    match_pop = sum(population * afact),
    match_quality = weighted.mean(afact > 0.5, weight = households, na.rm = TRUE)
  ) |>
  ungroup() |>
  mutate(
    subgroup_type = "race-ethnicity"
  )

transportation_place <- bind_rows(
  transportation_places_all, 
  transportation_places_subgroup
)

```

Some place-race/ethnicity groups are missing. This is because some race/ethnicity groups don't exist in each place. We load the target geography file, join our statistics to the target geography file, and then add zeros for household sizes.

```{r}
target_statistics <- read_csv(here("geographic-crosswalks", "data", "place-populations.csv")) |>
  filter(year %in% c(2015, 2019, 2022)) |>
  select(year, state, place) |>
  expand_grid(subgroup = c("All", "Neighborhoods of color", "White neighborhoods", "Mixed neighborhoods")) |>
  mutate(subgroup_type = if_else(subgroup == "All", "all", "race-ethnicity"))

transportation_place <- full_join(
  target_statistics,
  transportation_place,
  by = c("year", "state", "place", "subgroup_type", "subgroup")
)

```

Left join with places file to get rid of irrelevant places data

```{r}
transportation_city <- left_join(
  places, 
  transportation_place, 
  by = c("year", "state", "place")
) |>
  filter(year %in% c(2015, 2019, 2022))

```

We drop the all category and sum the match population to the place level. We then compare this to the population from the place target file. 

```{r}
transportation_city |>
  filter(subgroup_type != "all") |>
  group_by(year, state, place) |>
  summarize(population = max(population), match_pop = sum(match_pop)) |>
  ggplot(aes(population, match_pop)) +
  geom_abline(color = "red") +
  geom_point(alpha = 0.2) +
  labs(
    title = "Points on the line suggest high-quality"
  )

```

```{r}
map_dbl(transportation_city, ~sum(is.na(.x)))

```

## Transit Trips Quality Control Checks

### Missing Data

```{r}
transportation_city |>
  filter(is.na(count_transit_trips))

```

### Distribution

Use stopifnot to check if all values in `transportation_city` are non-negative.

```{r}
stopifnot(min(transportation_city$count_transit_trips, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_city, aes(x = count_transit_trips)) +
  geom_histogram(binwidth = 5) + 
  facet_grid(year ~ subgroup) +
  labs(
    x = "Annual Transit Trips for the Regional Moderate Income Household", 
    y = "number of counties"
  )
```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport

Look at summary stats

```{r}
summary(transportation_city$count_transit_trips)
```

Examine extreme values

```{r}
transportation_city |>
  group_by(year) |>
  slice_max(n = 10, order_by = count_transit_trips)

```

### Change

```{r}
transportation_city |>
  filter(year %in% c(2015, 2019)) |>
  select(state, place, year, subgroup, population, count_transit_trips) |>
  pivot_wider(
    names_from = year, 
    values_from = c(population, count_transit_trips)
  ) |>
  mutate(size = if_else(population_2019 > 400000, "Large cities", "Small cities")) |>
  ggplot(aes(count_transit_trips_2015, count_transit_trips_2019, size = population_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 400,000 people")

transportation_city |>
  filter(year %in% c(2019, 2022)) |>
  select(state, place, year, subgroup, population, count_transit_trips) |>
  pivot_wider(
    names_from = year, 
    values_from = c(population, count_transit_trips)
  ) |>
  mutate(size = if_else(population_2022 > 400000, "Large cities", "Small cities")) |>
  ggplot(aes(count_transit_trips_2019, count_transit_trips_2022, size = population_2022)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 400,000 people")

transportation_city |>
  group_by(state, place, subgroup) |>
  mutate(change = count_transit_trips - lag(count_transit_trips)) |>
  ungroup() |>
  filter(year %in% c(2019, 2022)) |>
  slice_max(order_by = abs(change), n = 10)

```

## Cost Quality Control Checks

### Missing Data

```{r}
transportation_city |>
  filter(is.na(index_transportation_cost))

```

Loving County, Texas is missing in 2015. 

### Distribution

Use stopifnot to check if all values in `transportation_city` are
non-negative

```{r}
stopifnot(min(transportation_city$index_transportation_cost, na.rm = TRUE) >= 0)
```

Create a histogram plot and summary stats for each dataframe check that
all values are non-negative & count missing values examine outliers.

```{r}
ggplot(transportation_city, aes(x = index_transportation_cost)) +
  geom_histogram(binwidth = 5) + 
  facet_grid(year ~ subgroup) +
  labs(
    x = "Annual Transportation Costs for the Regional Moderate Income Household", 
    y = "number of counties"
  )

```

Makes sense for most counties to fall in really low transit trip numbers
since most of the US has no public infrastructure that can be used for
daily transport

Look at summary stats

```{r}
summary(transportation_city$index_transportation_cost)
```

Examine extreme values

```{r}
transportation_city |>
  group_by(year) |>
  slice_max(n = 10, order_by = index_transportation_cost)

```

### Change

```{r}
transportation_city |>
  filter(year %in% c(2015, 2019)) |>
  select(state, place, year, subgroup, population, index_transportation_cost) |>
  pivot_wider(
    names_from = year, 
    values_from = c(population, index_transportation_cost)
  ) |>
  mutate(size = if_else(population_2019 > 400000, "Large cities", "Small cities")) |>
  ggplot(aes(index_transportation_cost_2015, index_transportation_cost_2019, size = population_2019)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 400,000 people")

transportation_city |>
  filter(year %in% c(2019, 2022)) |>
  select(state, place, year, subgroup, population, index_transportation_cost) |>
  pivot_wider(
    names_from = year, 
    values_from = c(population, index_transportation_cost)
  ) |>
  mutate(size = if_else(population_2022 > 400000, "Large cities", "Small cities")) |>
  ggplot(aes(index_transportation_cost_2019, index_transportation_cost_2022, size = population_2022)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ size) +
  coord_equal() +
  labs(subtitle = "Large counties have at least 400,000 people")

transportation_city |>
  group_by(state, place, subgroup) |>
  mutate(change = index_transportation_cost - lag(index_transportation_cost)) |>
  ungroup() |>
  filter(year %in% c(2019, 2022)) |>
  slice_max(order_by = abs(change), n = 10)

```

## Data Quality Marker

```{r}
transportation_city <- transportation_city |>
  mutate(households_cv = households_se / households_est) |>
  dplyr::mutate(
    cv_quality = case_when(
      households_cv < 0.08 ~ 1,
      households_cv < 0.15 ~ 2,
      TRUE ~ 3
    ),
    match_quality = case_when(
      match_quality >= 0.5 ~ 1,
      match_quality < 0.5 ~ 2,
      TRUE ~ NA
    )
  )
  
```

Next, we load and calculate the coefficient of variation for median household income at the place level. 

```{r}
med_hh_income_cv <- bind_rows(
  `2015` = get_acs(
    geography = "place",
    variables = "B19013_001",
    year = 2015,
    survey = "acs5",
    output = "wide"
  ),
  `2019` = get_acs(
    geography = "place",
    variables = "B19013_001",
    year = 2019,
    survey = "acs5",
    output = "wide"
  ),
  `2022` = get_acs(
    geography = "place",
    variables = "B19013_001",
    year = 2022,
    survey = "acs5",
    output = "wide"
  ),
  .id = "year"
) |>
  rename(
    med_hh_income = B19013_001E,
    med_hh_income_moe = B19013_001M,
  ) |>
  mutate(
    year = as.numeric(year),
    state = str_sub(GEOID, start = 1, end = 2),
    place = str_sub(GEOID, start = 3, end = 7)
  )

med_hh_income_cv <- med_hh_income_cv |>
  mutate(med_hh_income_se = med_hh_income_moe / qnorm(0.95)) |>
  # calculate the coefficient of variation
  mutate(med_hh_income_cv = med_hh_income_se / med_hh_income) |>
  mutate(med_hh_income_cv = ifelse(is.na(med_hh_income_cv), 0.5, med_hh_income_cv)) |>
  mutate(
    income_quality = case_when(
      med_hh_income_cv < 0.1 ~ 1,
      med_hh_income_cv < 0.3 ~ 2,
      TRUE ~ 3
    )
  ) |>
  select(year, state, place, income_quality)

```

We use the worse quality between county median household income and aggregated census tracts coefficient of variation. 

```{r}
transportation_city <- left_join(
  transportation_city,
  med_hh_income_cv,
  by = c("year", "state", "place")
)

transportation_city <- transportation_city |>
  mutate(
    count_transit_trips_quality = pmax(cv_quality, income_quality, cv_quality),
    index_transportation_cost_quality = pmax(cv_quality, income_quality, cv_quality)
  ) |>
  mutate(
    count_transit_trips_quality = 
      ifelse(is.na(count_transit_trips), NA, count_transit_trips_quality),
    index_transportation_cost_quality = 
      ifelse(is.na(index_transportation_cost_quality), NA, index_transportation_cost_quality)
  )

```

```{r}
transportation_city |>
  count(year, count_transit_trips_quality)

```

## Export final files

Keep variables of interest and order them appropriately.

```{r}
final_data <- transportation_city |>
  select(
    year, state, place, count_transit_trips, count_transit_trips_quality,
    index_transportation_cost, index_transportation_cost_quality
  ) |>
  arrange(year, state, place)

```

Run the evaluation function. 

```{r}
evaluate_final_data(
  exp_form_path = here("06_neighborhoods", 
       "Transportation", 
       "final", 
       "final_data_evaluation_form.csv"), 
  data = final_data, 
  geography = "place", 
  confidence_intervals = FALSE
)

```

Write the final data.

```{r}
final_data |>
  write_csv(
    here("06_neighborhoods", 
         "Transportation", 
         "final", 
         "transportation_subgroup_city.csv")
  )

```

