---
title: "Descriptive Representation denominator"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

*Program for the creation of the Descriptive Representation Upward Mobility Predictor denominator at the County and place-level*

ACS Code: Initially written by Tina Chelidze and updated by JP Walsh 2022-2023.

Primary data derived from the IPUMS API.

Based on processes developed by Aaron Williams.

This denominator is the population count at the county and city (e.g. Census Place) level overall and by race/ethnicity groups  
 Data:  [gitfolder]/05_local-governance/descriptive-representation/data

 Steps:
 (1) Housekeeping
 (2) Pull demographics for Census Places and Census Counties from ACS 5-year 2021
 (3) Clean and reshape to move data into the vars we want
 (4) Test for errors
 (5) Create a data quality flag
 (6) Prepare the data for saving & export final Metrics files
 
## Housekeeping 

Load in the necessary libraries.
You can get a Census API key here: https://api.census.gov/data/key_signup.html
Your API key is stored in your .Renviron and can be accessed by Sys.getenv("CENSUS_API_KEY") 
You can run `readRenviron("~/.Renviron")` or census_api_key("YOURKEYHERE", install = TRUE)

```{r}
library(tidyr)
library(dplyr)
library(readr)
library(tidyverse)
#library(censusapi)
library(tidycensus)
census_api_key(Sys.getenv("CENSUS_API_KEY"), overwrite = TRUE)


#Set year of update 
update_year = 2021
```

## Pull demographics

First, list & save variables of interest as a vector.The variable definitions are listed with their ID number below.
 
 - B01003_001E # Estimate total population
 - B03003_003E # Estimate total, Hispanic and Latino
 - B03002_002E # Estimate total, not Hispanic or Latino
 - B03002_003E # Not Hispanic or Latino, White Alone
 - B03002_004E # Not Hispanic or Latino, Black of African American Alone
 - B03002_005E # Not Hispanic or Latino, American Indian and Alaska Native alone
 - B03002_006E # Not Hispanic or Latino, Asian Alone
 - B03002_007E # Not Hispanic or Latino, Native Hawaiian and Other Pacific Islander alone
 - B03002_008E # Not Hispanic or Latino, some other race alone
 - B03002_009E # Not Hispanic or Latino, two or more races

```{r}
myvars <- c(
  "B01003_001E",
  "B03003_003E", 
  "B03002_002E",
  "B03002_003E",
  "B03002_004E",
  "B03002_005E",
  "B03002_006E",
  "B03002_007E",
  "B03002_008E",
  "B03002_009E"
  )
```


Pull ACS demographic data at the Census Place and Census County levels.

```{r}
places_demo <- get_acs(geography = "place",
                       variables = myvars,
                       year = update_year)

county_demo <- get_acs(geography = "county",
                       variables = myvars,
                       year = update_year)
```


## Clean data

Drop the margin of error variable to prepare for reshaping the data.
```{r}

places_demo <- places_demo %>% 
  select(GEOID, NAME, variable, estimate)
county_demo <- county_demo %>% 
  select(GEOID, NAME, variable, estimate)

```

Reshape the datasets so we can see all the population values per row.
```{r}
wide_county_demo <- county_demo %>%
  pivot_wider(names_from = variable, values_from = estimate)

wide_places_demo <- places_demo %>%
  pivot_wider(names_from = variable, values_from = estimate)
```

Rename vars for clarity.
```{r}
wide_county_demo <- wide_county_demo %>% 
  rename(
    "total_people" = "B01003_001",
    "total_hispanic" = "B03003_003", 
    "total_nonhisp" = "B03002_002",
    "white_nonhispanic" = "B03002_003",
    "black_nonhispanic" = "B03002_004",
    "aian_nh" = "B03002_005",
    "asian_nonhispanic" = "B03002_006",
    "nhpi_nh" = "B03002_007",
    "other_nh" = "B03002_008",
    "two_or_more_nh" = "B03002_009"
  )

wide_places_demo <- wide_places_demo %>% 
  rename(
    "total_people" = "B01003_001",
    "total_hispanic" = "B03003_003", 
    "total_nonhisp" = "B03002_002",
    "white_nonhispanic" = "B03002_003",
    "black_nonhispanic" = "B03002_004",
    "aian_nh" = "B03002_005",
    "asian_nonhispanic" = "B03002_006",
    "nhpi_nh" = "B03002_007",
    "other_nh" = "B03002_008",
    "two_or_more_nh" = "B03002_009"
  )
```

The Census reports race and ethnicity as many different groups. 
Table 2 in [this publication](https://www.census.gov/prod/cen2010/briefs/c2010br-02.pdf) is helpful. 
Here, we collapse the detailed groups into the same four groups of interest from the above section. 

Construct asian_other (combined value).

```{r}
wide_county_demo <- wide_county_demo %>%
  mutate(
    asian_other = aian_nh + asian_nonhispanic + nhpi_nh + other_nh + two_or_more_nh,
  )

wide_places_demo <- wide_places_demo %>%
  mutate(
    asian_other = aian_nh + asian_nonhispanic + nhpi_nh + other_nh + two_or_more_nh,
  )

```

Keep only the vars we need.
```{r}
wide_county_demo <- wide_county_demo %>% select(GEOID, 
                                                NAME, 
                                                total_people, 
                                                total_nonhisp,
                                                asian_other, 
                                                black_nonhispanic, 
                                                total_hispanic, 
                                                white_nonhispanic)

wide_places_demo <- wide_places_demo %>% select(GEOID, 
                                                NAME, 
                                                total_people, 
                                                total_nonhisp,
                                                asian_other, 
                                                black_nonhispanic, 
                                                total_hispanic, 
                                                white_nonhispanic)
```

Test that the new groups sum to the original people total.
```{r}
stopifnot(
  wide_county_demo %>%
    mutate(total_people2 = asian_other + black_nonhispanic + total_hispanic + white_nonhispanic) %>%
    filter(total_people != total_people2) %>%
    nrow() == 0
)
```

If this is still running, we are good to proceed!

Now calculate the share of municipalities by race.

```{r}
wide_county_demo <- wide_county_demo %>%
  mutate(
    asian_other = asian_other / total_people, 
    black_nonhispanic = black_nonhispanic / total_people, 
    total_hispanic = total_hispanic / total_people,
    white_nonhispanic = white_nonhispanic / total_people
  )

wide_places_demo <- wide_places_demo %>%
  mutate(
    asian_other = asian_other / total_people, 
    black_nonhispanic = black_nonhispanic / total_people, 
    total_hispanic = total_hispanic / total_people,
    white_nonhispanic = white_nonhispanic / total_people
  )

```

Test to see if bounded by 0 and 1.
```{r}
stopifnot(
  wide_county_demo %>%
    filter(
      asian_other < 0 | asian_other > 1 |
        black_nonhispanic < 0 | black_nonhispanic > 1|
        total_hispanic < 0 | total_hispanic > 1 |
        white_nonhispanic < 0 | white_nonhispanic > 1
    ) %>% 
    nrow() == 0
)

stopifnot(
  wide_places_demo %>%
    filter(
      asian_other < 0 | asian_other > 1 |
        black_nonhispanic < 0 | black_nonhispanic > 1|
        total_hispanic < 0 | total_hispanic > 1 |
        white_nonhispanic < 0 | white_nonhispanic > 1
    ) %>% 
    nrow() == 0
)
```

If this is still running, we are good to proceed!

Test to see if the 4 categories sum to 1.

```{r}
stopifnot(
  wide_county_demo %>%
    mutate(total = round(asian_other + black_nonhispanic + total_hispanic + white_nonhispanic, 10)) %>%
    filter(total != 1) %>%
    nrow() == 0
)

stopifnot(
  wide_places_demo %>%
    mutate(total = round(asian_other + black_nonhispanic + total_hispanic + white_nonhispanic, 10)) %>%
    filter(total != 1) %>%
    nrow() == 0
)
```

If this is still running, we are good to proceed!

## Create quality flag

All quality is good because of the data source.
```{r}
wide_county_demo <- wide_county_demo %>%
  mutate(total_people_quality = 1, total_nonhisp_quality = 1, asian_other_quality = 1, 
         black_nonhispanic_quality = 1, total_hispanic_quality = 1, white_nonhispanic_quality = 1)

wide_places_demo <- wide_places_demo %>%
  mutate(total_people_quality = 1, total_nonhisp_quality = 1, asian_other_quality = 1, 
         black_nonhispanic_quality = 1, total_hispanic_quality = 1, white_nonhispanic_quality = 1)
```


## Prepare for Export

Merge in the final County & Places files to isolate the data we need for each.

```{r}
county_pop <- read_csv(here::here("geographic-crosswalks", "data", "county-populations.csv"))

places_pop <- read_csv(here::here("geographic-crosswalks", "data", "place-populations.csv"))
```

Add in the lost leading zeroes for the state/county FIPs & state/place FIPs.


```{r}
county_pop <- county_pop %>%
  mutate(state = sprintf("%0.2d", as.numeric(state)))
county_pop <- county_pop %>%
  mutate(county = sprintf("%0.3d", as.numeric(county)))


places_pop <- places_pop %>%
  mutate(state = sprintf("%0.2d", as.numeric(state)))
places_pop <- places_pop %>%
  mutate(place = sprintf("%0.5d", as.numeric(place)))
```


Create a concatenated GEOID based on state + county & state + place.

```{r}
county_pop$GEOID <- paste(county_pop$state, county_pop$county, sep = "")

places_pop$GEOID <- paste(places_pop$state, places_pop$place, sep = "")
```

Keep the most recent year of population data (not 2022, but 2021 - next update will include 2023 5-year data).

```{r}
county_pop <- filter(county_pop, year == update_year)

places_pop <- filter(places_pop, year == update_year)

```

Merge the data files into the population files (left join, since data files have more observations).

```{r}
county_pop_by_race <- left_join(county_pop, wide_county_demo, by=c("GEOID"))

place_pop_by_race <- left_join(places_pop, wide_places_demo, by=c("GEOID"))

```

Keep only relevant variables before export.

```{r}
county_pop_by_race <- county_pop_by_race %>% 
  select(year, state, county, other = asian_other, black_nonhispanic, hispanic = total_hispanic, white_nonhispanic,
         nonhispanic_quality = total_nonhisp_quality, other_quality = asian_other_quality, 
         black_nonhispanic_quality, hispanic_quality = total_hispanic_quality, white_nonhispanic_quality) %>%
  mutate(year = update_year)
```

Rename values.
```{r}
county_pop_by_race <- county_pop_by_race %>% 
  rename_with(.cols = other:white_nonhispanic_quality, 
              ~str_c("share_desc_rep_", .x))
```

Same process for place.

```{r}
place_pop_by_race <- place_pop_by_race %>% 
  select(year, state, place, other = asian_other, black_nonhispanic, hispanic = total_hispanic, white_nonhispanic,
         nonhispanic_quality = total_nonhisp_quality, other_quality = asian_other_quality, 
         black_nonhispanic_quality, hispanic_quality = total_hispanic_quality, white_nonhispanic_quality) %>%
  mutate(year = update_year)
```

```{r}
place_pop_by_race <- place_pop_by_race %>% 
   rename_with(.cols = other:white_nonhispanic_quality, 
              ~str_c("share_desc_rep_", .x)) 
```

## Export
```{r}
write_csv(county_pop_by_race, here::here("05_local-governance", "descriptive-representation", "data", "final",
                                         paste0("descriptive_rep_denominator_county_", update_year, ".csv")))

write_csv(place_pop_by_race, here::here("05_local-governance", "descriptive-representation", "data", "final",
                                        paste0("descriptive_rep_denominator_city_", update_year, ".csv")))
```

