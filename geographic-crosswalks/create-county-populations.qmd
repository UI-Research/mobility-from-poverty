---
title: "Create County Population File"
author: "Aaron R. Williams"
abstract: "This script pulls US Census Bureau Population Estimation Program and Decennial Census data to create a list of counties with population estimates for 2014-2023"
format: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(tidycensus)
library(here)

theme_set(theme_minimal())
options(scipen = 999)

```

## 2015-2019

In 2014-2019, there are 3,142 counties. In 2020, Valdez-Cordova Census Area split into Chugach Census Area and Copper River Census Area.

```{r}
#' Get population estimates from the US Census Bureau Population Estimation Program
#'
#' @param year An integer for the year of interest
#'
#' @return A data frame with estimate for all US counties
#'
get_pop <- function(year) {
  
  pop <- get_estimates("county", year = year, variables = "POP") |>
    mutate(year = year)
  
  return(pop)
  
}


# pull county population data for each year from the Population Estimates Program
pep_2015_2019 <- map_dfr(
  .x = 2015:2019, 
  .f = ~get_pop(year = .x)
)

```

## 2020

```{r}
# pull the 2020 decennial census
census2020 <- get_decennial(geography = "county", year = 2020, variables = "P1_001N") |>
  select(NAME, GEOID, variable, value) |>
  mutate(year = 2020)

# combine the PEP data and decennial census data
pop <- bind_rows(pep_2015_2019, census2020)

# drop unnecessary variable and rename the useful variable
pop <- pop|>
  select(-variable)|>
  rename(population = value)

# split GEOID into state and county
pop <- pop %>%
  mutate(state = str_sub(GEOID, start = 1, end = 2),
         county = str_sub(GEOID, start = 3, end = 5)) %>%
  select(-GEOID)

# drop PR
pop <- pop|>
  filter(state != "72")

# split the detailed county name into county_name and state_name
pop <- pop |>
  separate(NAME, into = c("county_name", "state_name", "c", "d", "e"), sep = ",") |>
  mutate(state_name = str_trim(state_name)) |>
  select(-c, -d, -e)

# clean one messy county name from New Mexico
pop <- pop |>
  select(year, state, county, state_name, county_name, population) |>
  arrange(year, state, county) |>
  mutate(county_name = if_else(county_name == "DoÃ±a Ana County", "Doña Ana County", county_name))

```

## 2021-2023

The [Population Estimates Program](https://www.census.gov/data/datasets/time-series/demo/popest/2020s-counties-total.html) data isn't available through the Census Bureau API for later year. Instead, we download and clean up the data.

```{r}
read_pep <- function(year) {
  
  file <- here("geographic-crosswalks", "data", "raw", paste0("pep", year, ".csv"))
  
  url <- 
    paste0("https://www2.census.gov/programs-surveys/popest/datasets/",
           "2020-", year, "/counties/totals/co-est", year, "-alldata.csv")
  
  if (!file.exists(file)) {
    
    download.file(
      url = url,
      destfile = file
    )
    
    
  }
  
  pop_var <- paste0("popestimate", year)
  
  pep <- read_csv(file) |>
    rename_with(tolower) |>
    filter(sumlev == "050") |>
    mutate(year = year) |>
    select(year, state, county, state_name = stname, county_name = ctyname, 
           population = any_of(pop_var))
  
  return(pep)
  
}

pep_2021_2023 <- map_dfr(
  .x = 2021:2023, 
  .f = read_pep
)

pep_2021_2023 <- pep_2021_2023 |>
  mutate(county_name = if_else(county_name == "Do\xf1a Ana County", "Doña Ana County", county_name))

```

## 2014

```{r}
# add 2014 county names with no population estimate
# PEP isn't in tidycensus before 2015
pep2014 <- pop |>
  filter(year == 2015) |>
  mutate(year = 2014, population = NA)

```

## Combine Data

```{r}
final_population <- bind_rows(
  pep2014,
  pop,
  pep_2021_2023
)

final_population <- final_population |>
  arrange(year, state, county)

```

## Evaluation

```{r}
count(final_population, year)

```

```{r}
population_test <- final_population |>
  filter(year > 2014) |>
  group_by(state, county) |>
  mutate(
    pop_change = population - lag(population),
    prop_pop_change = (population - lag(population)) / lag(population)
  ) |>
  ungroup()

population_test |>
  ggplot(aes(population, pop_change)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ year) +
  labs(title = "Population change in different years")

population_test |>
  ggplot(aes(population, prop_pop_change)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ year) +
  labs(title = "Proportional population change in different years")

population_test |>
  slice_max(abs(prop_pop_change), n = 30) |>
  print(n = Inf)

population_test |>
  slice_max(abs(pop_change), n = 30) |>
  print(n = Inf)

```

```{r}
final_population |>
  group_by(state, county) |>
  mutate(fips_frequency = n()) |>
  filter(fips_frequency != 10) |>
  ungroup() |>
  distinct(state, county, state_name, county_name) |>
  print(n = Inf)

```


```{r}
final_population |>
  group_by(state_name, county_name) |>
  mutate(fips_frequency = n()) |>
  filter(fips_frequency != 10) |>
  ungroup() |>
  distinct(state, county, state_name, county_name) |>
  print(n = Inf)

```

```{r}
final_population |>
  filter(state == "35", county == "013")

```


## Save Data

The PEP data are reported using the geographies at the time the estimates were generated. This means the 2023 data include Connecticut's planning regions in 2021 even though they didn't exist at that point. Accordingly, we will download earlier data. 

```{r}
write_csv(final_population, here("geographic-crosswalks", "data", "county-populations.csv"))

```

