---
title: "Create County Population File"
author: "Aaron R. Williams"
date: today
abstract: "This script pulls US Census Bureau Population Estimation Program and Decennial Census data to create a list of counties with population estimates for 2014-2023"
format: 
  html:
    toc: true
embed-resources: true
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
library(tidyverse)
library(tidycensus)
library(assertr)
library(here)
library(epoxy)

use_epoxy_glue_engine()
theme_set(theme_minimal())
options(scipen = 999)

```

## 2014
In 2014, there are 3,142 counties. In 2020, Valdez-Cordova Census Area
split into Chugach Census Area and Copper River Census Area.

```{r}
#| label: get-pop-2014
#' Get population estimates from the US Census Bureau Population Estimation Program manually for 2014
#'
#' @param year An integer for the year of interest
#'
#' @return A data frame with estimate for all US counties
#'
## 2014

```{r}
# Specify URL where source data file is online
# FYI for variable information: https://www.census.gov/data/developers/data-sets/popest-popproj/popest/popest-vars/2019.html
countyurl14 <-
  "https://www2.census.gov/programs-surveys/popest/datasets/2010-2014/counties/totals/co-est2014-alldata.csv"

# Specify destination where file should be saved (the .gitignore folder for your local branch)
destfilecounty14 <- here("geographic-crosswalks", "data", "raw", "co-est2014.csv")

# Import the data file & save locally
if (!file.exists(destfilecounty14)) {
  download.file(countyurl14, destfilecounty14, mode = "wb")
}

pep_2014 <- read_csv(destfilecounty14) %>%
  rename_with(tolower) %>%
  # Convert state to character and add a leading zero
  mutate(
    state = str_pad(state, width = 2, pad = "0"),
    place = str_pad(county, width = 3, pad = "0"),
    GEOID = paste0(state, place)
  ) %>%
  # remove unnecessary data first
  filter(county != "000") %>%
  mutate(across(c(state, county), as.character)) %>%
  filter(sumlev == "050") %>%
  mutate(variable = "POP") %>%
  mutate(NAME = paste0(stname, ", ", ctyname),
         ) %>%
  select(
    GEOID, NAME, variable,
    starts_with("popestimate")
  ) %>%
  # reshape by place
  pivot_longer(
    cols = starts_with("popestimate"),
    names_to = "year",
    values_to = "value"
  ) %>%
  mutate(
    year = as.numeric(str_remove(string = year, pattern = "popestimate")),
  ) %>%
  filter(year > 2013) 
```



## 2015-2019

In 2015-2019, there are 3,142 counties. In 2020, Valdez-Cordova Census Area
split into Chugach Census Area and Copper River Census Area.

```{r}
#| label: get-pop-2015-2019
#' Get population estimates from the US Census Bureau Population Estimation Program
#'
#' @param year An integer for the year of interest
#'
#' @return A data frame with estimate for all US counties
#'
get_pop <- function(year) {
  
  pop <- get_estimates("county", year = year, variables = "POP") |>
    mutate(year = year)
  
  return(pop)
  
}


# pull county population data for each year from the Population Estimates Program
pep_2015_2019 <- map_dfr(
  .x = 2015:2019, 
  .f = ~get_pop(year = .x)
)

```

## 2020

```{r}
#| label: get-pop-2020
# pull the 2020 decennial census
census2020 <- get_decennial(geography = "county", year = 2020, variables = "P1_001N") |>
  select(NAME, GEOID, variable, value) |>
  mutate(year = 2020)

# combine the PEP data and decennial census data
pop <- bind_rows(pep_2014, pep_2015_2019, census2020)


# split GEOID into state and county
pop <- pop %>%
  mutate(state = str_sub(GEOID, start = 1, end = 2),
         county = str_sub(GEOID, start = 3, end = 5)) %>%
  select(-GEOID)

# drop PR
pop <- pop |>
  filter(state != "72")

# split the detailed county name into county_name and state_name
pop <- pop |>
  separate(NAME, into = c("county_name", "state_name", "c", "d", "e"), sep = ",") |>
  mutate(state_name = str_trim(state_name)) |>
  select(-c, -d, -e)

# drop unnecessary variable and rename the useful variable
pop <- pop %>%
  mutate (population = value) %>%
  select(state, county, state_name, county_name, year, population)


# clean one messy county name from New Mexico
pop <- pop |>
  select(year, state, county, state_name, county_name, population) |>
  arrange(year, state, county) |>
  mutate(county_name = if_else(county_name == "DoÃ±a Ana County", "Doña Ana County", county_name))

```

## 2021-2023

The [Population Estimates
Program](https://www.census.gov/data/datasets/time-series/demo/popest/2020s-counties-total.html)
data isn't available through the Census Bureau API for later year. Instead, we
download and clean up the data.

```{r}
#| label: get-pop-2021-2023
read_pep <- function(year) {
  
  file <- here("geographic-crosswalks", "data", "raw", paste0("pep", year, ".csv"))
  
  url <- 
    paste0("https://www2.census.gov/programs-surveys/popest/datasets/",
           "2020-", year, "/counties/totals/co-est", year, "-alldata.csv")
  
  if (!file.exists(file)) {
    
    download.file(
      url = url,
      destfile = file
    )
    
    
  }
  
  pop_var <- paste0("popestimate", year)
  
  pep <- read_csv(file) |>
    rename_with(tolower) |>
    filter(sumlev == "050") |>
    mutate(year = year) |>
    select(year, state, county, population = any_of(pop_var), any_of(c("stname", "ctyname")))
  
  return(pep)
  
}

pep_2021_2023 <- map_dfr(
  .x = 2021:2023, 
  .f = read_pep
)

pep_2021_2023 <- pep_2021_2023 |>
  rename(state_name = stname, county_name = ctyname) |>
  mutate(county_name = if_else(county_name == "Do\xf1a Ana County", "Doña Ana County", county_name))
```


## Combine Data Again

```{r}
#| label: combine-population-data
final_population <- bind_rows(
  pop,
  pep_2021_2023
)

final_population <- final_population |>
  arrange(year, state, county)
```

Fix a typo in the county name for "Lower Connecticut River Valley Planning
Region"

```{r}
final_population <- final_population |>
  mutate(county_name = if_else(state == "09" & county == "130",
    "Lower Connecticut River Valley Planning Region", county_name
  ))
```

## Remove Connecticut Counties

Connecticut stopped using its **eight historical counties** as functional
governmental units in 1960. In 2022, the Census Bureau updated its data
reporting to align with Connecticut's governance structure, which divides the
state into **nine planning regions** that reflect the state’s **nine**
**Regional Councils of Government (COGs)**. These regions are now used for
reporting, replacing the old **eight historical counties**. As new census data
products will follow this structure, we will only report data for **planning
regions**. Due to data quality concerns with crosswalking from the old
historical counties to planning regions, we **drop any Connecticut data prior to 2022**.
To learn more about this issue, see the [geographic harmonization guide](geographic-harmonization-guide.qmd#sec-ct-planning-regions).  

As of Jan 2025 - we are no longer removing the previous CT counties. 8 CT counties
through 2021, then 9 planning regions from 2022 onward.

```{r}
#| label: remove-old-ct-counties

#final_population <- final_population |>
#  filter(!(state_name == "Connecticut" & year < 2022))
```

```{r}
#| label: tally-counties-by-year

get_n_counties <- function(data, filtering_expression) {
  n_counties <-
    filter(data, {{ filtering_expression }}) |>
    count(year) |>
    pull(n) |>
    unique()

  return(n_counties)
}

n_counties_2014_2019 <- get_n_counties(final_population, year <= 2019)
n_counties_2020_2021 <- get_n_counties(final_population, between(year, 2020, 2021))
n_counties_2022_2023 <- get_n_counties(final_population, year >= 2022)
```

```{epoxy}
Removing these **eight counties** leaves us with:

-   **{.comma n_counties_2014_2019}** counties in 2014-2019
-   **{.comma n_counties_2020_2021}** counties in 2020-2021
-   **{.comma n_counties_2022_2023}** counties in 2022-2023.
```
## Evaluation

**Check:** Do we have the expected number of counties?
```{r}
final_population |>
  count(year) |>
  assert(
    within_bounds(3134, 3144),
    n
  )
```

```{r}
population_test <- final_population |>
  filter(year > 2014) |>
  group_by(state, county) |>
  mutate(
    pop_change = population - lag(population),
    prop_pop_change = (population - lag(population)) / lag(population)
  ) |>
  ungroup()

population_test |>
  ggplot(aes(population, pop_change)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ year) +
  labs(title = "Population change in different years")

population_test |>
  ggplot(aes(population, prop_pop_change)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ year) +
  labs(title = "Proportional population change in different years")

```

We can look at the counties with the largest proportion change. 

```{r}
population_test |>
  slice_max(abs(prop_pop_change), n = 30) |>
  print(n = Inf)

```

We can look at counties with the largest absolute change in population. 

```{r}
population_test |>
  slice_max(abs(pop_change), n = 30) |>
  print(n = Inf)

```

We can look at counties with FIPS that don't show up in every year.

```{r}
final_population |>
  group_by(state, county) |>
  mutate(fips_frequency = n()) |>
  filter(fips_frequency != 10) |>
  ungroup() |>
  distinct(state, county, state_name, county_name) |>
  print(n = Inf)

```

We can look at places with county names that don't show up in every year.

```{r}
final_population |>
  group_by(state_name, county_name) |>
  mutate(fips_frequency = n()) |>
  filter(fips_frequency != 10) |>
  ungroup() |>
  distinct(state, county, state_name, county_name) |>
  print(n = Inf)

```

```{r}
final_population |>
  filter(state == "35", county == "013")

```


## Save Data

The PEP data are reported using the geographies at the time the estimates were generated. This means the 2023 data include Connecticut's planning regions in 2021 even though they didn't exist at that point. Accordingly, we will download earlier data. 

```{r}
write_csv(final_population, here("geographic-crosswalks", "data", "county-populations.csv"))

```

