---
title: "Generate PUMA to Place Crosswalk File"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

*Program for the creation of the PUMA to place crosswalk for UMF predictors*

Program: Initially written by Tina Chelidze and updated by JP Walsh 2022-2023.

Primary data derived from the University of Missouri's [geographic correspondence engine](https://mcdc.missouri.edu/applications/geocorr.html).

Based on processes developed by Paul Johnson and Kevin Werner in SAS.

-   [Housekeeping](#housekeeping)
-   [Read data](#read-data)
-   [Clean crosswalks](#clean-crosswalks)
-   [Create quality variable](#create-quality-variable)
-   [Write files](#wite-files)

## Housekeeping

Read in packages for use. 

```{r}
library(tidyverse)
library(Hmisc)
library(reactable)

options(scipen = 999)

```

## Read data

Read the PUMA to Place crosswalks from the raw data file in the geographic-crosswalks folder. The project is currently using two crosswalk files that are utilized based on the year of the Census data. For 2022 ACS and onward we use a crosswalk going from 2020 PUMA to 2020 Place. For pre-2022 ACS data, we use a crosswalk from 2012 PUMA to 2014 Place.

The GeoCorr website allows for a variety of selections in creating your crosswalk file. The selections used to create the files read here are detailed below:

[Geocorr2018](https://mcdc.missouri.edu/applications/geocorr2018.html)
*States:* All
*Source geography:* 2012 PUMA
*Target geography:* 2014 Place (City, Town, Village, CDP, etc.)
*Weighting variable:* Population (2010 census)
*Output Options:* Format CSV & Generate second allocation factor 

[Geocorr2022](https://mcdc.missouri.edu/applications/geocorr2022.html)
*States:* All
*Source geography:* 2020 PUMA
*Target geography:* 2020 Place (City, Town, Village, CDP, etc.)
*Weighting variable:* Population (2020 census)
*Output Options:* Format CSV & Generate second allocation factor 

Read in the crosswalk files from the raw folder inside the geographic-crosswalk data folder.
```{r}
puma_place_2020 <- read_csv(here::here("geographic-crosswalks", "data", "raw", "geocorr2022_puma_place_2020.csv")) 
puma_place_2010 <- read_csv(here::here("geographic-crosswalks", "data", "raw", "geocorr2018_puma_place_2010.csv"))
```

Check that all states are present in the raw data and count the number of unique places in each state.

```{r}
state_place_20 <- puma_place_2020 %>%
  select(state, place) %>%
  unique() %>%
  group_by(state) %>%
  summarise(unique_places20 = n())

puma_place_2010 %>%
  select(state, placefp14) %>%
  unique() %>%
  group_by(state) %>%
  summarise(unique_places10 = n()) %>%
  left_join(state_place_20, by = c("state")) %>%
  reactable()
```

## Clean crosswalks

Filter out the row containing metadata and select only needed variables.

```{r}
puma_place_2020 <- puma_place_2020 %>%
  rename_with(tolower) %>%
  filter(!str_detect(state, "State")) %>%
  select(state, puma22, place, pop20, afact, afact2)

puma_place_2010 <- puma_place_2010 %>%
  rename_with(tolower) %>%
  filter(!str_detect(state, "State")) %>%
  select(state, puma12, placefp14, pop10, afact, afact2)
```

Rename GeoCorr variables for working purposes. Add leading zeros to state fips, PUMAs and places to make them uniform in length.

```{r}
puma_place_2020 <- puma_place_2020 %>%
  rename(
    puma = puma22,
    statefip = state
    ) %>%
  mutate(
    statefip = sprintf("%0.2d", as.numeric(statefip)),
    puma = sprintf("%0.5d", as.numeric(puma)),
    place = sprintf("%0.5d", as.numeric(place))
  )

puma_place_2010 <- puma_place_2010 %>%
  rename(
    puma = puma12,
    statefip = state,
    place = placefp14
    ) %>%
  mutate(
    statefip = sprintf("%0.2d", as.numeric(statefip)),
    puma = sprintf("%0.5d", as.numeric(puma)),
    place = sprintf("%0.5d", as.numeric(place))
  )
```

Convert weight variables to be type numeric.

```{r}
puma_place_2020 <- puma_place_2020 %>%
  mutate(
    afact = as.double(afact),
    afact2 = as.double(afact2),
    pop20 = as.double(pop20)
  )

puma_place_2010 <- puma_place_2010 %>%
  mutate(
    afact = as.double(afact),
    afact2 = as.double(afact2),
    pop10 = as.double(pop10)
  )
```

We want to limit the crosswalk only to Places that will be used in the final mobility metric data - this will help limit the size of future data steps. Bring in the Places population file (place-populations.csv) to select only places included in the UMF data. Keep only one year of place information. 

```{r}
places <- read_csv(here::here("geographic-crosswalks", "data", "place-populations.csv")) %>%
  filter(year == 2021) %>% 
  select(-population, -year)
```

Rename the Place population variables to prep for merge.

```{r}
places <- places %>% 
  rename(statefip = state)
```

Left join crosswalk data onto the Place population file to get rid of irrelevant Places in the crosswalk data.
```{r}
puma_place_2020 <- left_join(places, puma_place_2020, by=c("statefip","place"))
puma_place_2010 <- left_join(places, puma_place_2010, by=c("statefip","place"))
```

Check on the distribution of crosswalk variables related to population and weighting. We want to ensure there are no abnormal outliers or missing values. 

Visualize key variables for the 2020 crosswalk.
```{r}
puma_place_2020 %>% 
  ggplot(aes(x = afact)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 0.02) +
  theme_minimal() +
  ggtitle("2020 AFACT distribution") +
  ylab("Count")

puma_place_2020 %>% 
  ggplot(aes(x = afact)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 0.02) +
  theme_minimal() +
  ggtitle("2020 AFACT2 distribution") +
  ylab("Count")

puma_place_2020 %>% 
  ggplot(aes(x = pop20)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("2020 Population Distribution in PUMAs") +
  ylab("Density") 
```

Visualize key variables for the 2018 crosswalk.
```{r}
puma_place_2010 %>% 
  ggplot(aes(x = afact)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 0.02) +
  theme_minimal() +
  ggtitle("2010 AFACT distribution") +
  ylab("Count")

puma_place_2010 %>% 
  ggplot(aes(x = afact2)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 0.02) +
  theme_minimal() +
  ggtitle("2010 AFACT2 distribution") +
  ylab("Count")

puma_place_2010 %>% 
  ggplot(aes(x = pop10)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("2010 Population Distribution in PUMAs") +
  ylab("Density") 
```

Drop observations where the weight adjustment is zero. These PUMAs have no overlap with the places we want to include in the data.

```{r}
puma_place_2020 <- puma_place_2020 %>%
  filter(afact != 0.000)

puma_place_2010 <- puma_place_2010 %>%
  filter(afact != 0.000)
```

## Create quality variable

Add the necessary components to the crosswalk for producing a data quality flag.

Create flags in the PUMA-place crosswalk for places where a high percentage of the data comes from outside of the Place. Per agreed upon guidance, 75% or more from the place is good, below 35% is bad, in between is marginal. This is calculated by taking the product of percentage of PUMA in place and percentage of place in PUMA for each place-PUMA pairing, and summing across the place.

Create new variable "products". This is the sum of the share of the place captured in the PUMA (afact2) and the share of the PUMA captured in the place (afact).

```{r}
puma_place20 <- puma_place_2020 %>%
  mutate(products = afact * afact2)

puma_place10 <- puma_place_2010 %>%
  mutate(products = afact * afact2)
```

Calculate the total place population by summing the GeoCorr pop10 and pop20 variables. These pop variables count the population in the PUMA that overlap with the place - note that GeoCorr presents these numbers so that it already accounts for afact (see What is a Correlation List? on the [GeoCorr website](https://mcdc.missouri.edu/applications/docs/geocorr-help.html#weightVar)).

```{r}
puma_place20 <- puma_place20 %>%
  group_by(statefip, place) %>%
  mutate(sum_products = sum(products),
         place_pop = sum(pop20)) %>% 
  ungroup() 

puma_place10 <- puma_place10 %>%
  group_by(statefip, place) %>%
  mutate(sum_products = sum(products),
         place_pop = sum(pop10)) %>% 
  ungroup() 
```

The average sum of products in the 2020 crosswalk is 77% and 55% in the 2010 crosswalk (more PUMAs have good quality than less than good).
It is expected that 2010 will have lower quality because the PUMA boundaries and place boundaries are removed by two years (2012 to 2014).

We also want to know particularly small places, defined by the bottom percentile of population. The table below shows us that the first quartile of place population in 2020 is 111,876 and 99,940 in 2010.

```{r}
puma_place10 %>% 
  select(sum_products, place_pop) %>% 
  summary()

puma_place20 %>% 
  select(sum_products, place_pop) %>% 
  summary()
```

Assign the first quartile population count for 2010 and 2020 to variables so we can reference them when creating our quality indicator.

```{r}
popq1_20 <- quantile(puma_place20$place_pop, probs = c(0.25), names = FALSE) 

popq1_10 <- quantile(puma_place10$place_pop, probs = c(0.25), names = FALSE)
```

Rank sum_product based on the guidance described above (1 to 3, with 1 being best). Also create an indicator of small places (1 is small - define the cutoff as the first quartile calculated above).

```{r}
puma_place10 <- puma_place10 %>%
  mutate(
    geographic_allocation_quality =
      case_when(
        sum_products >= 0.75 ~ 1,
        sum_products >= 0.35 ~ 2,
        sum_products < 0.35 ~ 3
      ),
    size_flag =
      case_when(place_pop >= popq1_10 ~ 0,
                place_pop < popq1_10 ~ 1)
  )

puma_place20 <- puma_place20 %>%
  mutate(
    geographic_allocation_quality =
      case_when(
        sum_products >= 0.75 ~ 1,
        sum_products >= 0.35 ~ 2,
        sum_products < 0.35 ~ 3
      ),
    size_flag =
      case_when(place_pop >= popq1_20 ~ 0,
                place_pop < popq1_20 ~ 1)
  )
```

Look at the counts of the geographic quality flag.

```{r}
puma_place20 %>% 
  ggplot(aes(x = geographic_allocation_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  theme_minimal() +
  ggtitle("Geographic Allocation Flag 2020") +
  ylab("Count")
  
puma_place10 %>% 
ggplot(aes(x = geographic_allocation_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  theme_minimal() +
  ggtitle("Geographic Allocation Flag 2010") +
  ylab("Count")
```


We want to join the crosswalks together so they can be merged onto multi-year census files. First create an indicator of which period the crosswalk applies to so they can be joined appropriately. 
```{r}
puma_place20 <- puma_place20 %>% 
  mutate(crosswalk_period = "2022") 


puma_place10 <- puma_place10 %>% 
  mutate(crosswalk_period = "pre-2022")
```

Make the variable names universal.

```{r}
puma_place20 <- puma_place20 %>% 
 rename(population = pop20)

puma_place10 <- puma_place10 %>% 
  rename(population = pop10) 
```

Finally, bind the crosswalks together. 

```{r}
puma_place <- puma_place20 %>% 
  bind_rows(puma_place10)
```


## Write files

Save as "puma_place" and year of population weight in the geographic-crosswalks data file.

```{r}
write_csv(puma_place, here::here("geographic-crosswalks", "data", "crosswalk_puma_to_place.csv"))
```

