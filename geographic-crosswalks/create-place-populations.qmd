---
title: "Create Place Population File"
author: "Aaron R. Williams"
date: today
abstract: "This script pulls US Census Bureau Population Estimation Program and Decennial Census data to create a list of places with population estimates for 2015-2020. It then creates a stub file for putting together the population files."
format: 
  html:
    toc: true
embed-resources: true
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(tidycensus)
library(assertr)
library(here)

theme_set(theme_minimal())
options(scipen = 999)

```

## 2015-2019

```{r}
#' Get population estimates from the US Census Bureau Population Estimation Program
#'
#' @param year An integer for the year of interest
#'
#' @return A data frame with estimate for all US counties
#'
get_pop <- function(year) {
  
  pop <- tidycensus::get_estimates("place", year = year, variables = "POP") %>%
    mutate(year = year)
  
  return(pop)
  
}


# pull county population data for each year from the Population Estimates Program
pep_2015_2019 <- map_dfr(
  .x = 2015:2019, 
  .f = ~get_pop(year = .x)
)

```

## 2020

```{r}
# pull the 2020 decennial census
census2020 <- get_decennial(
  geography = "place", 
  year = 2020, 
  variables = "P1_001N", 
  keep_geo_vars = TRUE
) |>
  select(NAME, GEOID, variable, value) |>
  mutate(year = 2020)

```

## Combine

```{r}
# combine the PEP data and decennial census data
pop <- bind_rows(pep_2015_2019, census2020)

# drop unnecessary variable and rename the useful variable
pop <- pop %>%
  select(-variable) %>%
  rename(population = value,
         place_state_name = NAME,
         state_place = GEOID)

pop <- pop |>
  separate(place_state_name, into = c("place_name", "state_name", "c", "d", "e"), sep = ",") |>
  mutate(
    state_name = str_squish(state_name),
    place_name = str_squish(place_name)
  ) |>
  mutate(
    state = str_sub(state_place, start = 1, end = 2),
    place = str_sub(state_place, start = 3, end = 7)
  ) |>
  select(year, state, place, state_name, place_name, population) %>%
  arrange(year, state, place)

```

## 2021-2022

The [Population Estimates Program](https://www.census.gov/data/datasets/time-series/demo/popest/2020s-counties-total.html) data isn't available through the Census Bureau API for later years. Ideally, we would download the files and use them. Unfortunately, the files have inconsitencies so we skip this step for now. 

```{r}
# Specify URL where source data file is online
placeurl <- 
  "https://www2.census.gov/programs-surveys/popest/datasets/2020-2022/cities/totals/sub-est2022.csv"

# Specify destination where file should be saved (the .gitignore folder for your local branch)
destfileplace <- here("geographic-crosswalks", "data", "raw", "sub-est2022.csv")

# Import the data file & save locally
if (!file.exists(destfileplace)) {

  download.file(placeurl, destfileplace, mode = "wb")
  
}
  
# Import the data file as a dataframe
pep_2021_2022 <- read_csv(destfileplace) |>
  rename_with(tolower) |>
  select(
    state, place, 
    state_name = stname,
    place_name = name, 
    popestimate2021, 
    popestimate2022
  )

# remove unnecessary data before reshaping
pep_2021_2022 <- pep_2021_2022 |>
  filter(place != "00000")

# reshape by place
pep_2021_2022 <- pep_2021_2022 |> 
  pivot_longer(
    cols = c(popestimate2021, popestimate2022), 
    names_to = "year",
    values_to = "population"
  )

pep_2021_2022 <- pep_2021_2022 |>
  mutate(year = as.numeric(str_remove(string = year, pattern = "popestimate")))

```

The PEP file includes disaggregations of places and duplicate places. We drop these. 

```{r}
pep_2021_2022 <- pep_2021_2022 |>
  filter(!str_detect(place_name, pattern = "(pt\\.)")) |>
  distinct(year, state, place, state_name, place_name, population)


```

2023 data for census places wasn't available for [download](https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/). We use 2022 data for 2023 for now.

```{r}
pep_2021_2023 <- bind_rows(
  pep_2021_2022,
  pep_2021_2022 |>
    filter(year == 2022) |>
    mutate(year = 2023)
)

```

## Combine Data

```{r}
final_population <- bind_rows(
  pop,
  pep_2021_2023
)

final_population <- final_population |>
  arrange(year, state, place, state_name, place_name)

```

## Subset Data

We are only interested in incorporated places with more than 75,000 people in 2020. We use a specific file from PEP to create a list of 486 FIPS of interest. 

```{r}
my_places <- read_csv(here("geographic-crosswalks/data/raw/sub-est2022.csv")) |>
  filter(POPESTIMATE2020 > 75000, SUMLEV == "162") |>
  mutate(state_place = paste0(STATE, PLACE)) |>
  pull(state_place)

final_population <- final_population |>
  filter(paste0(state, place) %in% my_places)

```

## Evaluation

```{r}
final_population |>
  count(year) |>
  assert(
    in_set(485, 486),
    n
  )

```

```{r}
population_test <- final_population |>
  filter(year > 2015) |>
  group_by(state, place) |>
  mutate(
    pop_change = population - lag(population),
    prop_pop_change = (population - lag(population)) / lag(population)
  ) |>
  ungroup()

population_test |>
  ggplot(aes(population, pop_change)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ year) +
  labs(title = "Population change in different years")

population_test |>
  ggplot(aes(population, prop_pop_change)) +
  geom_point(alpha = 0.1) +
  facet_wrap(~ year) +
  labs(title = "Proportional population change in different years")

```

We can look at the places with the largest proportion change. 

```{r}
population_test |>
  slice_max(abs(prop_pop_change), n = 30) |>
  print(n = Inf)
```

We can look at places with the largest absolute change in population. 

```{r}
population_test |>
  slice_max(abs(pop_change), n = 30) |>
  print(n = Inf)

```

We can look at places with FIPS that don't show up in every year. 

```{r}
final_population |>
  group_by(state, place) |>
  mutate(fips_frequency = n()) |>
  filter(fips_frequency != 8) |>
  ungroup() |>
  distinct(state, place, state_name, place_name) |>
  print(n = Inf)

```

We can look at places with place names that don't show up in every year. 

```{r}
final_population |>
  group_by(state_name, place_name) |>
  mutate(fips_frequency = n()) |>
  filter(fips_frequency != 8) |>
  ungroup() |>
  distinct(state, place, state_name, place_name) |>
  print(n = Inf)

```

## Save Data

The PEP data are reported using the geographies at the time the estimates were generated. This means the 2023 data include Connecticut's planning regions in 2021 even though they didn't exist at that point. Accordingly, we will download earlier data. 

```{r}
# We have 486 cities, so for 5 years we should have 2430 observations.
# However, South Fulton city, Georgia was incorporated in 2017, so we only
# have population estimates for this city from 2018-2020. Therefore, there
# are 2428 total observations

write_csv(
  x = final_population,
  file = here::here("geographic-crosswalks/data/place-populations.csv")
)
```
