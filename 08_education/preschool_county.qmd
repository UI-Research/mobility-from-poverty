---
title: "Access to pre-kindergarten Predictor, County-level"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

*Program for the creation of the Access to Pre-Kindergarten Upward Mobility Predictor at the County-level*

ACS Code: Initially written by Tina Chelidze and updated by JP Walsh 2022-2023.

Primary data derived from the IPUMS API.

Based on processes developed by Paul Johnson and Kevin Werner in SAS.

## Housekeeping

Read in packages for use. If you do not have an IPUMS API key you will need to make one via the [IPUMS website](https://www.ipums.org/).

```{r, results='hide'}
library(tidyverse)
library(Hmisc)
library(ipumsr)
library(reactable)
library(srvyr)
library(scales)

options(scipen = 999)


# DO NOT PUSH YOUR API KEY. You only have to run this once and then comment it out as below.
#set_ipums_api_key("Your KEY", save = TRUE)

source(here::here("functions", "API", "extract_ipums.R"))
source(here::here("functions", "API", "ipums_repwt_pre-k.R"))
source(here::here("08_education", "R", "finalize_metric.R"))
source(here::here("08_education", "R", "calc_survey_mean.R"))
source(here::here("08_education", "R", "calc_survey_mean_subgroup.R"))
```

## Read ACS Data

### Person-Level Data

Read in the ACS extracts using the extract_ipums function. Make sure to change the survey list to reflect what years you want to include in the data. Currently we are including two years of 5-year data (2018c and 2021c). 5-year 2022 data will be added pending its release.
```{r}
acs <- extract_ipums(
  extract_name = "umf_data_18_22",
  extract_description = "Microdata pull for Access to Pre-K Metric Predictors. American Community Survey, years 2018, 2019 and 2022 (1 and 5-year).",
  survey = list("us2018a", "us2021a")
) 
```

Look at the distribution of survey samples in the data. The number of unique samples in the data should match the number of surveys selected in the `extract_ipums()` function above.

```{r}
count(acs, sample)
```

Isolate the data to 3 and 4 year-olds. This is the age-range included in the pre-K calculation. Note: the replicate weights are limited to these ages during the data pull. 
```{r}
acs <- acs %>% 
  filter(age == 3 | age == 4) 
```

### Replicate Weights 

Read in person-level replicate weights for the 3 and 4 year old population. These will be used in creating standard errors for the preschool access calculation. 
```{r}
repwts_person <- ipums_repwt_pre_k(
  extract_name = "preschool_replicate_weights",
  extract_description = "Person replicate weights for Access to Preschool Metric Predictors. American Community Survey, years 2018, 2019 and 2022 (1 and 5-year).",
  survey = list("us2018c", "us2021c")
)  %>% 
  select(-cbserial, -cbpernum)
```

Look at the distribution of ACS survey samples in the data. The number of different samples should align with the number of surveys selected in the extract ipums function.

```{r}
count(repwts_person, sample)
```

Remove the sample variable.
```{r}
repwts_person <- repwts_person %>% 
  select(-sample)
```

### Merge on repwts

```{r}
length(unique(pull(acs, unique_person_id)))

length(unique(pull(repwts_person, unique_person_id)))

acs_combined <- 
  left_join(
    acs,
    repwts_person,
    by = "unique_person_id"
  )

length(unique(pull(acs_combined, unique_person_id)))

rm(acs)
rm(repwts_person)
```

## Clean Data

Missing data is reported in a variety of ways by IPUMS data. This step walks through the missing values in key variables and checks that we are dealing with them appropriately. 

* **Age:** No missing values reported in variable description. Check the distribution to confirm there are no abnormalities: the distribution of age looks reasonable (no bunching and all values are between 25 and 54).

```{r}
acs_combined %>% 
  count(age) %>% 
  ggplot(mapping = aes(x = factor(age), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("age, All Records") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Age",
       y = NULL)
```

* **Vacancy:** reported as "0". 
Note there are no vacancy results by default of the structure of census data read in.

```{r}
acs_combined %>% 
  ggplot(aes(x = vacancy)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  labs(
    title = "Vacancy Variable Results",
    y = "Density"
  )

```

GRADEATT: N/As reported as "0" in all modern surveys. In this analysis we assume that a zero reported means that the individual is not in school.
Variable codes explained [here](https://usa.ipums.org/usa-action/variables/GRADEATT#codes_section).

There is a significant share of records reported as "0" for the grade level attending variable.
```{r}
acs_combined %>% 
  mutate(gradeatt = zap_labels(gradeatt)) %>% 
  count(gradeatt) %>% 
  ggplot(mapping = aes(x = factor(gradeatt), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("gradeatt, All Records") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Grade Attending",
       y = NULL)

```

Confirm the values from the value labels of the GRADEATT variable to ensure we are interpreting them correctly. 1 is Nursery school/preschool and 0 is N/A - interpreting as not in school for the sake of this analysis. 
```{r}
head(acs_combined$gradeatt)
```

Rename to the more meaningful "grade_attending". And turn the variable into a factor so we can use the labels which provide clear descriptions of the grades.

```{r}
acs_clean <- acs_combined %>% 
  mutate(grade_attending = as_factor(gradeatt))
```

Examine the group quarters variable, we want to include both households and Group Quarters in this metric as both are relevant to the preschool access predictor in a geography.

IPUMS includes the following categories:
0: Vacancy
1: Households under 1970 definition
2: Additional households under 1990 definition
3: Institutions
4: Other group quarters
5: Additional households under 2000 definition
6: Fragments

Check the distribution of GQ categories. Only households and group quarters should be included (no vacancy or fragments).
```{r}
acs_clean %>%  
  count(gq) %>% 
  ggplot(mapping = aes(x = gq, y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("GQ, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "GQ",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

### Create race variable

Evaluate the values in the RACE and HISPAN variables.

* IPUMS documented values for RACE: 
    + 1 White
    + 2 Black/African American/Negro
    + 3 American Indian or Alaska Native 
    + 4 Chinese 
    + 5 Japanese
    + 6 Other Asian or Pacific Islander 
    + 7 Other race 
    + 8 Two major races 
    + 9 Three or more major races

* IPUMS documented values for HISPAN: 
    + 0 Not Hispanic 
    + 1 Mexican 
    + 2 Puerto Rican 
    + 3 Cuban 
    + 4 Other 
    + 9 Not Reported 

Look at the distribution of values for the race and hispan variables.
```{r}
acs_clean %>% 
  count(race) %>% 
  ggplot(mapping = aes(x = race, y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("Race, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Race",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

acs_clean %>% 
  count(hispan) %>% 
  ggplot(mapping = aes(x = hispan, y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("Hispan, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Hispan",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

Create the race/ethnicity variable. For race/ethnicity categories that are not coded as Hispanic, Hispan must be equal to "Not Hispanic". 

Rename the values from number category to race label: 
  +Race is Black/African American and Hispan is Not Hispanic = "Black, Non-Hispanic"
  +Hispan is not equal to Not Hispanic = "Hispanic"
  +Race is not Black or White and Hispan is Not Hispanic  = "Other Races and Ethnicities" 
  +Race is White and Hispan is Not Hispanic = "White, Non-Hispanic" 
```{r}
acs_clean <- acs_clean %>%
  mutate(subgroup_race = case_when(hispan != "Not Hispanic" ~ "Hispanic",
                                    race == "White" ~ "White, Non-Hispanic",
                                    race == "Black/African American" ~ "Black, Non-Hispanic",
                                    !race %in% c("Black/African American", "White") ~ "Other Races and Ethnicities"
  ))

```

Look at the race/ethnicity subgroup distribution.
```{r}

acs_clean %>% 
  count(subgroup_race) %>% 
  ggplot(mapping = aes(x = factor(subgroup_race), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("Race/ethnicity, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Race/ethnicity",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

## Crosswalk

Read in the PUMA to county crosswalk file. This file is created by the program generate_puma_county_crosswalks.rmd in the geographic-crosswalks folder. 
```{r}
puma_county_crosswalk <- read_csv(here::here("geographic-crosswalks", "data", "crosswalk_puma_to_county.csv"))
```

Crate a version of the crosswalk with just the county-level values of data quality variables for each crosswalk period.
```{r}
county_puma <- puma_county_crosswalk %>%
  group_by(crosswalk_period, statefip, county) %>% 
  summarise(geographic_allocation_quality = mean(geographic_allocation_quality)) %>% 
  ungroup()
```

## Merge Crosswalk 

Create a variable in the ACS data indicating whether the survey is pre or post-2022. This will be used to join on the correct crosswalk information.

```{r}
acs_clean <- acs_clean %>% 
  mutate(crosswalk_period = ifelse(year < 2022, "pre-2022", "2022"))

```

Check that the assignment worked. All years prior to 2022 should be designated "pre-2022".

```{r}
count(acs_clean, crosswalk_period, year)

```

Join the cleaned ACS data onto the crosswalk.

```{r}
acs_crosswalked <- left_join(
  acs_clean, 
  puma_county_crosswalk, 
  by = c("crosswalk_period", "statefip","puma"),
  relationship = "many-to-many"
)

rm(acs_clean)

```

Drop any observations with NA for `afact` (i.e. there is no county of interest overlapping this PUMA).

```{r}
count(acs_crosswalked, is.na(afact))

acs_crosswalked <- acs_crosswalked %>% 
  drop_na(afact)

```

Also filter out cases where `afact` is equal to zero. These cases will not be counted in the metric calculation.

```{r}
count(acs_crosswalked, afact == 0)

acs_crosswalked <- acs_crosswalked %>% 
  filter(afact > 0)

```

Adjust the person weight to account for PUMA-to-county mapping (those where the PUMA is not entirely inside the county).

```{r}
select(acs_crosswalked, perwt, repwtp1, repwtp80, afact)

acs_crosswalked <- acs_crosswalked %>%
  mutate(perwt = perwt * afact) %>% 
  mutate(across(matches("repwtp[0-9]+"), ~.x * afact))

select(acs_crosswalked, perwt, repwtp1, repwtp80, afact) 
```

Create a binary variable to distinguish between 1 and 5 year ACS surveys. 5-year samples include the term "5-year".

```{r}
acs_crosswalked <- acs_crosswalked %>%
  mutate(sample_structure = ifelse(str_detect(sample, "5-year"), "5year", "1year")) 

```

### Create computational variables

Create a binary preschool variable indicating whether the child is in preschool/pre-K or not. IPUMS codes  Nursery school/preschool (1) and N/A (0) (re: grade level attending). 
The way the code was built in prior years it is assumed N/A means that the child is not attending any school.
```{r}
acs_crosswalked <- acs_crosswalked %>% 
  filter(grade_attending %in% c("Nursery school/preschool", "N/A")) %>% 
  mutate(preschool = ifelse(grade_attending == "Nursery school/preschool", 1, 0)) 
```

Check how many records, if any, have NA reported for `grade_attending` after filtering (this should be zero).
```{r}
acs_crosswalked %>%
  filter(is.na(grade_attending)) %>% 
  group_by(pernum) %>% 
  count()
```

Check how many records, if any, have NA reported for `grade_attending` after filtering (this should be zero). 
```{r}
count(acs_crosswalked, is.na(grade_attending))

```

Confirm there are no vacant properties included in the data.
```{r}
acs_crosswalked %>%
  filter(is.na(vacancy)) %>% 
  count(pernum)

```
## Create pre-K metric: All

### Pre-drop suppressed cells

First, to save time when processing the metric, calculate the effective sample count for each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: all-effective-samples

acs_all <- acs_crosswalked %>%
  filter(sample_structure == "5year") %>% 
  group_by(year, sample, crosswalk_period, statefip, county) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_all %>%
  group_by(year, sample, crosswalk_period, statefip, county) %>%
  summarize(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the preschool access metric. 

Objective: calculate the percent of individuals between 3 and 4 that are enrolled in pre-K.

Aggregation should be weighted by PERWT (this is a person level statistic).

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-all

acs_all <- acs_all %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

Calculate the county-level metrics. 

```{r}
#| label: calc-all

results_all <- acs_all %>%
   group_split(statefip) %>% 
  map_dfr(~ calc_survey_mean(.data = .x, .geo_level = county))


```

Clean up the confidence interval bounds and sort the data.

```{r}
#| label: finalize-all

results_all <- finalize_metric(results_all)

```

```{r}
rm(acs_all)

```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 
```{r}
results_all_expand <- acs_crosswalked %>% 
  filter(sample_structure == "5year") %>% 
  mutate(geoid = paste0(statefip, county)) %>% 
  group_by(year, geoid) %>% 
  count() %>% 
   expand_grid() %>%  
   mutate(statefip = str_sub(geoid, 1, 2),
         county = str_sub(geoid, 3, 5)) %>% 
  left_join(results_all, by = c("year", "statefip", "county"))
```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst. 

First, join on to county_puma which provides the quality of the crosswalk (`afact * afact2`).
```{r}

metrics_education_all <- left_join(results_all_expand, county_puma, by=c("crosswalk_period", "statefip","county"))
```

Now create the metric quality variable. The `share_in_preschool_quality` variable combines information on the quality of the crosswalk and the sample size (effective sample) to create a final quality flag. Note that any county with NA for the `share_in_preschool` metric is being suppressed due to sample size and is given a quality flag of 3.  

```{r}
metrics_education_all <- metrics_education_all %>% 
         mutate(share_in_preschool_quality = case_when(is.na(share_in_preschool) ~ 3,
                                                   geographic_allocation_quality == 1 ~ 1,
                                                   geographic_allocation_quality == 2 ~ 2,
                                                   geographic_allocation_quality == 3 ~ 3)
  )
```

## Create pre-K metric: Race/Ethnicity

To save time when processing the metric, calculate the effective sample count for each race-ethnicity group in each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: race-ethnicity-effective-samples

acs_race_ethnicity <- acs_crosswalked %>%
  filter(sample_structure == "5year") %>% 
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_race) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_race_ethnicity %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_race) %>%
  summarize(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the pre-K metric for the race/ethnicity subgroup. 

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-race-ethnicity

acs_race_ethnicity <- acs_race_ethnicity %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

```{r}
#| label: calc-race-ethnicity

results_race_ethnicity <- acs_race_ethnicity %>%
  group_split(statefip) %>% 
  map_dfr(~ calc_survey_mean_subgroup(.data = .x,
                                      .geo_level = county,
                                      .subgroup = subgroup_race))
```

```{r}
#| label: finalize-race-ethnicity

results_race_ethnicity <- finalize_metric(results_race_ethnicity)

```

```{r}
rm(acs_race_ethnicity)
```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 

Create expanded version for race-ethnicity.
```{r}
results_race_ethnicity_expanded <- acs_crosswalked %>% 
  filter(sample_structure == "5year") %>% 
  mutate(geoid = paste0(statefip, county)) %>% 
  group_by(year, geoid, subgroup_race) %>% 
  count() %>% 
  expand_grid() %>%  
   mutate(statefip = str_sub(geoid, 1, 2),
         county = str_sub(geoid, 3, 5)) %>% 
  left_join(results_race_ethnicity, by = c("year", "statefip", "county", "subgroup_race")) %>% 
  mutate(subgroup_type = "race-ethnicity") %>% 
  rename(subgroup = subgroup_race)
```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst. 

First combine the subgroup data sets.
```{r}
metrics_income_sub <-results_all_expand %>% 
  mutate(subgroup = "All",
         subgroup_type = "all") %>% 
  bind_rows(results_race_ethnicity_expanded)
```

First, join on to county_puma which provides the quality of the crosswalk (`afact * afact2`).
```{r}

metrics_education_sub <- left_join(metrics_income_sub, county_puma, by=c("crosswalk_period", "statefip","county"))
```

Now create the metric quality variable. The `share_in_preschool_quality` variable combines information on the quality of the crosswalk and the sample size (effective sample) to create a final quality flag. Note that any county with NA for the `share_in_preschool` metric is being suppressed due to sample size and is given a quality flag of 3.  

```{r}
metrics_education_sub <- metrics_education_sub %>% 
         mutate(share_in_preschool_quality = case_when(is.na(share_in_preschool) ~ 3,
                                                   geographic_allocation_quality == 1 ~ 1,
                                                   geographic_allocation_quality == 2 ~ 2,
                                                   geographic_allocation_quality == 3 ~ 3)
  )
```

### Validation

Summarize the predictors for the 1-year and 5-year data.
```{r}
metrics_education_all %>% 
  select(share_in_preschool:share_in_preschool_quality) %>% 
  summary()

metrics_education_sub %>% 
  select(share_in_preschool:share_in_preschool_quality) %>% 
  summary()
```

Look at distribution of prek_attendance share by county.
```{r}

metrics_education_all %>% 
  filter(year == 2021) %>% 
  select(share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("Distribution of share prek_attendance, by county 2021 (5-year data)") +
  ylab("Density")

metrics_education_sub %>% 
  filter(year == 2021, subgroup != "All") %>% 
  select(share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("Distribution of share prek_attendance, subgroups, by county 2022 (5-year data)") +
  ylab("Density")
  

```

Look at distribution of prek_attendance share by county by race.
```{r}

metrics_education_sub %>% 
  filter(year == 2021, subgroup == "Black, Non-Hispanic") %>% 
  select(county, share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("prek_attendance Share, Black") +
  ylab("Density")

metrics_education_sub %>% 
  filter(year == 2021, subgroup == "Hispanic") %>% 
  select(county, share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("prek_attendance Share, Hispanic") +
  ylab("Density")

metrics_education_sub %>% 
  filter(year == 2021, subgroup == "Other Races and Ethnicities") %>% 
  select(county, share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("prek_attendance Share, Other Races and Ethnicities") +
  ylab("Density")

metrics_education_sub %>% 
  filter(year == 2021, subgroup == "White, Non-Hispanic") %>% 
  select(county, share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle("prek_attendance Share, White, Non-Hispanic") +
  ylab("Density")

```

Look at the counts of the quality flag.
```{r}
metrics_education_all %>% 
  select(share_in_preschool_quality) %>% 
  ggplot(aes(x = share_in_preschool_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  theme_minimal() +
  ggtitle("Quality Flag, All (5-year data)") +
  ylab("Count")

metrics_education_sub %>% 
  filter(subgroup != "All") %>% 
  select(share_in_preschool_quality) %>% 
  ggplot(aes(x = share_in_preschool_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  theme_minimal() +
  ggtitle("Quality Flag, subgroups (5-year data") +
  ylab("Count")
```

Tabulate share of data suppressed by year.
```{r}
metrics_education_all %>% 
  group_by(year) %>% 
  filter(is.na(share_in_preschool)) %>% 
  count()

metrics_education_sub %>% 
  filter(subgroup != "All") %>% 
  group_by(year) %>% 
  filter(is.na(share_in_preschool)) %>% 
  count()
```

## Export 

Rename state.
```{r}
metrics_education_all <- metrics_education_all %>% 
  rename("state" = "statefip")

metrics_education_sub <- metrics_education_sub %>% 
  rename("state" = "statefip")
```

Order the variables how we want.
```{r}
metrics_education_all <- metrics_education_all %>% 
  select(year, state, county, share_in_preschool, 
         share_in_preschool_lb, share_in_preschool_ub, share_in_preschool_quality)

metrics_education_sub <- metrics_education_sub %>% 
  select(year, state, county, subgroup_type, subgroup, share_in_preschool,
         share_in_preschool_lb, share_in_preschool_ub, share_in_preschool_quality)
```

Export as CSV

```{r}
write_csv(metrics_education_all, here::here("08_education", "data", "final", "metrics_preschool_county_all_longitudinal.csv"))
write_csv(metrics_education_sub, here::here("08_education", "data", "final", "metrics_preschool_county_race-ethnicity_longitudinal.csv"))
```

