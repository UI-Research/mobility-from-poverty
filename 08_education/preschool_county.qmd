---
title: "Access to pre-kindergarten Predictor, County-level"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
params:
  year: "2023"
---

*Program for the creation of the Access to Pre-Kindergarten Upward Mobility Predictor at the County-level*

ACS Code: Initially written by Tina Chelidze and updated by JP Walsh 2025.

Primary data derived from the IPUMS API.

Based on processes developed by Paul Johnson and Kevin Werner in SAS.

*User note* This program depends on extracts from the IPUMS ACS API interface. If you are updating the extract please remember to update the extract_date to reflect the time of the latest extract in the Housekeeping section of this program.

Please select your year by updating 'params$year' in the YAML parameters above.

*Internal users* If you are an internal tester using the AWS feature of this program remember to enter the passkey into your environment using Sys.setenv(). Authentication steps are nicely explained in this [blog](https://www.gormanalysis.com/blog/connecting-to-aws-s3-with-r/). You will have to request access to the access key.

*User warning* The ACS micro data used to create this metric is large and will take time to read in. It is strongly recommended that you use a server with significant computing power to run this. For internal Urban Institute users, the SAS server provides a good option.


## Housekeeping

Read in packages for use. If you do not have an IPUMS API key you will need to make one via the [IPUMS website](https://www.ipums.org/).

```{r, results='hide'}
library(tidyverse)
library(Hmisc)
library(ipumsr)
library(reactable)
library(srvyr)
library(scales)

theme_set(theme_minimal())

options(scipen = 999)


# DO NOT PUSH YOUR API KEY. You only have to run this once and then comment it out as below.
#set_ipums_api_key("Your KEY", save = TRUE)

s3_dir <- "metric_name/data/acs"
my_bucket <- "mobility-from-poverty-test"

source(here::here("functions", "API", "extract_ipums_aws.R"))
source(here::here("functions", "API", "ipums_repwt_pre-k_aws.R"))
source(here::here("functions", "testing", "evaluate_final_data.R"))
source(here::here("08_education", "R", "finalize_metric.R"))
source(here::here("08_education", "R", "calc_survey_mean.R"))
source(here::here("08_education", "R", "calc_survey_mean_subgroup.R"))
```

Date of IPUMS extract. Denote the latest date that the IPUMS extract was changed and pulled both for the overall data and the repweights. The recommended date notation format is "mm_dd_yy". 

For internal reviewers, if you plan to utilize AWS keep this date as it was last entered by the metric lead unless you intend to change the extract.

```{r}
ipums_extract_date <- "02_28_25"
ipums_repwt_extract_date <- "02_28_25"
```

If this is to update a single year of new data please set single_year_update to "Yes". If not, set it to "No".

```{r}
single_year_update = "No"
```

Define existing intermediate years and read them into function to combine. 

```{r}
existing_years <- c("2014", "2016", "2018", "2021", "2023")
```


### Person-Level Data

Read in the ACS extracts using the `extract_ipums()` function. Make sure to change the survey list to reflect what years you want to include in the data. The surveys being used in the code are defined in the code chunk below. For a list of available ACS surveys and their titles via the IPUMSR package you can run the following function: get_sample_info("acs").

```{r}

acs_surveys <- list(paste0("us", params$year, "c"))

```

Run extract. This will trigger an import process through IPUMS. It is encouraged to add detail to your extract description so it is clear what the extract was used for.

Date of latest extract noted above. If a new IPUMS pull is required the extract_date argument below must be updated to track that new data was downloaded. The extract only needs to be updated if changes or additions are required from the IPUMS pull (such as new dates or variables). 

```{r}
#| output: false

acs <- extract_ipums_aws(
  extract_name = paste0("umf_data_", params$year, "_5year_acs"),
  extract_date = ipums_extract_date,
  extract_description = paste0("Microdata pull for Access to Pre-K Metric Predictors. American Community Survey", params$year, "(5-year)."),
  survey = acs_surveys
) 

```

Look at the survey year of the IPUMS data. The survey year should match what was selected in the `extract_ipums()` function above.

```{r}
count(acs, sample)
```

Isolate the data to 3 and 4 year-olds. This is the age-range included in the pre-K calculation. Note: the replicate weights are limited to these ages during the data pull. 
```{r}
acs_age <- acs %>% 
  filter(age == 3 | age == 4) 
```

### Replicate Weights 

Read in person-level replicate weights for the 3 and 4 year old population. These will be used in creating standard errors for the preschool access calculation. 

Date of latest extract listed above. If a new IPUMS pull is required the extract_date argument below must be updated to track that new data was downloaded. The extract only needs to be updated if changes or additions are required from the IPUMS pull (such as new dates or variables). 

Note that `ipums_repwt_pre_k_aws` filters the age of respondents directly during the IPUMS API call.

```{r}
repwts <- ipums_repwt_pre_k_aws(
  extract_name = paste0("preschool_replicate_weights_", params$year),
  extract_date = ipums_repwt_extract_date,
  extract_description = paste0("Person replicate weights for Access to Preschool Metric Predictors. American Community Survey,", params$year, "(5-year)."),
  survey = acs_surveys
)  %>% 
  select(-cbserial, -cbpernum)
```

Look at the sample year of the IPUMS repwt data. The sample should align with the survey selected in the `ipums_repwt_pre_k_aws` function.

```{r}
count(repwts, sample)
```

Remove the sample variable.
```{r}
repwts_person <- repwts %>% 
  select(-sample)
```

### Merge on repwts

```{r}
length(unique(pull(acs_age, unique_person_id)))

length(unique(pull(repwts_person, unique_person_id)))

acs_combined <- 
  full_join(
    acs_age,
    repwts_person,
    by = "unique_person_id"
  )

length(unique(pull(acs_combined, unique_person_id)))

stopifnot(nrow(acs_combined) == nrow(acs_age))
stopifnot(nrow(acs_combined) == nrow(repwts_person))

rm(acs_age)
rm(repwts_person)
```

Check that the merge did not result in any missing values.

```{r}
stopifnot(all(map_dbl(acs_combined, ~sum(is.na(.x))) == 0))
```

## Clean Data

Missing data is reported in a variety of ways by IPUMS data. This step walks through the missing values in key variables and checks that we are dealing with them appropriately. 

* **Age:** No missing values reported in variable description. Run the following test to confirm all values are either 3 or 4.

```{r}

stopifnot(all(acs_combined$age %in% c(3, 4)))
          
```

* **Vacancy:** reported as "0". Note there should be no vacancy results by default of the structure of census data read in (all should be "0"). Confirm this is true with the following test.

```{r}

stopifnot(all(acs_combined$vacancy == "0"))

```

* **Gradeatt:** N/As reported as "0" in all modern surveys. In this analysis we assume that a zero reported means that the individual is not in school.
Variable codes explained [here](https://usa.ipums.org/usa-action/variables/GRADEATT#codes_section).

There is a significant share of records reported as "0" for the grade level attending variable.
```{r}
acs_combined %>% 
  mutate(gradeatt = zap_labels(gradeatt)) %>% 
  count(gradeatt) %>% 
  ggplot(mapping = aes(x = factor(gradeatt), y = n)) +
  geom_col() +
  ggtitle("gradeatt, All Records") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Grade Attending",
       y = NULL)

```

Confirm the values from the value labels of the GRADEATT variable to ensure we are interpreting them correctly. 1 is Nursery school/preschool and 0 is N/A - interpreting as not in school for the sake of this analysis. 
```{r}
head(acs_combined$gradeatt)
```

Rename to the more meaningful "grade_attending". And turn the variable into a factor so we can use the labels which provide clear descriptions of the grades.

```{r}
acs_clean <- acs_combined %>% 
  mutate(grade_attending = as_factor(gradeatt))
```

Examine the group quarters, `gq`, variable, we want to include both households and Group Quarters in this metric as both are relevant to the preschool access predictor in a geography.

IPUMS includes the following categories:

* 0: Vacancy
* 1: Households under 1970 definition
* 2: Additional households under 1990 definition
* 3: Institutions
* 4: Other group quarters
* 5: Additional households under 2000 definition
* 6: Fragments

Check the distribution of GQ categories. Only households and group quarters should be included (no vacancy or fragments).

```{r}
acs_clean %>%  
  count(gq) %>% 
  ggplot(mapping = aes(x = gq, y = n)) +
  geom_col() +
  ggtitle("GQ, All Records") +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "GQ",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

### Create race variable

Evaluate the values in the RACE and HISPAN variables.

* IPUMS documented values for RACE: 
    + 1 White
    + 2 Black/African American/Negro
    + 3 American Indian or Alaska Native 
    + 4 Chinese 
    + 5 Japanese
    + 6 Other Asian or Pacific Islander 
    + 7 Other race 
    + 8 Two major races 
    + 9 Three or more major races

* IPUMS documented values for HISPAN: 
    + 0 Not Hispanic 
    + 1 Mexican 
    + 2 Puerto Rican 
    + 3 Cuban 
    + 4 Other 
    + 9 Not Reported 

Look at the distribution of values for the race and hispan variables.

```{r}
acs_clean %>% 
  count(race) %>% 
  ggplot(mapping = aes(x = race, y = n)) +
  geom_col() +
  ggtitle("Race, All Records") +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Race",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

acs_clean %>% 
  count(hispan) %>% 
  ggplot(mapping = aes(x = hispan, y = n)) +
  geom_col() +
  ggtitle("Hispan, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Hispan",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

Create the race/ethnicity variable. For race/ethnicity categories that are not coded as Hispanic, Hispan must be equal to "Not Hispanic". 

Rename the values from number category to race label: 

* Race is Black/African American and Hispan is Not Hispanic = "Black, Non-Hispanic"
* Hispan is not equal to Not Hispanic = "Hispanic"
* Race is not Black or White and Hispan is Not Hispanic  = "Other Races and Ethnicities" 
* Race is White and Hispan is Not Hispanic = "White, Non-Hispanic" 

```{r}
acs_clean <- acs_clean %>%
  mutate(
    subgroup_race = case_when(
      hispan != "Not Hispanic" ~ "Hispanic",
      race == "White" ~ "White, Non-Hispanic",
      race == "Black/African American" ~ "Black, Non-Hispanic",
      !race %in% c("Black/African American", "White") ~ "Other Races and Ethnicities"
    )
  )

```

Look at the race/ethnicity subgroup distribution.

```{r}
acs_clean %>% 
  count(subgroup_race) %>% 
  ggplot(mapping = aes(x = factor(subgroup_race), y = n)) +
  geom_col() +
  ggtitle("Race/ethnicity, All Records") +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Race/ethnicity",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

### Create poverty variable

* **HHINCOME:** N/As reported as "9999999".

There are several cases of records missing HHINCOME, which extends the density distribution tail out to 9999999. 

```{r}
acs_clean %>% 
  ggplot(aes(x = hhincome)) +
  geom_density(color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("Household Income Variable Results") +
  ylab("Density")
```

Turn the missing/"not in universe" values for the `hhincome` variable into NAs. Rename to the more meaningful "household_income". 

```{r}

acs_clean <- acs_clean %>%
  mutate(household_income = ifelse(hhincome == 9999999, NA_integer_,
                          hhincome)
  )

```

Look at distribution of `household_income` after adjustment. Some outliers will still exist but bunching around the missing value should not be present.

```{r}

acs_clean %>% 
  ggplot(aes(x = household_income)) +
  geom_density(adjust = 5, color = "blue", fill = alpha("blue", 0.3)) +
  theme_minimal() +
  ggtitle("Household Income Variable Results") +
  ylab("Density")

```

For the poverty subgroup we want to put each respondent into two groups: those that live in households earning more than 50,000 dollars a year and those in households earning less than 50,000 dollars a year. 

First, create a binary variable indicating whether household income falls above or below 50,000 dollars a year.

```{r}
acs_clean <- acs_clean %>% 
  mutate(subgroup_income = case_when(household_income >= 50000 ~ "$50,000 or More",
                                     household_income < 50000 ~ "Less than $50,000",
         TRUE ~ NA_character_))
```

Visualize the distribution of the income category. There are significantly more respondents in households earning above 50,000 dollars a year and relatively few NAs.

```{r}
acs_clean %>% 
  count(subgroup_income) %>% 
  ggplot(mapping = aes(x = factor(subgroup_income), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("Income subgroup, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Household income subgroup",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

## Crosswalk

Read in the PUMA to county crosswalk file. This file is created by the program generate_puma_county_crosswalks.rmd in the geographic-crosswalks folder.

```{r}
puma_county_crosswalk <- read_csv(
  here::here("geographic-crosswalks", "data", "crosswalk_puma_to_county.csv")
  )
```

Create a version with just unique counties for creating a version of the data that matches the UMF county list.

```{r}
if(params$year < 2022){
  county_list <- puma_county_crosswalk %>%
    filter(crosswalk_period == "pre-2022") %>% 
    select(statefip, county) %>% 
    filter(statefip != 72) %>% 
    unique()

}else{
  county_list <- puma_county_crosswalk %>% 
  filter(crosswalk_period == "2022") %>% 
  select(statefip, county) %>% 
  filter(statefip != 72) %>% 
  unique()
}

```

## Merge Crosswalk 

Create a variable in the ACS data indicating whether the survey is pre or post-2022. This will be used to join on the correct crosswalk information.

```{r}
acs_clean <- acs_clean %>% 
  mutate(crosswalk_period = ifelse(year < 2022, "pre-2022", "2022"))

```

Check that the assignment worked. All years prior to 2022 should be designated "pre-2022".

```{r}
count(acs_clean, crosswalk_period, year)

```

Join the cleaned ACS data onto the crosswalk.

```{r}
acs_crosswalked <- left_join(
  acs_clean, 
  puma_county_crosswalk, 
  by = c("crosswalk_period", "statefip","puma"),
  relationship = "many-to-many" 
)

rm(acs_clean)

```

Drop any observations with NA for `afact` (i.e. there is no county of interest overlapping this PUMA).

```{r}
count(acs_crosswalked, is.na(afact))

acs_crosswalked <- acs_crosswalked %>% 
  drop_na(afact)

```

Also filter out cases where `afact` is equal to zero. These cases will not be counted in the metric calculation.

```{r}
count(acs_crosswalked, afact == 0)

acs_crosswalked <- acs_crosswalked %>% 
  filter(afact > 0)

```

Adjust the person weight to account for PUMA-to-county mapping (those where the PUMA is not entirely inside the county).

```{r}
select(acs_crosswalked, perwt, repwtp1, repwtp80, afact)

acs_crosswalked <- acs_crosswalked %>%
  mutate(perwt = perwt * afact) %>% 
  mutate(across(matches("repwtp[0-9]+"), ~.x * afact))

select(acs_crosswalked, perwt, repwtp1, repwtp80, afact) 
```

### Create computational variables

Create a binary preschool variable indicating whether the child is in preschool/pre-K or not. IPUMS codes  Nursery school/preschool (1) and N/A (0) (re: grade level attending). 

The way the code was built in prior years it is assumed N/A means that the child is not attending any school.

```{r}
acs_crosswalked <- acs_crosswalked %>% 
  filter(grade_attending %in% c("Nursery school/preschool", "N/A", "Kindergarten")) %>% 
  mutate(preschool = grade_attending == "Nursery school/preschool")

```

Evaluate the share of 3/4 year olds in kindergarten in each state. The share varies by state, with some states reaching upwards of 6 percent of 3/4 year olds being in Kindergarten.

```{r}
acs_crosswalked %>% 
  group_by(statefip) %>% 
  summarise(
    wtd_3_4yo = sum(perwt),
    wtd_kind = sum(perwt[grade_attending == "Kindergarten"]),
    count_3_4yo = n(),
    count_kind = sum(grade_attending == "Kindergarten"),
    shr_kindergarten_weighted = wtd_kind/wtd_3_4yo,
    shr_kindergarten_record_count = count_kind/count_3_4yo
  ) %>% 
  select(statefip, shr_kindergarten_weighted, shr_kindergarten_record_count) %>% 
  reactable(
    columns = list(
      shr_kindergarten_weighted = colDef(format = colFormat(percent = TRUE, digits = 1)),
      shr_kindergarten_record_count = colDef(format = colFormat(percent = TRUE, digits = 1))
    )
  )

```

Check if `grade_attending` is ever `NA`.

```{r}
stopifnot(sum(is.na(acs_crosswalked$grade_attending)) == 0)

```

Confirm there are no vacant properties included in the data.

```{r}
stopifnot(sum(is.na(acs_crosswalked$vacancy)) == 0)

```

## Create pre-K metric: All

### Pre-drop suppressed cells

First, to save time when processing the metric, calculate the effective sample count for each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: all-effective-samples

acs_all <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, county) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_all %>%
  group_by(year, sample, crosswalk_period, statefip, county) %>%
  summarize(
    sample = n(),
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    stats_with_30 = sum(sample >= 30),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the preschool access metric. 

Objective: calculate the percent of individuals between 3 and 4 that are enrolled in pre-K.

Aggregation should be weighted by PERWT (this is a person level statistic).

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-all

acs_all <- acs_all %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

Calculate the county-level metrics. 

`Calc_survey_mean` takes the ACS data and transitions it into a srvyr object. This allows the program to apply survey_mean which is a powerful function that calculates precise confidence intervals from data sets with replicate weights.  


```{r}
#| label: calc-all

results_all <- acs_all %>%
  group_split(statefip) %>% 
  map_dfr(~ calc_survey_mean(.data = .x, .geo_level = county))

```

Clean up the confidence interval bounds and sort the data.

```{r}
#| label: finalize-all

results_all <- finalize_metric(results_all)

```

```{r}
rm(acs_all)
```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 

Expand the county_list file so it includes every year in the results. Join the results onto this file and test that the number of records matches the total number of counties we anticipate.

```{r}
expanded_county_list <- county_list %>% 
  left_join(results_all, by = c("statefip", "county"), relationship = "many-to-many") %>%
  mutate(geoid = paste0(statefip, county)) %>% 
  expand(year, geoid) %>% 
  mutate(statefip = str_sub(geoid, 1, 2),
         county = str_sub(geoid, 3, 5)) 

results_all_expand <- expanded_county_list %>% 
  left_join(results_all, by = c("year", "statefip", "county")) %>% 
  filter(!is.na(year))

if(params$year < 2022){
  stopifnot(nrow(results_all_expand) == 3143 * n_distinct(results_all_expand$year))

} else{
    stopifnot(nrow(results_all_expand) == 3144 * n_distinct(results_all_expand$year))
}
```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst. 

The `share_in_preschool_quality` variable combines information on the quality of the crosswalk and the sample size (effective sample) to create a final quality flag.

```{r}
metrics_education_all <- results_all_expand %>% 
  mutate(
    share_in_preschool_quality = if_else(
      is.na(share_in_preschool), 
      NA_real_,
      geographic_allocation_quality
    )
  )

```

### Write out intermediate data

```{r}
if(isTRUE(bucket_exists(bucket = my_bucket))){
     # write file to S3
    tmp <- tempfile()
    on.exit(unlink(tmp))
    write_csv(metrics_education_all, file = tmp)
    
    # put object with an upload progress bar
    put_object(tmp, object = paste0(s3_dir, "/metrics_education_all_county", "_", params$year, ".csv"), bucket = my_bucket, 
               show_progress = FALSE, multipart = FALSE)
    
 }else{
  
  write_csv(metrics_education_all, paste0(here::here("08_education", "data", "intermediate"), 
                  "/", "metrics_education_all_county_", params$year, ".csv"))
  }
```


## Create pre-K metric: Race/Ethnicity

To save time when processing the metric, calculate the effective sample count for each race-ethnicity group in each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: race-ethnicity-effective-samples

acs_race_ethnicity <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_race) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_race_ethnicity %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_race) %>%
  summarize(
    sample = n(),
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarize(
    original_stats = n(),
    stats_with_30 = sum(sample >= 30),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the pre-K metric for the race/ethnicity subgroup. 

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-race-ethnicity

acs_race_ethnicity <- acs_race_ethnicity %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

`Calc_survey_mean_subgroup` takes the ACS data and transitions it into a srvyr object. This allows the program to apply survey_mean grouped by the given subgroup.

```{r}
#| label: calc-race-ethnicity

results_race_ethnicity <- acs_race_ethnicity %>%
  group_split(statefip) %>% 
  map_dfr(
    .f = ~ calc_survey_mean_subgroup(
      .data = .x,
      .geo_level = county,
      .subgroup = subgroup_race
    )
  )
```

```{r}
#| label: finalize-race-ethnicity

results_race_ethnicity <- finalize_metric(results_race_ethnicity)

```

```{r}
rm(acs_race_ethnicity)
```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 

Create expanded version for race-ethnicity.

```{r}

expanded_county_list_race_ethnicity <- county_list %>% 
  left_join(results_race_ethnicity, by = c("statefip", "county"), relationship = "many-to-many") %>%
  mutate(geoid = paste0(statefip, county)) %>% 
  expand(year, geoid, subgroup_race) %>% 
  mutate(statefip = str_sub(geoid, 1, 2),
         county = str_sub(geoid, 3, 5)) 

results_race_ethnicity_expanded <- expanded_county_list_race_ethnicity  %>% 
  left_join(results_race_ethnicity, by = c("year", "statefip", "county", "subgroup_race")) %>% 
  filter(!is.na(year), !is.na(subgroup_race)) %>% 
  mutate(subgroup_type = "race-ethnicity") %>% 
  rename(subgroup = subgroup_race)

```

## Create pre-K metric: Income subgroup

To save time when processing the metric, calculate the effective sample count for each income group in each county, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: income-effective-samples

acs_income <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_income) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_income %>%
  group_by(year, sample, crosswalk_period, statefip, county, subgroup_income) %>%
  summarise(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarise(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the pre-K metric for the income subgroup. 

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-income

acs_income <- acs_income %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

`Calc_survey_mean_subgroup` takes the ACS data and transitions it into a srvyr object. This allows the program to apply survey_mean grouped by the given subgroup.


```{r}
#| label: calc-income

results_income <- acs_income %>%
  group_split(statefip) %>% 
  map_dfr(
    .f = ~ calc_survey_mean_subgroup(
      .data = .x,
      .geo_level = county,
      .subgroup = subgroup_income
    )
  )
```

```{r}
#| label: finalize-income

results_income <- finalize_metric(results_income)

```

```{r}
rm(acs_income)
```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 

Create expanded version for the income subgroup.

```{r}
expanded_county_list_income <- county_list %>% 
  left_join(results_income, by = c("statefip", "county"), relationship = "many-to-many") %>%
  mutate(geoid = paste0(statefip, county)) %>% 
  expand(year, geoid, subgroup_income) %>% 
  mutate(statefip = str_sub(geoid, 1, 2),
         county = str_sub(geoid, 3, 7)) 

results_income_expanded <- expanded_county_list_income %>% 
  left_join(results_income, by = c("year", "statefip", "county", "subgroup_income")) %>% 
  filter(!is.na(year), !is.na(subgroup_income)) %>% 
  mutate(subgroup_type = "income") %>% 
  rename(subgroup = subgroup_income)
```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst. 

First combine the subgroup data sets.

```{r}
metrics_education_sub <-results_all_expand %>% 
  mutate(subgroup = "All",
         subgroup_type = "all") %>% 
  bind_rows(results_race_ethnicity_expanded, results_income_expanded)

if(params$year < 2022){
  stopifnot(nrow(metrics_education_sub) == 3143 * n_distinct(results_all_expand$year) * 7)

} else{
    stopifnot(nrow(metrics_education_sub) == 3144 * n_distinct(results_all_expand$year) * 7)
}
```

Now create the metric quality variable. The `share_in_preschool_quality` variable combines information on the quality of the crosswalk and the sample size (effective sample) to create a final quality flag.

```{r}

metrics_education_sub <- metrics_education_sub %>% 
  mutate(
    share_in_preschool_quality = if_else(
      is.na(share_in_preschool), 
      NA_real_,
      geographic_allocation_quality
    )
  )

```

### Write out intermediate data

For internal users with AWS access - write out intermediate data.

```{r}
if(isTRUE(bucket_exists(bucket = my_bucket))){
     # write file to S3
    tmp <- tempfile()
    on.exit(unlink(tmp))
    write_csv(metrics_education_sub, file = tmp)
    
    # put object with an upload progress bar
    put_object(tmp, object = paste0(s3_dir, "/metrics_education_sub_county", "_", params$year, ".csv"), bucket = my_bucket, 
               show_progress = FALSE, multipart = FALSE)
    
 }else{
  
  write_csv(metrics_education_sub, paste0(here::here("08_education", "data", "intermediate"), 
                  "/", "metrics_education_sub_county_", params$year, ".csv"))
  }
```

If updating a single year the program ends here. To see validation results re-run with selection that all years of intermediate data are available.

```{r}
if(single_year_update == "Yes"){
  knitr::knit_exit()
}
```

## Result Validation

Validate results for all years of available output.

### Read intermediate files

Read in the intermediate files created for each ACS year available. 

Function reads the CSVs from intermediate folder or from AWS if the user has access. These are all years of the metric files that need to be merged, tested for quality and read out as final files.

```{r}
read_intermediate <- function(year, file_type){
  
  if(isTRUE(bucket_exists(bucket = my_bucket))) {
    
   df <- s3read_using(FUN=read_csv, 
                 bucket = my_bucket, 
                 object=paste0(s3_dir, "/metrics_education_", file_type, "_", year, ".csv")) %>% 
      mutate(crosswalk_period = as.character(crosswalk_period))
  
  }
  else{
  
  df <- read_csv(paste0(here::here("08_education", "data", "intermediate", "preschool"), 
                  "/", "metrics_education_", file_type, "_", year, ".csv")) %>% 
      mutate(crosswalk_period = as.character(crosswalk_period))
  }
  
}
```

```{r}

metrics_education_all <- map_df(.x = existing_years, .f = ~read_intermediate(year = .x,
                                                                          file_type = "all_county"))
metrics_education_sub <- map_df(.x = existing_years, .f = ~read_intermediate(year = .x,
                                                                          file_type = "sub_county"))
  
```

Create summary tables for the values from the results for both all and for subgroups.

```{r}
metrics_education_all %>% 
  select(share_in_preschool:share_in_preschool_quality) %>% 
  summary()

metrics_education_sub %>% 
  filter(subgroup != "All") %>% 
  select(share_in_preschool:share_in_preschool_quality) %>% 
  summary()
```

Look at distribution of pre-K attendance share by county for all and for subgroups.

```{r}

metrics_education_all %>% 
  filter(year == params$year) %>% 
  select(share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  ggtitle(paste0("Distribution of share prek_attendance, by county ", params$year, "(5-year data)")) +
  ylab("Density")

metrics_education_sub %>% 
  filter(year == params$year, subgroup != "All") %>% 
  select(share_in_preschool) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  ggtitle(paste0("Distribution of share prek_attendance, subgroups, by county ", params$year, "(5-year data)")) +
  ylab("Density")
  

```

Look at distribution of prek_attendance share by county for each individual subgroup.

```{r}

metrics_education_sub %>% 
  filter(year == params$year) %>% 
  ggplot(aes(x = share_in_preschool)) +
  geom_density(alpha = 0.15) +
  facet_wrap(~subgroup) +
  labs(
    title = paste0("Distribution of share prek_attendance, subgroups, by county ", params$year, "(5-year data)"),
    y = "Density"
  )

```

### Time trends

Compare trends for the share in preschool overtime for all years in the data.

```{r}
metrics_education_all %>%
  group_by(statefip, county) %>%
  mutate(share_in_preschool_change = share_in_preschool - lag(share_in_preschool)) %>%
  filter(year == params$year) %>%
  ggplot(aes(share_in_preschool, share_in_preschool_change)) +
  geom_point(alpha = 0.2)

metrics_education_all %>%
  select(year, statefip, county, share_in_preschool) %>%
  pivot_wider(
    names_from = year, 
    values_from = share_in_preschool
  ) %>%
  ggplot(aes(`2021`, `2023`)) +
  geom_abline() +
  geom_point(alpha = 0.1)

```

### Confidence intervals

Check the missingness pattern for confidence intervals.

```{r}
nonmissing <- metrics_education_all |>
  filter(!is.na(share_in_preschool) & !is.na(share_in_preschool_lb) & !is.na(share_in_preschool_ub))

missing <- metrics_education_all |>
  filter(is.na(share_in_preschool) & is.na(share_in_preschool_lb) & is.na(share_in_preschool_ub))

stopifnot(nrow(nonmissing) + nrow(missing) == nrow(metrics_education_all))
```

Check the order. There are three variables and we are interested in pairwise comparisons, we can test that these line up. The upper-bound value should always be greater than the value and the lower-bound value. The value should always be greater than the lower-bound value.

```{r}
# upper bound is always greater than the estimate
stopifnot(all(nonmissing$share_in_preschool_ub > nonmissing$share_in_preschool))

# upper bound is always greater than the lower bound
stopifnot(all(nonmissing$share_in_preschool_ub > nonmissing$share_in_preschool_lb))

# estimate is always greater than the lower bound
stopifnot(all(nonmissing$share_in_preschool > nonmissing$share_in_preschool_lb))
```

Look at confidence intervals.

```{r}
metrics_education_all %>%
  ggplot(aes(share_in_preschool, share_in_preschool_lb)) +
  geom_point(alpha = 0.1) +
  labs(title = "The relationship between the estimate and the lower bound is sensible")

metrics_education_all %>%
  ggplot(aes(share_in_preschool_ub, share_in_preschool)) +
  geom_point(alpha = 0.1) +
  labs(title = "The relationship between the estimate and the upper bound is sensible")

metrics_education_all %>%
  ggplot(aes(share_in_preschool_ub, share_in_preschool_lb)) +
  geom_point(alpha = 0.1) +
  labs(title = "The relationship between the upper bound and the lower bound is sensible")
```

Distribution of confidence interval widths.

```{r}
metrics_education_all %>%
  mutate(ci_width = share_in_preschool_ub - share_in_preschool_lb) %>%
  pull(ci_width) %>%
  summary(na.rm = TRUE)
```

### Quality and suppression

Look at the counts of the quality flag.

```{r}
metrics_education_all %>% 
  select(share_in_preschool_quality) %>% 
  ggplot(aes(x = share_in_preschool_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  ggtitle("Quality Flag, All (5-year data)") +
  ylab("Count")

metrics_education_sub %>% 
  filter(subgroup != "All") %>% 
  select(share_in_preschool_quality) %>% 
  ggplot(aes(x = share_in_preschool_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  ggtitle("Quality Flag, subgroups (5-year data") +
  ylab("Count")
```

Look at quality by  each individual subgroup.

```{r}
metrics_education_sub %>% 
  filter(subgroup != "All") %>% 
  ggplot(aes(x = share_in_preschool_quality)) +
  geom_histogram(color = "blue", fill = alpha("blue", 0.3), binwidth = 1.0) +
  facet_wrap(~subgroup) +
  ggtitle("Quality Flag, subgroups (5-year data)") +
  ylab("Count")
```

Tabulate share of data suppressed by year.

```{r}
metrics_education_all %>% 
  group_by(year) %>% 
  summarise(suppressed = sum(is.na(share_in_preschool)),
            total = n(),
            suppressed_share = suppressed/total)

metrics_education_sub %>% 
  filter(subgroup != "All") %>% 
  group_by(year, subgroup) %>% 
  summarise(suppressed = sum(is.na(share_in_preschool)),
            total = n(),
            suppressed_share = suppressed/total)

```

## Final Test and Export

Rename state.

```{r}
metrics_education_all <- metrics_education_all %>% 
  rename("state" = "statefip")

metrics_education_sub <- metrics_education_sub %>% 
  rename("state" = "statefip")
```

Order the variables how we want.

```{r}
metrics_education_all <- metrics_education_all %>% 
  select(year, state, county, share_in_preschool, 
         share_in_preschool_lb, share_in_preschool_ub, share_in_preschool_quality)

metrics_education_sub <- metrics_education_sub %>% 
  select(year, state, county, subgroup_type, subgroup, share_in_preschool,
         share_in_preschool_lb, share_in_preschool_ub, share_in_preschool_quality) %>%
  arrange(year, state, county, subgroup_type, subgroup)

```

Run file through evaluate final data function.

All.

```{r}

evaluate_final_data(data = metrics_education_all, exp_form_path = here::here("10a_final-evaluation", "evaluation_form_preschool_overall_county.csv"), geography = "county", subgroups = FALSE, confidence_intervals = TRUE)

```

Race-ethnicity.

```{r}
metrics_education_race <- metrics_education_sub %>% 
  filter(subgroup_type %in% c("all", "race-ethnicity")) 

evaluate_final_data(data = metrics_education_race, exp_form_path = here::here("10a_final-evaluation", "evaluation_form_preschool_race_eth_county.csv"), geography = "county", subgroups = TRUE, confidence_intervals = TRUE)

```

Income.

```{r}
metrics_education_income <- metrics_education_sub %>% 
  filter(subgroup_type %in% c("all", "income")) 

evaluate_final_data(data = metrics_education_income, exp_form_path = here::here("10a_final-evaluation", "evaluation_form_preschool_income_county.csv"), geography = "county", subgroups = TRUE, confidence_intervals = TRUE)

```


### Export as CSV

```{r}

metrics_education_all %>% 
  head(10)

write_csv(metrics_education_all, 
          here::here("08_education", "data", "final", "metrics_preschool_county_all_longitudinal_all.csv")
          )

metrics_education_race %>% 
  head(10)

write_csv(metrics_education_race, here::here("08_education", "data", "final",
                                             "metrics_preschool_county_race-ethnicity_longitudinal.csv"))

metrics_education_income %>% 
  head(10)

write_csv(metrics_education_income, here::here("08_education", "data", "final",
                                               "metrics_preschool_county_income_longitudinal.csv"))
```