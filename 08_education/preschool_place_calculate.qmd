---
title: "Calculate access to pre-kindergarten Predictor, Place-level"
author: "JP Walsh"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: show
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
params:
  year: "2014"
---

*Program for the creation of the Access to Pre-Kindergarten Upward Mobility Predictor at the place-level*

ACS Code: Initially written by Tina Chelidze and updated by JP Walsh 2024.

Primary data derived from the IPUMS API.

Based on processes developed by Paul Johnson and Kevin Werner in SAS.

*User note* This program depends on extracts from the IPUMS ACS API interface. If you are updating the extract please remember to update the note of the date of latest extract in the Housekeeping section of this program.

If you are an internal tester using the AWS feature of this program remember to enter the passkey into your environment using Sys.setenv()

*User warning* The ACS micro data used to create this metric is large and will take time to read in. It is strongly recommended that you use a server with significant computing power to run this.

## Housekeeping

Read in packages for use. If you do not have an IPUMS API key you will need to make one via the [IPUMS website](https://www.ipums.org/).

```{r, results='hide'}
library(tidyverse)
library(Hmisc)
library(ipumsr)
library(reactable)
library(srvyr)
library(scales)


options(scipen = 999)


# DO NOT PUSH YOUR API KEY. You only have to run this once and then comment it out as below.
#set_ipums_api_key("Your KEY", save = TRUE)

s3_dir <- "metric_name/data/acs"
my_bucket <- "mobility-from-poverty-test"

source(here::here("functions", "API", "extract_ipums_draft.R"))
source(here::here("functions", "API", "ipums_repwt_pre-k_draft.R"))
source(here::here("08_education", "R", "finalize_metric.R"))
source(here::here("08_education", "R", "calc_survey_mean.R"))
source(here::here("08_education", "R", "calc_survey_mean_subgroup.R"))
```

Date of IPUMS extract. Denote the latest date that the IPUMS extract was changed and pulled both for the overall data and the repweights. The recommended date notation format is "mm_dd_yy".

```{r}
ipums_extract_date <- "01_13_25"
ipums_repwt_extract_date <- "01_13_25"

```


## Read Person-Level Data 

Read in the ACS extracts using the `extract_ipums()` function. Make sure to change the survey list to reflect what years you want to include in the data. The surveys being used in the code are defined in the code chunk below. For a list of available ACS surveys and their titles via the IPUMSR package you can run the following function: get_sample_info("acs").

```{r}

acs_surveys <- list(paste0("us", params$year, "c"))

```

Run extract. This will trigger an import process through IPUMS. It is encouraged to add detail to your extract description so it is clear what the extract was used for.

Date of latest extract was 12_19_24. If a new IPUMS pull is required the extract_date argument below must be updated to track that new data was downloaded. The extract only needs to be updated if changes or additions are required from the IPUMS pull (such as new dates or variables). 

```{r}
#| output: false

acs <- extract_ipums_draft(
  extract_name = paste0("umf_data_", params$year, "_preschool"),
  extract_date = ipums_extract_date,
  extract_description = paste0("Microdata pull for Access to Pre-K Metric Predictors. American Community Survey", params$year, "(5-year)."),
  survey = acs_surveys
) 

```

Look at the distribution of survey samples in the data. The number of unique samples in the data should match the number of surveys selected in the `extract_ipums()` function above.

```{r}
count(acs, sample)
```

Isolate the data to 3 and 4 year-olds. This is the age-range included in the pre-K calculation. Note: the replicate weights are limited to these ages during the data pull. 
```{r}
acs_age <- acs %>% 
  filter(age == 3 | age == 4) 

rm(acs)
```

### Replicate Weights 

Read in person-level replicate weights for the 3 and 4 year old population. These will be used in creating standard errors for the preschool access calculation. 

Date of latest extract was 01_03_24. If a new IPUMS pull is required the extract_date argument below must be updated to track that new data was downloaded. The extract only needs to be updated if changes or additions are required from the IPUMS pull (such as new dates or variables). 

```{r}
repwts <- ipums_repwt_pre_k_draft(
  extract_name = paste0("preschool_replicate_weights_", params$year),
  extract_date = ipums_repwt_extract_date,
  extract_description = paste0("Person replicate weights for Access to Preschool Metric Predictors. American Community Survey,", params$year, "(5-year)."),
  survey = acs_surveys
)  %>% 
  select(-cbserial, -cbpernum)
```


Look at the distribution of ACS survey samples in the data. The number of different samples should align with the number of surveys selected in the extract ipums function.

```{r}
count(repwts, sample)
```

Remove the sample variable.
```{r}
repwts_person <- repwts %>% 
  select(-sample)
```

### Merge on repwts

```{r}
length(unique(pull(acs_age, unique_person_id)))

length(unique(pull(repwts_person, unique_person_id)))

acs_combined <- 
  full_join(
    acs_age,
    repwts_person,
    by = "unique_person_id"
  )

length(unique(pull(acs_combined, unique_person_id)))

stopifnot(nrow(acs_combined) == nrow(acs_age))
stopifnot(nrow(acs_combined) == nrow(repwts_person))

rm(acs_age)
rm(repwts_person)
```

Check that the merge did not result in any missing values. 

```{r}
stopifnot(all(map_dbl(acs_combined, ~sum(is.na(.x))) == 0))
```

## Clean Data

Missing data is reported in a variety of ways by IPUMS data. This step walks through the missing values in key variables and checks that we are dealing with them appropriately. 

* **Age:** No missing values reported in variable description. Run the following test to confirm all values are either 3 or 4.

```{r}
stopifnot(all(acs_combined$age %in% c(3, 4)))
          
```

* **Vacancy:** reported as "0". Note there should be no vacancy results by default of the structure of census data read in (all should be "0"). Confirm this is true with the following test.

```{r}
stopifnot(all(acs_combined$vacancy == "0"))

```

* **Gradeatt:** N/As reported as "0" in all modern surveys. In this analysis we assume that a zero reported means that the individual is not in school.
Variable codes explained [here](https://usa.ipums.org/usa-action/variables/GRADEATT#codes_section).

There is a significant share of records reported as "0" for the grade level attending variable.

```{r}
acs_combined %>% 
  mutate(gradeatt = zap_labels(gradeatt)) %>% 
  count(gradeatt) %>% 
  ggplot(mapping = aes(x = factor(gradeatt), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("gradeatt, All Records") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Grade Attending",
       y = NULL)

```

Confirm the values from the value labels of the GRADEATT variable to ensure we are interpreting them correctly. 1 is Nursery school/preschool and 0 is N/A - interpreting as not in school for the sake of this analysis. 

```{r}
head(acs_combined$gradeatt)
```

Rename to the more meaningful "grade_attending". And turn the variable into a factor so we can use the labels which provide clear descriptions of the grades.

```{r}
acs_clean <- acs_combined %>% 
  mutate(grade_attending = as_factor(gradeatt))
```

Examine the group quarters, `gq`, variable, we want to include both households and Group Quarters in this metric as both are relevant to the preschool access predictor in a geography.

IPUMS includes the following categories:

* 0: Vacancy
* 1: Households under 1970 definition
* 2: Additional households under 1990 definition
* 3: Institutions
* 4: Other group quarters
* 5: Additional households under 2000 definition
* 6: Fragments

Check the distribution of GQ categories. Only households and group quarters should be included (no vacancy or fragments).

```{r}
acs_clean %>%  
  count(gq) %>% 
  ggplot(mapping = aes(x = gq, y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("GQ, All Records") +
  geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "GQ",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))
```

### Create race variable

Evaluate the values in the RACE and HISPAN variables.

* IPUMS documented values for RACE: 
    + 1 White
    + 2 Black/African American/Negro
    + 3 American Indian or Alaska Native 
    + 4 Chinese 
    + 5 Japanese
    + 6 Other Asian or Pacific Islander 
    + 7 Other race 
    + 8 Two major races 
    + 9 Three or more major races

* IPUMS documented values for HISPAN: 
    + 0 Not Hispanic 
    + 1 Mexican 
    + 2 Puerto Rican 
    + 3 Cuban 
    + 4 Other 
    + 9 Not Reported 

Look at the distribution of values for the race and hispan variables.

```{r}
acs_clean %>% 
  count(race) %>% 
  ggplot(mapping = aes(x = race, y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("Race, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Race",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

Create the race/ethnicity variable. For race/ethnicity categories that are not coded as Hispanic, Hispan must be equal to "Not Hispanic". 

Rename the values from number category to race label: 

* Race is Black/African American and Hispan is Not Hispanic = "Black, Non-Hispanic"
* Hispan is not equal to Not Hispanic = "Hispanic"
* Race is not Black or White and Hispan is Not Hispanic  = "Other Races and Ethnicities" 
* Race is White and Hispan is Not Hispanic = "White, Non-Hispanic" 
  
```{r}
acs_clean <- acs_clean %>%
  mutate(
    subgroup_race = case_when(
      hispan != "Not Hispanic" ~ "Hispanic",
      race == "White" ~ "White, Non-Hispanic",
      race == "Black/African American" ~ "Black, Non-Hispanic",
      !race %in% c("Black/African American", "White") ~ "Other Races and Ethnicities"
    )
  )

```

Look at the race/ethnicity subgroup distribution.

```{r}
acs_clean %>% 
  count(subgroup_race) %>% 
  ggplot(mapping = aes(x = factor(subgroup_race), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("Race/ethnicity, All Records") +
 geom_text(mapping = aes(label = n), vjust = -1) +    
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Race/ethnicity",
       y = NULL)+
  scale_x_discrete(labels = label_wrap(10))

```

## Crosswalk

Read in the PUMA to place crosswalk file. This file is created by the program generate_puma_place_crosswalks.rmd in the geographic-crosswalks folder. 

```{r}
puma_place_crosswalk <- read_csv(
  here::here("geographic-crosswalks", "data", "crosswalk_puma_to_place.csv")
)
```

Create a version with just unique places for creating a version of the data that matches the UMF place list.

```{r}
place_list <- puma_place_crosswalk %>% 
  select(statefip, place) %>% 
  filter(statefip != 72) %>% 
  unique()
```

## Merge Crosswalk 

Create a variable in the ACS data indicating whether the survey year is pre or post-2022. This will be used to join on the correct crosswalk information.

```{r}
acs_clean <- acs_clean %>% 
  mutate(crosswalk_period = ifelse(year < 2022, "pre-2022", "2022"))
```

Check that the assignment worked. All years prior to 2022 should be designated "pre-2022".

```{r}
count(acs_clean, crosswalk_period, year)
```

Join the cleaned ACS data onto the crosswalk. 

```{r}
acs_crosswalked <- left_join(
  acs_clean, 
  puma_place_crosswalk, 
  by = c("crosswalk_period", "statefip","puma"),
  relationship = "many-to-many"
)

rm(acs_clean)

```

Check that each place has joined to many ACS records. We select the largest 486 places in our crosswalk, all 486 unique places should be connected to multiple records.

```{r}
acs_crosswalked %>% 
  group_by(place, statefip) %>% 
  count()
```

Drop any observations with NA for `afact` (i.e. there is no place of interest overlapping this PUMA).

```{r}
count(acs_crosswalked, is.na(afact))

acs_crosswalked <- acs_crosswalked %>% 
  drop_na(afact)

```

Also filter out cases where `afact` is equal to zero. These cases will not be counted in the metric calculation.

```{r}
count(acs_crosswalked, afact == 0)

acs_crosswalked <- acs_crosswalked %>% 
  filter(afact > 0)

```

Adjust the person weight to account for PUMA-to-place mapping (those where the PUMA is not entirely inside the place).

```{r}
select(acs_crosswalked, perwt, repwtp1, repwtp80, afact)

acs_crosswalked <- acs_crosswalked %>%
  mutate(perwt = perwt * afact) %>% 
  mutate(across(matches("repwtp[0-9]+"), ~.x * afact))

select(acs_crosswalked, perwt, repwtp1, repwtp80, afact) 
```

### Create additional variables

Create a binary preschool variable indicating whether the child is in preschool/pre-K or not. IPUMS codes  Nursery school/preschool (1) and N/A (0) (re: grade level attending). 
The way the code was built in prior years it is assumed N/A means that the child is not attending any school.

```{r}
acs_crosswalked <- acs_crosswalked %>% 
  filter(grade_attending %in% c("Nursery school/preschool", "N/A", "Kindergarten")) %>% 
  mutate(preschool = grade_attending == "Nursery school/preschool")
```

Evaluate the share of 3/4 year olds in kindergarten in each state. The share varies by state, with some states reaching upwards of 6 percent of 3/4 year olds being in Kindergarten.

```{r}
acs_crosswalked %>% 
  group_by(statefip) %>% 
  summarise(
    wtd_3_4yo = sum(perwt),
    wtd_kind = sum(perwt[grade_attending == "Kindergarten"]),
    count_3_4yo = n(),
    count_kind = sum(grade_attending == "Kindergarten"),
    shr_kindergarten_weighted = wtd_kind/wtd_3_4yo,
    shr_kindergarten_record_count = count_kind/count_3_4yo
  ) %>% 
  select(statefip, shr_kindergarten_weighted, shr_kindergarten_record_count) %>% 
  reactable(
    columns = list(
      shr_kindergarten_weighted = colDef(format = colFormat(percent = TRUE, digits = 1)),
      shr_kindergarten_record_count = colDef(format = colFormat(percent = TRUE, digits = 1))
    )
  )
```

Check if `grade_attending` is ever `NA`.

```{r}
stopifnot(sum(is.na(acs_crosswalked$grade_attending)) == 0)

```

Confirm there are no vacant properties included in the data.

```{r}
stopifnot(sum(is.na(acs_crosswalked$vacancy)) == 0)

```

Check the distribution of the `grade_attending` variable one last time - there should be no NA values included.

```{r}
acs_crosswalked %>% 
  count(grade_attending) %>% 
  ggplot(mapping = aes(x = factor(grade_attending), y = n)) +
  geom_col() +
  theme_minimal() +
  ggtitle("gradeatt, All Records") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  labs(x = "Current Grade Attending",
       y = NULL)
```

## Create pre-K metric: All

### Pre-drop suppressed cells

First, to save time when processing the metric, calculate the effective sample count for each place, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: all-effective-samples

acs_all <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, place) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_all %>%
  group_by(year, sample, crosswalk_period, statefip, place) %>%
  summarise(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarise(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the preschool access metric. 

Objective: calculate the percent of individuals between 3 and 4 that are in pre-K or higher.

Aggregation should be weighted by PERWT (this is a person level statistic).

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-all

acs_all <- acs_all %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

Calculate the place-level metrics. 

```{r}
#| label: calc-all

results_all <- acs_all %>%
  group_split(statefip) %>% 
  map_dfr(~ calc_survey_mean(.data = .x, .geo_level = place))

```

Clean up the confidence interval bounds and sort the data.

```{r}
#| label: finalize-all

results_all <- finalize_metric(results_all)

```

```{r}
rm(acs_all)

```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 

Expand the place_list file so it includes every year in the results. Join the results onto this file and test that the number of records matches the total number of places we anticipate.

```{r}
expanded_place_list <- place_list %>% 
  left_join(results_all, by = c("statefip", "place"), relationship = "many-to-many") %>%
  mutate(geoid = paste0(statefip, place)) %>% 
  expand(year, geoid) %>% 
  mutate(statefip = str_sub(geoid, 1, 2),
         place = str_sub(geoid, 3, 7)) 

results_all_expand <- expanded_place_list %>% 
  left_join(results_all, by = c("year", "statefip", "place")) %>% 
  filter(!is.na(year))


stopifnot(nrow(results_all_expand) == 486 * n_distinct(results_all_expand$year))
```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst. 

The `share_in_preschool_quality` variable combines information on the quality of the crosswalk and the sample size (effective sample) to create a final quality flag.  

```{r}
metrics_education_all <- results_all_expand %>% 
  mutate(
    share_in_preschool_quality = if_else(
      is.na(share_in_preschool), 
      NA_real_,
      geographic_allocation_quality
    )
  )

```

### Write out intermediate data

```{r}

 if (!aws.s3::object_exists(paste0(s3_dir, "/metrics_education_all", "_", params$year[1], ".csv"), bucket = my_bucket)){
    
    # write file to S3
    tmp <- tempfile()
    on.exit(unlink(tmp))
    write_csv(metrics_education_all, file = tmp)
    
    # put object with an upload progress bar
    put_object(tmp, object = paste0(s3_dir, "/metrics_education_all", "_", params$year, ".csv"), bucket = my_bucket, 
               show_progress = TRUE, multipart = FALSE)
    
  }

```


## Create pre-K metric: Race/Ethnicity

To save time when processing the metric, calculate the effective sample count for each race-ethnicity group in each place, defined as the sum of the `afact` variable. This is used to create a cutoff for data quality based on the actual number of survey records being used in the calculation. We will not include counties with less than 30 effective samples.

```{r}
#| label: race-ethnicity-effective-samples

acs_race_ethnicity <- acs_crosswalked %>%
  group_by(year, sample, crosswalk_period, statefip, place, subgroup_race) %>%
  mutate(effective_sample = sum(afact)) %>% 
  ungroup()

# calculate the number of statistics after suppressing values
acs_race_ethnicity %>%
  group_by(year, sample, crosswalk_period, statefip, place, subgroup_race) %>%
  summarise(
    effective_sample = max(effective_sample)
  ) %>%
  ungroup() %>%
  summarise(
    original_stats = n(),
    unsuppressed_stats = sum(effective_sample >= 30)
  )

```

Create the pre-K metric for the race/ethnicity subgroup. 

Remove records from counties below the size quality cutoff. 

```{r}
#| label: subset-race-ethnicity

acs_race_ethnicity <- acs_race_ethnicity %>% 
  filter(effective_sample >= 30)

```

### Calculate metric

```{r}
#| label: calc-race-ethnicity

results_race_ethnicity <- acs_race_ethnicity %>%
  group_split(statefip) %>% 
  map_dfr(
    .f = ~ calc_survey_mean_subgroup(
      .data = .x,
      .geo_level = place,
      .subgroup = subgroup_race
    )
  )
```

```{r}
#| label: finalize-race-ethnicity

results_race_ethnicity <- finalize_metric(results_race_ethnicity)

```

```{r}
rm(acs_race_ethnicity)
```

## Add Suppressed Rows to Data

To create the metric we suppressed counties that did not meet the threshold for sample size but we need to include these in the final data. Create an all version of the data that includes counties that were suppressed prior to the survey_mean calculation. 

Create expanded version for race-ethnicity.

```{r}
expanded_place_list_race <- place_list %>% 
  left_join(results_race_ethnicity, by = c("statefip", "place"), relationship = "many-to-many") %>%
  mutate(geoid = paste0(statefip, place)) %>% 
  expand(year, geoid, subgroup_race) %>% 
  mutate(statefip = str_sub(geoid, 1, 2),
         place = str_sub(geoid, 3, 7)) 

results_race_ethnicity_expanded <- expanded_place_list_race  %>% 
  left_join(results_race_ethnicity, by = c("year", "statefip", "place", "subgroup_race")) %>% 
  filter(!is.na(year), !is.na(subgroup_race)) %>% 
  mutate(subgroup_type = "race-ethnicity") %>% 
  rename(subgroup = subgroup_race)
```

## Data Quality Flags

Add a flag for data quality, this is a numeric variable between 1 and 3 with 1 representing the best quality and 3 representing the worst. 

First combine the subgroup data sets. Provide the all results a subgroup and subgroup_type value of "All".

```{r}

metrics_education_sub <-results_all_expand %>% 
  mutate(subgroup = "All",
         subgroup_type = "all") %>% 
  bind_rows(results_race_ethnicity_expanded)

stopifnot(nrow(metrics_education_sub) == 486 * n_distinct(results_all_expand$year) * 5)

```

Now create the metric quality variable. The `share_in_preschool_quality` variable combines information on the quality of the crosswalk and the sample size (effective sample) to create a final quality flag. Note that any place with NA for the `share_in_preschool` metric is being suppressed due to sample size and is given a quality flag of 3.  

```{r}
metrics_education_sub <- metrics_education_sub %>% 
   mutate(
    share_in_preschool_quality = if_else(
      is.na(share_in_preschool), 
      NA_real_,
      geographic_allocation_quality
    )
  )
```

### Write out intermediate data

```{r}
 if (!aws.s3::object_exists(paste0(s3_dir, "/metrics_education_sub", "_", params$year, ".csv"), bucket = my_bucket)){
    
    # write file to S3
    tmp <- tempfile()
    on.exit(unlink(tmp))
    write_csv(metrics_education_sub, file = tmp)
    
    # put object with an upload progress bar
    put_object(tmp, object = paste0(s3_dir, "/metrics_education_sub", "_", params$year, ".csv"), bucket = my_bucket, 
               show_progress = TRUE, multipart = FALSE)
    
  }
```

