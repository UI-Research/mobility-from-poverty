---
title: ""
author: ""
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    code-fold: true
    css: 10_construct-database/www/web_report.css
    toc: true
    toc_float: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
options(knitr.kable.NA = "")

```

```{r load-packages}
library(tidyverse)
library(here)
library(assertr)
library(gt)

```

```{r clean-up-messy-data}
juv_crime <- read_csv(
  here("07_safety", 
       "modified data",
       "2021_juv_arrest_rate_place_subgroup.csv")
  ) %>%
  mutate(subgroup = case_when(
      subgroup == "white" ~ "White",
      subgroup == "black" ~ "Black",
      subgroup == "asian_other" ~ "Other Races and Ethnicities",
      subgroup == "hispanic" ~ "Hispanic",
      subgroup == "all" ~ "All",
      TRUE ~ subgroup
    )
  ) %>%
  rename(
    rate_juv_arrest = juv_arrest_rate,
    rate_juv_arrest_quality = juv_arrest_rate_quality
  ) %>%
  write_csv(here("data", "temp", "2021_juv_arrest_rate_place_subgroup.csv"))

```

```{r}
files <- c(
  ### CROSSWALK ###
  #here("geographic-crosswalks", "data", "long-xwalk_place.csv"),
  
  ### EDUCATION ###
  here("08_education", "digital_access_subgroup_city_2021.csv"),
  
  ### FINANCIAL WELLBEING ###

  ### HEALTH ###
  #no city-level health data

  ### HOUSING ###
  
  ### LOCAL GOVERNANCE ### 

  
  ### NEIGHBORHOODS ### 
  here("06_neighborhoods", "poverty-exposure", "poverty-exposure_race-ethnicity_city_2021.csv"), 
  
  ### SAFETY ###
  here("data", "temp", "2021_juv_arrest_rate_place_subgroup.csv")
  
  ### WORK ### 

)

```

```{r}
read_csv_and_clean <- function(file, is_recent = FALSE) {
  
  print(file)
  
  df <- read_csv(file, guess_max = 5000) 
  
  if ("metro" %in% colnames(df)) {
    df <- df %>%
      rename(place = metro)
  } else if("city" %in% colnames(df) & !("place" %in% colnames(df))){
    df <- df %>%
      rename(place = city)
  }
  # if("subgroup" %in% colnames(df) & !("subgroup_type" %in% colnames(df))){
  #   df <- df %>%
  #     #rename(subgroup_type = subgroup) %>%
  #     mutate(subgroup_type = "race-ethnicity")
  #   
  #   print(head(df))
  # }
  # 
  df <- df %>%
    mutate(state = stringr::str_pad(state, width = 2, pad = "0"),
           place = stringr::str_pad(place, width = 5, pad = "0"))  %>%  
    #fix column name inconsistencies:
    mutate(subgroup_type = str_replace(subgroup_type, "Race-ethnicity", "race-ethnicity")) %>%
    mutate(subgroup = str_replace(subgroup, "Other Races and Eth$", "Other Races and Ethnicities")) %>%
    mutate(subgroup = str_replace(subgroup, "White, Non Hispanic", "White, Non-Hispanic")) %>%
    mutate(subgroup = str_replace(subgroup, "Black, Non Hispanic", "Black, Non-Hispanic")) 
  

  df <- df %>%
    filter(subgroup_type == "race-ethnicity" | 
             subgroup_type == "all") %>%
    mutate(
      subgroup_type = case_when(
        subgroup == "All" ~ "all",
        TRUE ~ subgroup_type
        ))
  
    
}

db_unclean <- map(files, read_csv_and_clean) %>%
  reduce(full_join, by = c("year", "state", "place", "subgroup_type", "subgroup")) 


places <- length(unique(paste0(db_unclean$state, db_unclean$place)))
years <- length(unique(db_unclean$year))
#5 groups for each dataset (this varies between White and NH White)

stopifnot(places*years * 5 == nrow(db_unclean))
#We do not check shape here
#different groups have different race-share subgroups making this to much of a headache
```

```{r clean-data}
#' Function to clean db, largely by updating names
#' @param db_unclean (data.frame) dataframe joined by map reduce logic above
#' @return db (data.frame) the cleaned dataframe


clean_data <- function(db_unclean){
  db <- db_unclean %>%
    rename_with(.cols = starts_with("pctl"), 
              ~str_replace_all(.x, "pctl_", "pctl_income_")) %>%
    #Commenting out as we don't currently process exposure
    rename_with(.cols = contains("exposure"),
              .fn = ~paste0("share_", .x)
              ) %>%
    rename_with(~str_replace_all(.x, "digital_access", "share_digital_access"))
  
  return(db)
  
}

db <- clean_data(db_unclean)

```

rows = 486 places by 10 years by 5 subgroups

```{r}
frame <-
  bind_rows(
    expand_grid(
      read_csv(here("geographic-crosswalks", "data", "place-populations.csv"), guess_max = Inf) %>%
        filter(year == 2020) %>%
        select(-year),
      year = c(2020:2021),
      subgroup_type = c("all"),
      subgroup = c("All")
    ),
    expand_grid(
      read_csv(here("geographic-crosswalks", "data", "place-populations.csv"), guess_max = Inf) %>%
        filter(year == 2020) %>%
        select(-year),
      year = c(2020:2021),
      subgroup_type = c("race-ethnicity"),
      subgroup = c("Black", "Hispanic", "Other Races and Ethnicities", "White")
      )
    ) %>%
    
  #Note: adjustment here made because juv_arrest and digital_access data are from 2021
  # and list White (race without ethnicity) while poverty exposure comes from 2020
  # and lists Non-Hispanic White. With this change we have a perfect join
   mutate(subgroup = case_when(
        subgroup == "White" & year == 2020 ~  "White, Non-Hispanic",
        TRUE ~ subgroup
        )
        )%>%
  arrange(year, state, place, subgroup_type, subgroup)

db1 <- full_join(frame, db, by = c("year", "state", "place", "subgroup_type", "subgroup"))

# stopifnot(
#   nrow(db) == nrow(frame)
# )

```

```{r}
read_csv_recent <- function(file) {
  
  print(file)
  
  df <- read_csv(file, guess_max = 5000)
  
  
  
  if ("metro" %in% colnames(df)) {
    df <- df %>%
      rename(place = metro)
  } else if("city" %in% colnames(df) & !("place" %in% colnames(df))){
    print("CITY IN DF")
    df <- df %>%
      rename(place = city)
  }
  if("subgroup" %in% colnames(df) & !("subgroup_type" %in% colnames(df))){
    df <- df %>%
      rename(subgroup_type = subgroup) %>%
      mutate(subgroup = "race-ethnicity")
  }
  df <- df %>%
    mutate(state = stringr::str_pad(state, width = 2, pad = "0"),
           place = stringr::str_pad(place, width = 5, pad = "0")) %>%
    mutate(subgroup_type = str_replace(subgroup_type, "Race-ethnicity", "race-ethnicity")) %>%
    mutate(subgroup = str_replace(subgroup, "Other Races and Eth$", "Other Races and Ethnicities")) %>%
    mutate(subgroup = str_replace(subgroup, "White, Non Hispanic", "White, Non-Hispanic")) %>%
    mutate(subgroup = str_replace(subgroup, "Black, Non Hispanic", "Black, Non-Hispanic")) %>%
    slice_max(year) %>% 
    select(-year) 
  
  print(head(df))
  
  df <- df %>%
    filter(subgroup_type == "race-ethnicity" | 
         subgroup_type == "all")
  
  return(df)
  
}

# construct multiyear database
db_recent <- map(files, read_csv_recent) %>%
  reduce(full_join, by = c("state", "place", "subgroup_type", "subgroup")) %>%
  clean_data()
```

```{r}
db %>%
  select(ends_with("_quality")) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "quality") %>%
  count(variable, quality)

```

### Recent Database

```{r}
db_recent %>%
  select(ends_with("_quality")) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "quality") %>%
  count(variable, quality) %>%
  gt()

```

## Test

### Full Database

```{r}
db_values <- db %>%
  select(-ends_with("_quality"), -ends_with("_ub"), -ends_with("_lb"))

db_quality <- db %>%
  select(ends_with("_quality"))

db_bounds <- db %>%
  select(ends_with("_ub"), ends_with("_lb"))

```

```{r}
value_col_names <- colnames(db_values)
share_cols <- value_col_names[grepl("share_", value_col_names)]
count_cols <- value_col_names[grepl("count_", value_col_names)]

db_values %>%
  ### All columns with prefixes count or share
  assert(within_bounds(0, 1), all_of(share_cols)) %>%
  assert(within_bounds(0, Inf), all_of(count_cols))
```

Test confidence interval bounds.

```{r}

db_quality %>%
  assert(in_set(1, 2, 3), everything())

```

```{r add-labels}
place <- read_csv(here("geographic-crosswalks", "data", "place-populations.csv")) %>%
  select(state, place, state_name, place_name) %>%
  distinct()

db <- db %>%
  tidylog::left_join(place) %>%
  relocate(year, state, place, state_name, place_name)
  
db_recent <- db_recent %>%
  tidylog::left_join(place) %>%
  relocate(state, place, state_name, place_name)
```

## Write the File

```{r}
write_csv(db, here("data", "07_mobility-metrics_place_race_longitudinal.csv"))

```

```{r}
read_csv(here("06_neighborhoods", "poverty-exposure", "poverty-exposure_race-ethnicity_city_2021.csv")) %>%
  mutate(year = 2021) %>%
  rename(
    share_poverty_exposure = poverty_exposure,
    share_poverty_exposure_quality = poverty_exposure_quality
  ) %>%
  left_join(place, by = c("state", "place")) %>%
  write_csv(here("data", "07_poverty-exposure_city_subgroup.csv"))

```

```{r}
read_csv(here("08_education", "digital_access_subgroup_city_2021.csv")) %>%
  rename(
    share_digital_access = digital_access,
    share_digital_access_quality = digital_access_quality
  ) %>%
  left_join(place, by = c("state", "place")) %>%
  write_csv(here("data", "07_digital-access_city_subgroup.csv"))
    
```
