---
title: "Combine Race-Ethnicity County Files"
author: "Aaron R. Williams, JP Walsh & Ridhi Purohit"
date: today
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
execute:
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---
## Update 

This file was updated by Ridhi Purohit in March 2025 for metric release version 2025.

## Setup

```{r quarto-setup, include = FALSE}
options(knitr.kable.NA = "")

```

```{r load-packages}
library(tidyverse)
library(tidylog)
library(here)
library(assertr)
library(gt)

```

This function is used to ensure that the lower bound of a 95% confidence interval is always below the estimate and the upper bound of the a 95% confidence interval is always above the estimate. 

```{r}
#' Test the bounds of a confidence interval relative to the estimate
#'
#' @param data The data frame of interest
#' @param estimate The unquoted name of the estimate variable
#' @param lb The unquoted name of the lower bound variable
#' @param ub The unquoted name of the upper bound variable
#'
test_bounds <- function(data, estimate, lb, ub) {
  
  subset <- bind_rows(
    data |>
      filter({{ ub }} < {{ lb }}),
    data |>
      filter({{ estimate }} > {{ ub }}),
    data |>
      filter({{ estimate  }} < {{ lb }}),
  )
  
  stopifnot(nrow(subset) == 0)
  
}


#' Helper function to silence output from testing code
#'
#' @param data A data frame
#'
quiet <- function(data) {
  
  quiet <- data
  
}

#' Test for extreme outliers in the metrics
#'
#' @param data The data frame of interest
#' @param estimate The unquoted name of the estimate variable
#'
detect_outliers <- function(data, estimate) {
  
  subset <- bind_rows(
    data |>
      filter({{ ub }} < {{ lb }}),
    data |>
      filter({{ estimate }} > {{ ub }}),
    data |>
      filter({{ estimate  }} < {{ lb }}),
  )
  
  stopifnot(nrow(subset) == 0)
  
}
```

## Construct Database

### Temporary Fixes

This section implements temporary fixes and saves the resulting data in a temp folder. The saved data are then included in the output data.

```{r}

# update variable names and filter subgroup
read_csv(here("04_health/neonatal-health/data/final/rate_low_birth_weight_metric_subgroup_county.csv"))|>
  rename(
    share_low_birth_weight = rate_low_birth_weight,
    share_low_birth_weight_lb = rate_low_birth_weight_lb,
    share_low_birth_weight_ub = rate_low_birth_weight_ub,
    share_low_birth_weight_quality = rate_low_birth_weight_quality,
  ) |>
  filter(subgroup_type %in% c("all", "race-ethnicity")) |>
  write_csv(
    here("data", "temp", "neonatal_health_race-ethncity.csv")
  )

# filter required subgroup
read_csv(here("08_education/data/built/SEDA_all_subgroups_county_2014-2018.csv")) |>
  filter(subgroup_type %in% c("all", "race-ethnicity")) |>
  write_csv(here("data", "temp", "SEDA_race-ethnicity_subgroup_county_2014-2018.csv"))

read_csv(here("07_safety/final/rate_arrests_county_all_subgroup.csv")) |>
  filter(subgroup_type %in% c("all", "race-ethnicity")) |>
  write_csv(here("data", "temp", "rate_arrests_county_race-ethnicity_subgroup.csv"))  

```

### Race-ethnicity files 

Create population file with a variable for race-ethnicity. 

```{r}

expand_grid(
  read_csv(here("geographic-crosswalks", "data", "county-populations.csv")),
           subgroup = c("All", "Black", "Black, Non-Hispanic", "White", 
               "White, Non-Hispanic", "Other Races and Ethnicities", "Hispanic")
) %>% 
   mutate(subgroup_type = ifelse(subgroup != "All", "race-ethnicity", "all")) %>% 
  select(-population) %>% 
  write_csv(here("data", "temp", "county-populations_race-ethnicity.csv"))

```

Read file paths to all county files with race-ethnicity and race information. 

```{r}

filepaths <- c(
  
# Race-ethnicity populations
here("data", "temp", "county-populations_race-ethnicity.csv"),

# 01 financial well-being
here("01_financial-well-being/final/metrics_income_county_race-ethnicity_longitudinal.csv"),

# 02 housing
here("02_housing/data/final/homelessness_2019-2022_subgroups_county.csv"),

# 04 health
here("data", "temp", "neonatal_health_race-ethncity.csv"),
here("04_health/exposure-to-trauma/data/final/rate_injury_deaths_metric_subgroup_county.csv"),

# 06 neighborhoods
here("06_neighborhoods/poverty-exposure/final/poverty-exposure_race-ethnicity_county.csv"),

# 07 safety
here("07_safety/final/rate_arrests_county_all_subgroup.csv"),

# 08 education
here("08_education/data/final/metrics_preschool_county_race-ethnicity_longitudinal.csv"),
here("data", "temp", "SEDA_race-ethnicity_subgroup_county_2014-2018.csv"),
here("08_education/data/final/metrics_college_county_race-ethnicity_longitudinal.csv"),
here("08_education/data/final/digital_access_county_race_ethnicity_longitudinal.csv"),

# 09 employment
here("09_employment/data/final/metrics_employment_county_race-ethnicity_longitudinal.csv")
)

```

This code loads each file and then combines them using `left_join()`. The first file is a population file, so there should be 3,143 counties per year. 

```{r}

db_race_eth <- filepaths |>
  map(
    .f = ~read_csv(.x)
  ) |>
  reduce(left_join, by = c("year", "state", "county", "subgroup", "subgroup_type"))

```

We used old learning rate data, so we rename the variables.

```{r}
db_race_eth  <- db_race_eth  |>
  rename(
    rate_learning = learning_rate,
    rate_learning_lb = learning_rate_lb,
    rate_learning_ub = learning_rate_ub,
    rate_learning_quality = learning_rate_quality
  )

```

### Clean file

Some subgroup information is not available for entire years. To simplify the user experience, remove these years entirely instead of giving a bunch of NAs.

```{r}

years_data <- db_race_eth %>% 
  group_by(year) %>% 
  filter_at(vars(-year, -state, -state_name, -county, -county_name, -subgroup_type, -subgroup), any_vars(!is.na(.))) %>% 
  group_by(year) %>% 
  count() %>% 
  select(year) %>% 
  pull()

```

Filter for only years that have data available.

```{r}
db_race_eth  <- db_race_eth  |>
  filter(year %in% years_data)
```

The quality flags are currently inputed as numbers 1 through 3. Update the data so these are labeled as text: 1="Strong", 2="Marginal", 3="Weak".

```{r}
db_race_eth  <- db_race_eth  |>
  mutate(across(ends_with("quality"), ~case_when(. == 1 ~ "Strong",
                                                . == 2 ~ "Marginal",
                                                . == 3 ~ "Weak")))
```


## Quality and Completeness

### Dimensions

At most there should be 22,008 in a year (7X3144) and at the least there should be 21,994 in a year (7X3142).

```{r}
dimension_test <- function(.data) {
  .data |>
  count(year) |>
  assert(
    within_bounds(21994, 22008),
    n
  )
}

dimension_test(db_race_eth)

```

### Data Quality Flags

This section summarizes data quality flags for variables and years.

```{r}
db_race_eth |>
  filter(subgroup != "All") |>
  select(ends_with("_quality")) |>
  pivot_longer(everything(), names_to = "variable", values_to = "quality") |>
  count(variable, quality) |>
  filter(!is.na(quality)) |>
  print(n = 100)

db_race_eth  |>
  filter(subgroup != "All") |>
  select(year, ends_with("_quality")) |>
  pivot_longer(-year, names_to = "variable", values_to = "quality") |>
  count(year, quality) |>
  print(n = 100)

```

### Full Database

Evaluate the quality variables. 

```{r}
db_race_eth |>
  select(ends_with("_quality")) |>
  assert(in_set("Strong", "Marginal", "Weak"), everything())

```

### 01 Financial Well-Being

```{r}
db_race_eth |>
  assert(
    within_bounds(0, Inf), 
    pctl_income_20, 
    pctl_income_50, 
    pctl_income_80
  ) |>
  quiet()
```

### 02 Housing

```{R}
db_race_eth |>
  assert(
    within_bounds(0, Inf),
    count_homeless,
    count_homeless_lb,
    count_homeless_ub
  ) |>
  assert(
    within_bounds(0, 1),
    share_homeless
  ) |>
  quiet()

test_bounds(
  data = db_race_eth,
  estimate = count_homeless,
  lb = count_homeless_lb,
  ub = count_homeless_ub
)

```

### 04 Health

```{r}
db_race_eth |>
  assert(
    within_bounds(0, 1),
    share_low_birth_weight,
    share_low_birth_weight_lb,
    share_low_birth_weight_ub
  ) |>
  quiet()

test_bounds(
  data = db_race_eth, 
  estimate = share_low_birth_weight, 
  lb = share_low_birth_weight_lb, 
  ub = share_low_birth_weight_ub
)

db_race_eth |>
  assert(
    within_bounds(0, Inf),
    rate_injury_death,
    rate_injury_death_lb,
    rate_injury_death_ub
  ) |>
  quiet()

test_bounds(
  data = db_race_eth, 
  estimate = rate_injury_death, 
  lb = rate_injury_death_lb, 
  ub = rate_injury_death_ub
)
```

### 06 Neighborhoods

```{r}
db_race_eth |>
  assert(
    within_bounds(0, Inf),
    share_poverty_exposure
  ) |>
  quiet()

```

### 07 Safety

```{r}
db_race_eth |>
  assert(
    within_bounds(0, Inf),
    rate_juv_arrest
  ) |>
  quiet()

```

### 08 Education

```{r}
db_race_eth |>
  assert(
    within_bounds(0, 1),
    share_in_preschool,
    share_in_preschool_lb,
    share_in_preschool_ub,
    share_hs_degree,
    share_hs_degree_lb,
    share_hs_degree_ub
  ) |>
  assert(
    within_bounds(-10, 10),
    rate_learning,
    rate_learning_lb,
    rate_learning_ub
  ) |>
  quiet()

db_race_eth |>
  assert(
    within_bounds(0, 1),
    share_digital_access
  ) |>
  quiet()

test_bounds(
  data = db_race_eth, 
  estimate = share_in_preschool, 
  lb = share_in_preschool_lb, 
  ub = share_in_preschool_ub
)

test_bounds(
  data = db_race_eth, 
  estimate = share_hs_degree, 
  lb = share_hs_degree_lb, 
  ub = share_hs_degree_ub
)

test_bounds(
  data = db_race_eth,
  estimate = rate_learning,
  lb = rate_learning_lb,
  ub = rate_learning_ub
)

```

### 09 Employment

```{r}
db_race_eth |>
  assert(
    within_bounds(0, 1),
    share_employed,
    share_employed_lb,
    share_employed_ub
  ) |>
  quiet()

test_bounds(
  data = db_race_eth, 
  estimate = share_employed, 
  lb = share_employed_lb, 
  ub = share_employed_ub
)

```

## Write the File

```{r}

write_csv(db_race_eth, here("data", "12_mobility-metrics_county_race-ethnicity_longitudinal.csv"))

```
