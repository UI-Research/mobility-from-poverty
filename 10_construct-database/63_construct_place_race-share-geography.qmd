---
title: "Combine Race Share Geography Place Files"
author: "Aaron R. Williams & JP Walsh"
date: today
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
execute:
  message: false
  warning: false
editor_options:
  chunk_output_type: console
---

## Setup

```{r quarto-setup, include = FALSE}
options(knitr.kable.NA = "")

```

```{r load-packages}
library(tidyverse)
library(tidylog)
library(here)
library(assertr)
library(gt)

```

This function is used to ensure that the lower bound of a 95% confidence interval is always below the estimate and the upper bound of the a 95% confidence interval is always above the estimate.

```{r}
#' Test the bounds of a confidence interval relative to the estimate
#'
#' @param data The data frame of interest
#' @param estimate The unquoted name of the estimate variable
#' @param lb The unquoted name of the lower bound variable
#' @param ub The unquoted name of the upper bound variable
#'
test_bounds <- function(data, estimate, lb, ub) {

  subset <- bind_rows(
    data |>
      filter({{ ub }} < {{ lb }}),
    data |>
      filter({{ estimate }} > {{ ub }}),
    data |>
      filter({{ estimate  }} < {{ lb }}),
  )

  stopifnot(nrow(subset) == 0)

}


#' Helper function to silence output from testing code
#'
#' @param data A data frame
#'
quiet <- function(data) {

  quiet <- data

}

```

## Construct Database

### Temporary Fixes

This section implements temporary fixes and saves the resulting data in a temp folder. The saved data are then included in the output data.

```{r}
# Correct subgroup category
read_csv(here("01_financial-well-being/city-debt-coll-shares-2021.csv")) |>
  mutate(
    subgroup = case_when(
      subgroup == "Majority White" ~ "White neighborhoods",
      subgroup == "No Majority Race/Ethnicity" ~ "Mixed neighborhoods",
      subgroup == "Majority Non-White" ~ "Neighborhoods of color",
      TRUE ~ subgroup
    ),
    subgroup_type = ifelse(subgroup == "All", "all", subgroup_type)
  ) |>
  rename(place = place_fips) |>
  select(-city) |>
  write_csv(
    here("data", "temp", "city_debt_longitudinal_subgroup_race_share.csv")
  )

read_csv(here("06_neighborhoods/environment/data/final/environment_place_race-ethnicity_longitudinal.csv")) |>
  mutate(subgroup = case_when(
    subgroup == "Majority White, Non-Hispanic" ~ "White neighborhoods",
    subgroup == "No Majority Race/Ethnicity" ~ "Mixed neighborhoods",
    subgroup == "Majority Non-White" ~ "Neighborhoods of color",
    TRUE ~ subgroup
  )) |>
  write_csv(
    here("data", "temp", "environment_place_subroup_race_share.csv")
  )

# # FILE IS MISSING SUBBROUPS?
# read_csv(here("06_neighborhoods/Transportation/final/transportation_subgroup_city.csv")) |>
#   mutate(
#     subgroup = case_when(
#       subgroup == "Majority Non-White Tracts" ~ "Neighborhoods of color",
#       subgroup == "Majority White-NH Tracts" ~ "White neighborhoods",
#       subgroup == "Mixed Race and Ethnicity Tracts" ~ "Mixed neighborhoods",
#       TRUE ~ subgroup
#     ),
#     subgroup_type = ifelse(subgroup == "All", "all", subgroup_type)
#   ) |>
#   write_csv(
#     here("data", "temp", "transportation_place_subgroups_race_share.csv")
#   )


```

### Racial share files

Create population file for race share subgroup.

```{r}
expand_grid(
  read_csv(here("geographic-crosswalks", "data", "place-populations.csv")),
           subgroup = c("All", "Neighborhoods of color", "White neighborhoods",
                        "Mixed neighborhoods")
) %>%
   mutate(subgroup_type = ifelse(subgroup != "All", "race-ethnicity", "all")) %>%
  select(-population) %>%
  write_csv(here("data", "temp", "place-populations_race-share.csv"))

```

Read file paths to all metric data sets with geographic race share data.

```{r}
filepaths <- c(
  # Race-share populations
  here("data", "temp", "place-populations_race-share.csv"),

  # 01 financial well-being
  here("data", "temp", "city_debt_longitudinal_subgroup_race_share.csv"),

  # 06 neighborhoods
  here("data", "temp", "environment_place_subroup_race_share.csv")
  # Comment out for now until file contains subgroups
#   here("data", "temp", "transportation_place_subgroups_race_share.csv"),
)

```

This code loads each file and then combines them using `left_join()`. The first file is a population file, so there should be 486 places per year.

```{r}

db_race_share <- filepaths |>
  map(
    .f = ~read_csv(.x)
  ) |>
  reduce(left_join, by = c("year", "state", "place", "subgroup", "subgroup_type"))

```

### Clean file

Some subgroup information is not available for entire years. To simplify the user experience, remove these years entirely instead of giving a bunch of NAs.

```{r}

years_data <- db_race_share %>%
  group_by(year) %>%
  filter_at(vars(-year, -state, -state_name, -place, -place_name, -subgroup_type, -subgroup), any_vars(!is.na(.))) %>%
  group_by(year) %>%
  count() %>%
  select(year) %>%
  pull()

```

Filter for only years that have data available.

```{r}
db_race_share  <- db_race_share  |>
  filter(year %in% years_data)
```

The quality flags are currently inputed as numbers 1 through 3. Update the data so these are labeled as text: 1="Strong", 2="Marginal", 3="Weak".

```{r}
db_race_share  <- db_race_share  |>
  mutate(across(ends_with("quality"), ~case_when(. == 1 ~ "Strong",
                                                . == 2 ~ "Marginal",
                                                . == 3 ~ "Weak")))
```

## Quality and Completeness

### Dimensions

At most there should 1,944 in a year (4X486) and at the least there should be 1,940 in a year (4X485).

```{r}
dimension_test <- function(.data) {
  .data |>
  count(year) |>
  assert(
    within_bounds(1940, 1944),
    n
  )
}

dimension_test(db_race_share)
```

### Data Quality Flags

This section summarizes data quality flags for variables and years.

```{r}
db_race_share |>
  filter(subgroup != "All") |>
  select(ends_with("_quality")) |>
  pivot_longer(everything(), names_to = "variable", values_to = "quality") |>
  count(variable, quality) |>
  filter(!is.na(quality)) |>
  print(n = 100)

db_race_share  |>
  filter(subgroup != "All") |>
  select(year, ends_with("_quality")) |>
  pivot_longer(-year, names_to = "variable", values_to = "quality") |>
  count(year, quality) |>
  print(n = 100)

```

### Full Database

Evaluate the quality variables.

```{r}
db_race_share |>
  select(ends_with("_quality")) |>
  assert(in_set("Strong", "Marginal", "Weak"), everything())

```


### 01 Financial Well-Being

```{r}
db_race_share |>
  assert(
    within_bounds(0, Inf),
    share_debt_coll,
  ) |>
  quiet()
```

### 06 Neighborhoods

```{r}
# COMMENT OUT UNTIL WE GET TRANSIT FILE WITH SUBROUPS
# db_race_share |>
#   assert(
#     within_bounds(0, 100),
#     index_air_hazard,
#     index_transportation_cost,
#     index_transit_trips
#   ) |>
#   quiet()

```

## Write the File

```{r}

write_csv(db_race_share, here("data", "63_mobility-metrics_place_race-share_longitudinal.csv"))

```
