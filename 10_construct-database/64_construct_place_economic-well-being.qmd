---
title: "Combine Income Place Files"
author: "Aaron R. Williams & JP Walsh"
date: today
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
execute:
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---

## Setup

```{r quarto-setup, include = FALSE}
options(knitr.kable.NA = "")

```

```{r load-packages}
library(tidyverse)
library(tidylog)
library(here)
library(assertr)
library(gt)

```

This function is used to ensure that the lower bound of a 95% confidence interval is always below the estimate and the upper bound of the a 95% confidence interval is always above the estimate. 

```{r}
#' Test the bounds of a confidence interval relative to the estimate
#'
#' @param data The data frame of interest
#' @param estimate The unquoted name of the estimate variable
#' @param lb The unquoted name of the lower bound variable
#' @param ub The unquoted name of the upper bound variable
#'
test_bounds <- function(data, estimate, lb, ub) {
  
  subset <- bind_rows(
    data |>
      filter({{ ub }} < {{ lb }}),
    data |>
      filter({{ estimate }} > {{ ub }}),
    data |>
      filter({{ estimate  }} < {{ lb }}),
  )
  
  stopifnot(nrow(subset) == 0)
  
}


#' Helper function to silence output from testing code
#'
#' @param data A data frame
#'
quiet <- function(data) {
  
  quiet <- data
  
}

```

## Construct Database

### Income and economic disadvantage 

Create population file with a variable covering all income subgroup values. 

```{r}

read_csv(here("geographic-crosswalks", "data", "place-populations.csv")) %>% 
  mutate(all = "All", 
         income_status_ed = "Economically Disadvantaged", 
         income_status_not_ed = "Not Economically Disadvantaged",
         income_status_less = "Less than $50,000",
         income_status_more = "$50,000 or More",
         income_status_pov = "Extreme Poverty",
         income_status_not_pov = "Not Extreme Poverty") %>% 
  pivot_longer(cols = c(all:income_status_not_pov),
               names_to = "subgroup_type",
               values_to = "subgroup") %>% 
  mutate(subgroup_type = ifelse(subgroup_type != "all", "income", "all")) %>% 
  write_csv(here("data", "temp", "place-populations_econ_dis.csv"))

```

Read file paths to all place files with income subgroup information. 

```{r}

filepaths <- c(
  
# Race-ethnicity populations
here("data", "temp", "place-populations_econ_dis.csv"),

# 06 neighborhoods
here("06_neighborhoods/environment/data/final/environment_place_poverty_longitudinal.csv"),

# 08 education
here("08_education", "data", "built", "SEDA_all_subgroups_city.csv"),
here("08_education/final/digital_access_city_subgroup_all.csv")

)

```

This code loads each file and then combines them using `left_join()`. The first file is a population file, so there should be 486 counties per year. 

```{r}

db_income <- filepaths |>
  map(
    .f = ~read_csv(.x) |> 
      select(-any_of(c("state_name", "place_name")))
  ) |>
  reduce(left_join, by = c("year", "state", "place", "subgroup", "subgroup_type"))

```

We used old learning rate data, so we rename the variables.

```{r}
db_income  <- db_income  |>
  rename(
    rate_learning = learning_rate,
    rate_learning_lb = learning_rate_lb,
    rate_learning_ub = learning_rate_ub,
    rate_learning_quality = learning_rate_quality
  )

```

## Quality and Completeness

### Dimensions

At most there should be 3,402 in a year (7X486) and at the least there should be 3,395 in a year (7X485).

```{r}

db_income |> 
  count(year) |>
  assert(
    within_bounds(3395, 3402), 
    n
  )

```

### Data Quality Flags

This section summarizes data quality flags for variables and years.

```{r}
db_income |>
  select(ends_with("_quality")) |>
  pivot_longer(everything(), names_to = "variable", values_to = "quality") |>
  count(variable, quality) |>
  filter(!is.na(quality)) |>
  print(n = 100)

db_income  |>
  select(year, ends_with("_quality")) |>
  pivot_longer(-year, names_to = "variable", values_to = "quality") |>
  count(year, quality) |>
  print(n = 100)

```

### Full Database

Evaluate the quality variables. 

```{r}
db_income |>
  select(ends_with("_quality")) |>
  assert(in_set(1, 2, 3), everything())

```

### 06 Neighborhoods

```{r}
db_income |>
  assert(
    within_bounds(0, 100),
    index_air_hazard
  ) |>
  quiet()

```

### 08 Education

```{r}
db_income |>  
  assert(
    within_bounds(-10, 10), 
    rate_learning,
    rate_learning_lb,
    rate_learning_ub
  ) |>
  quiet()

db_income |>
  assert(
    within_bounds(0, 1),
    share_digital_access,
    share_digital_access_lb,
    share_digital_access_ub,
  ) |>
  quiet()

test_bounds(
  data = db_income, 
  estimate = share_digital_access, 
  lb = share_digital_access_lb, 
  ub = share_digital_access_ub
)

test_bounds(
  data = db_income, 
  estimate = rate_learning, 
  lb = rate_learning_lb, 
  ub = rate_learning_ub
)

```


## Write the File

```{r}

write_csv(db_income, here("data", "64_mobility-metrics_place_income_longitudinal.csv"))

```
