---
title: "Calculate Medians for Dashboard - Longitudinal"
author: "Judah Axelrod and Aaron R. Williams, Updated by Kassandra Martinchek"
date: today
format:
  html:
    df-print: kable
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: true
    grid:
      body-width: 1200px
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

# Mobility metrics median calculations

This code calculates weighted medians of the mobility metrics at the county and then the place level, by year and race/ethnicity subgroup. 

We want to better understand the quality and availability of county- and place-level metrics that are being aggregated into these national-level medians to determine whether it is appropriate to report at the national level.


We exclude missing values and calculate the proportion of places and proportion of population missing for each metric. The function below is used to calculate the proportion of population missing for each metric.

## Load Packages

```{r}
#| label: load-packages

options(scipen = 999)

library(tidyverse)
library(here)
library(tidycensus)
library(DT)

theme_set(theme_minimal())

```

```{r}
missing_share <- function(x, weight) {
  
  sum(as.numeric(is.na(x)) * weight) / sum(weight)
  
}
```



The steps taken for calculating the median estimates are as follow:

-   Calculate the population-weighted median
-   Calculate the proportion of places that are missing
-   Calculate the proportion of people that are missing

# County level

## Load Data

```{r}
#| label: load-data

metrics <- read_csv(here("data", "11_mobility-metrics_county_longitudinal.csv")) |>
  select(-ends_with("_lb"), -ends_with("_ub"))

metrics_01 <- read_csv(here("data", "12_mobility-metrics_county_race-ethnicity_longitudinal.csv")) |>
  select(-ends_with("_lb"), -ends_with("_ub"))

metrics_03 <- read_csv(here("data", "13_mobility-metrics_county_race-share_longitudinal.csv")) |> 
  select(-ends_with("_lb"), -ends_with("_ub"))

```

Prepare metrics 03 for wrangling-- requires merging population figures from metrics file into this subgroup file

```{r}

# merge the overall population figures to the metrics 03 data (which is at the neighborhood level) ? Because race population weighting doesn't make sense because this is classified at the neighborhood level

metrics_pop <- metrics |>
  mutate(county_state = paste0(county_name, ', ', state_name)) |> 
  select(population, year, county_state)

metrics_03 <- metrics_03 |>
  mutate(county_state = paste0(county_name, ', ', state_name))

metrics_03 <- left_join(x = metrics_03,
                        y = metrics_pop,
                        by = c("year", "county_state"))

metrics_03 <- metrics_03 |>
  select(-county_state) |>
  filter(year != 2014) # population not available for this year in the data plus only want most recent data anywho!

```

Reshape the dataset and filter to most recent year available 

First, create a function

```{r}

recent_year_filter <- function(data, col_a, col_b) {
# reshape to long
metrics_long <- data |>
  select(!ends_with("quality")) |>
  pivot_longer(cols = {{col_a}}:{{col_b}},
               names_to = "variable",
               values_to = "value")

# filter to max 
metrics_long <- metrics_long |>
  group_by(year, variable) |>
  filter(!all(is.na(value))) 

recent_year_data <- metrics_long |>
  group_by(variable) |>
  summarize(recent_year = max(year)) 

metrics_long <- left_join(x = metrics_long,
                          y = recent_year_data,
                          by = "variable")

metrics_long_recent <- metrics_long |>
  filter(year == recent_year)

# reshape back to wide for later functions and merge with quality variables
metrics_quality <- data |>
  select(year, state, county, subgroup, ends_with("quality"))

metrics_recent_values <- metrics_long_recent |>
  pivot_wider(names_from = variable,
              values_from = value) 

metrics_recent <- left_join(x = metrics_recent_values,
                            y = metrics_quality,
                            by = c("year", "county", "state", "subgroup"))

metrics_recent <- metrics_recent |>
  ungroup() |>
  select(-recent_year)
}

```

Now, implement that function

```{r}

metrics_01_recent <- recent_year_filter(data = metrics_01,
                                        col_a = pctl_income_20,
                                        col_b = share_employed)

```

We load county-level population estimates from the 2020 decennial census.

```{r}
# Only some variables are pre-2020 and can't be called here
# variable definitions: https://www.census.gov/data/developers/data-sets/popest-popproj/popest/popest-vars/2017.html
population_data <- map_dfr(c (2020:2022), ~get_estimates(
  geography = "county", 
  product = "characteristics",
  variables = "POPESTIMATE",
  breakdown = c("RACE", "HISP"),
  year = .x
),
.id = 'year') 

population <- population_data |>
  mutate(
    year = case_when(year == 1 ~ 2017,
                     year != 1 ~ as.numeric(year) + 2019),
    state = str_sub(GEOID, start = 1, end = 2),
    county = str_sub(GEOID, start = 3, end = 5),
    subgroup = case_when(RACE == 1 & HISP == 1 ~ "White, Non-Hispanic",
                         RACE == 1 & HISP == 0 ~ "White",
                         RACE == 2 & HISP == 1 ~ "Black, Non-Hispanic",
                         RACE == 2 & HISP == 0 ~ "Black",
                         HISP == 2 ~ "Hispanic",
                         RACE != 1 & RACE != 2 & HISP == 1 ~ "Other Races and Ethnicities",
                         RACE == 0 & HISP == 0 ~ "All")
  ) 

population <- population |>
  group_by(year, state, county, subgroup) |>
  summarize(population = sum(value)) |>
  select(state, county, subgroup, population, year) |>
  filter(!is.na(subgroup))

```

Merge population data to metrics data for specific subgroup weighting

```{r}

 metrics_01_df <- left_join(x = metrics_01_recent, 
                            y = population, 
                            by = c("state", "county", "year", "subgroup")) |> 
    filter(!is.na(population))

```

## Calculate Medians

We calculate weighted medians for each numeric variable. This means our estimates represent the county mobility metric for the average American. We also calculate `share_lq3`, which is the share of the population for which the given metric is either missing or `quality=3`. 

```{r}
# Remove missing variable-year combos
safe_wtd_quantile <- possibly(Hmisc::wtd.quantile, otherwise = NA)

calc_year_subgroup_table <- function(metrics_df) {
  
  weighted_median <- metrics_df |>
    mutate(county_state = paste0(county_name, ', ', state_name)) |> 
    select(county_state, subgroup, where(is.numeric) & (!ends_with('quality'))) |> 
    summarize(
      across(
        .cols = -c('population', 'county_state'),
        .fns = list(
          .wtd_median = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE),
          .wtd_lowpct = ~safe_wtd_quantile(., weights = population, probs = 0.05, na.rm = TRUE),
          .wtd_highpct = ~safe_wtd_quantile(., weights = population, probs = 0.95, na.rm = TRUE)
        )
      ), .by = c('year','subgroup')
    ) |>
    pivot_longer(cols = -c('year','subgroup'), names_to = c('name', '.value'), 
                 names_pattern = '(.*)_\\.(.*)')
                  
  
  state_count <- metrics_df |> 
    mutate(across(ends_with("quality"), ~case_when(. == "Strong" ~ 1,
                                                 . == "Marginal" ~ 2,
                                                 . == "Weak" ~ 3))) |>
    pivot_longer(cols = ends_with('_quality'), names_to = 'qual_varname', values_to = 'quality') |> 
    filter(quality %in% 1:2) |> 
    count(state_name, year, subgroup, qual_varname) |> 
    count(qual_varname, year, subgroup, name = 'n_states')
    
  proportion_by_qual <- metrics_df |>
    mutate(across(ends_with("quality"), ~case_when(. == "Strong" ~ 1,
                                                 . == "Marginal" ~ 2,
                                                 . == "Weak" ~ 3))) |>
    select(subgroup, where(is.numeric)) |>
    pivot_longer(cols = ends_with('_quality'), names_to = 'qual_varname', values_to = 'quality') |> 
    summarize(population = sum(population),
     .by = c('year', 'subgroup', 'qual_varname', 'quality')
    ) |> 
    mutate(pop_share = population / sum(population), .by = c('year', 'subgroup', 'qual_varname')) |> 
    filter(quality %in% 2:3) |> 
    select(-population) |> 
    arrange(qual_varname, quality)
  
  
  missing_population <- metrics_df |>
    select(subgroup, where(is.numeric) & (!ends_with('quality'))) |>
    summarize(
      across(
        .cols = -population, 
        .fns = ~missing_share(.x, weight = population)
      ), .by=c('year','subgroup')) |> 
    pivot_longer(cols = -c('year','subgroup'), values_to = "missing_population")
   
  missing_county <- metrics_df |>
    select(subgroup, where(is.numeric) & (!ends_with('quality'))) |>
    summarize(
      across(
        .cols = -population, 
        .fns = ~sum(is.na(.x)) / n()
      ), .by = c('year','subgroup')) |> 
    pivot_longer(cols = -c('year','subgroup'), values_to = "missing_county")
    
  weighted_median |> 
    full_join(missing_population, by = c("year", "subgroup", "name")) |>
    full_join(missing_county, by = c("year", "subgroup", "name"))|>
    mutate(qual_varname = paste0(name, '_quality')) |>
    left_join(proportion_by_qual, by = c("year", "subgroup", "qual_varname")) |>  #M:M Merge is expected behavior here
    left_join(state_count, by = c("year", "subgroup", "qual_varname")) |> 
    pivot_wider(names_from = quality, names_glue = 'quality{quality}_popshare', values_from = pop_share) |>
    select(-qual_varname, -one_of('qualityNA_popshare')) |> 
    mutate(across(where(is.numeric), ~round(.,digits=2))) |> 
    rowwise() |> 
    # Share of pop that is either missing or quality = 3 for that metric
    mutate(share_lq3 = sum(missing_population, quality3_popshare, na.rm = TRUE)) |> 
    # Remove all-missing metric-years
    filter(missing_county < 1) |> 
    select(year, name, subgroup, share_lq3, everything()) |>
    arrange(desc(year), name, subgroup)

}
```

### Percentile income, homeless count, poverty exposure, juvinile arrest rate, share in preschool, share employed, share with HS degree, rate low birth weight, digitial access, employment rate, and rate of learning achievement

```{r}

#calc_year_subgroup_table(metrics_01_df) |>   
 # datatable(caption = "01_Metrics")

calc_year_subgroup_table(metrics_01_df) |>
  ggplot(aes(share_lq3, name, color = subgroup)) +
  geom_point(alpha = 0.3) +
  labs(
    title = "County Race-Ethnicity Medians Quality",
    x = "Share NA or Quality==3",
    y = NULL
  )

```

Suppress weighted medians with 15 percent of counties low quality or missing -- as did in the overall feature

```{r}

metrics_01_recent_final <- calc_year_subgroup_table(metrics_01_df) 
 
metrics_recent_suppressed_01 <- metrics_01_recent_final |> 
  mutate(weighted_median = ifelse(share_lq3 > 0.15, NA, wtd_median),
         high_pctle = ifelse(share_lq3 > 0.15, NA, wtd_highpct),
         low_pctle = ifelse(share_lq3 > 0.15, NA,wtd_lowpct)) |> 
  select(year, name, weighted_median, low_pctle, high_pctle, share_lq3) 

metrics_recent_suppressed_01 |> 
  kbl() |> 
  kable_styling(font_size = 10, fixed_thead = TRUE)

metrics_recent_suppressed_01 |>
  write_csv(here("10_construct-database", "county_medians_01_recent_suppressed.csv"))

```
```

### Air quality index, transit trips index, share with debt in collections, and transportation cost 

First, filter to most recent year only-- this could be a function given we use it above

```{r}

metrics_03_recent <- recent_year_filter(data = metrics_03,
                                        col_a = share_debt_coll,
                                        col_b = index_transportation_cost)

```

Note: Uses overall population weighting because defined at neighborhood level

```{r}
calc_year_subgroup_table(metrics_03_recent) |>
  ggplot(aes(share_lq3, name, color = subgroup)) +
  geom_point(alpha = 0.3) +
  labs(
    title = "County Race-Ethnicity Medians Quality",
    x = "Share NA or Quality==3",
    y = NULL
  )
```

Suppress weighted medians with 15 percent of counties low quality or missing -- as did in the overall feature

```{r}

metrics_03_recent_final <- calc_year_subgroup_table(metrics_03_recent) 
 
metrics_recent_suppressed_03 <- metrics_03_recent_final |> 
  mutate(weighted_median = ifelse(share_lq3 > 0.15, NA, wtd_median),
         high_pctle = ifelse(share_lq3 > 0.15, NA, wtd_highpct),
         low_pctle = ifelse(share_lq3 > 0.15, NA,wtd_lowpct)) |> 
  select(year, name, weighted_median, low_pctle, high_pctle, share_lq3) 

metrics_recent_suppressed_03 |> 
  kbl() |> 
  kable_styling(font_size = 10, fixed_thead = TRUE)

metrics_recent_suppressed |>
  write_csv(here("10_construct-database", "county_medians_03_recent_suppressed.csv"))

```
