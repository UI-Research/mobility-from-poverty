---
title: "Combine Race-Share Geography County Files"
author: "Aaron R. Williams, JP Walsh & Ridhi Purohit"
date: today
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
execute:
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
---
## Update 

This file was updated by Ridhi Purohit in March 2025 for metric release version 2025.

## Setup

```{r quarto-setup, include = FALSE}
options(knitr.kable.NA = "")

```

```{r load-packages}
library(tidyverse)
library(tidylog)
library(here)
library(assertr)
library(gt)

```

This function is used to ensure that the lower bound of a 95% confidence interval is always below the estimate and the upper bound of the a 95% confidence interval is always above the estimate. 

```{r}
#' Test the bounds of a confidence interval relative to the estimate
#'
#' @param data The data frame of interest
#' @param estimate The unquoted name of the estimate variable
#' @param lb The unquoted name of the lower bound variable
#' @param ub The unquoted name of the upper bound variable
#'
test_bounds <- function(data, estimate, lb, ub) {
  
  subset <- bind_rows(
    data |>
      filter({{ ub }} < {{ lb }}),
    data |>
      filter({{ estimate }} > {{ ub }}),
    data |>
      filter({{ estimate  }} < {{ lb }}),
  )
  
  stopifnot(nrow(subset) == 0)
  
}


#' Helper function to silence output from testing code
#'
#' @param data A data frame
#'
quiet <- function(data) {
  
  quiet <- data
  
}

```

## Construct Database

### Temporary Fixes

This section implements temporary fixes and saves the resulting data in a temp folder. The saved data are then included in the output data.

```{r}
# combine multiple years
bind_rows(
  read_csv(here("01_financial-well-being/share_debt_2018_long.csv")),
  read_csv(here("01_financial-well-being/county-debt-coll-shares-2022.csv")),
  read_csv(here("01_financial-well-being/final/metrics_overall_debt_coll_race_ethnicity_county_2023.csv")) |>
    mutate(
            state = as.character(state), 
            county = as.character(county)
    )
  ) |>
  mutate(share_debt_coll_quality = 
           ifelse(is.na(share_debt_coll), NA_character_, share_debt_coll_quality)
         ) |>
  write_csv(here("data", "temp", "county_debt_longitudinal_race-ethnicity.csv"))

# Correct subgroup category

read_csv(here("data", "temp", "county_debt_longitudinal_race-ethnicity.csv")) |>
  mutate(subgroup = case_when(subgroup == "Majority White" ~ "White neighborhoods",
                              subgroup == "No Majority Race/Ethnicity" ~ "Mixed neighborhoods", 
                              subgroup == "Majority Non-White" ~ "Neighborhoods of color",
                              TRUE ~ subgroup),
         subgroup_type = ifelse(subgroup == "All", "all", subgroup_type)) |>
  write_csv(
    here("data", "temp", "county_debt_longitudinal_subgroup_race_share.csv")
  )

read_csv(here("06_neighborhoods/environment/data/final/environment_county_race-ethnicity_longitudinal.csv")) |>
  mutate(subgroup = case_when(subgroup == "Majority White, Non-Hispanic" ~ "White neighborhoods",
                              subgroup == "No Majority Race/Ethnicity" ~ "Mixed neighborhoods", 
                              subgroup == "Majority Non-White" ~ "Neighborhoods of color",
                              TRUE ~ subgroup)) |>
  write_csv(
    here("data", "temp", "environment_county_subroup_race_share.csv")
  )

read_csv(here("01_financial-well-being/final/metrics_medical_debt_coll_race_ethnicity_county_2023.csv")) |>
  mutate(subgroup = case_when(subgroup == "Majority Non-White" ~ "Neighborhoods of color", 
                              subgroup == "Majority White" ~ "White neighborhoods",
                              subgroup == "Mixed Race and Ethnicity Tracts" ~ "Mixed neighborhoods",
                              TRUE ~ subgroup),
         subgroup_type = ifelse(subgroup == "All", "all", subgroup_type),
         state = str_pad(as.character(state), width = 2, pad = "0", side = "left"),
    county = str_pad(as.character(county), width = 3, pad = "0", side = "left")
  )|>
  write_csv(
    here("data", "temp", "county_medical_debt_longitudinal_subgroup_race_share.csv")
  )

```

### Racial share files

Create a population file for the race-share subgroup. 

```{r}

expand_grid(
  read_csv(here("geographic-crosswalks", "data", "county-populations.csv")),
           subgroup = c("All", "Neighborhoods of color", "White neighborhoods", 
                        "Mixed neighborhoods")
) %>% 
   mutate(subgroup_type = ifelse(subgroup != "All", "race-ethnicity", "all")) %>% 
  select(-population) %>% 
  write_csv(here("data", "temp", "county-populations_race-share.csv"))

```

Read file paths to all county files with race-share information. 

```{r}

filepaths <- c(

# Race-share populations
here("data", "temp", "county-populations_race-share.csv"),

# 01 financial well-being
here("data", "temp", "county_debt_longitudinal_subgroup_race_share.csv"),
here("data", "temp", "county_medical_debt_longitudinal_subgroup_race_share.csv"),

# 06 neighborhoods
here("data", "temp", "environment_county_subroup_race_share.csv"),
here("06_neighborhoods/Transportation/final/transportation_subgroup_county.csv")
)

```

This code loads each file and then combines them using `left_join()`. The first file is a population file, so there should be 3,143 counties per year. 

```{r}

db_race_share <- filepaths |>
  map(
    .f = ~read_csv(.x)
  ) |>
  reduce(left_join, by = c("year", "state", "county", "subgroup", "subgroup_type"))

```

### Clean file

Some subgroup information is not available for entire years. To simplify the user experience, remove these years entirely instead of giving a bunch of NAs.

```{r}

years_data <- db_race_share %>% 
  group_by(year) %>% 
  filter_at(vars(-year, -state, -state_name, -county, -subgroup_type, -subgroup), any_vars(!is.na(.))) %>% 
  group_by(year) %>% 
  count() %>% 
  select(year) %>% 
  pull()

```

Filter for only years that have data available.

```{r}
db_race_share  <- db_race_share  |>
  filter(year %in% years_data)
```

The quality flags are currently inputed as numbers 1 through 3. Update the data so these are labeled as text: 1="Strong", 2="Marginal", 3="Weak".

```{r}
db_race_share  <- db_race_share  |>
  mutate(across(ends_with("quality"), ~case_when(. == 1 ~ "Strong",
                                                . == 2 ~ "Marginal",
                                                . == 3 ~ "Weak")))
```


## Quality and Completeness

### Dimensions

At most there should be 12,576 in a year (4X3144) and at the least there should be 12,568 in a year (4X3142).

```{r}
# dimension_test <- function(.data) {
#   .data |> 
#   count(year) |>
#   assert(
#     within_bounds(12568, 22008), 
#     n
#   )
# }
# 
# dimension_test(db_race_share)

```

### Data Quality Flags

This section summarizes data quality flags for variables and years.

```{r}
db_race_share |>
  filter(subgroup != "All") |>
  select(ends_with("_quality")) |>
  pivot_longer(everything(), names_to = "variable", values_to = "quality") |>
  count(variable, quality) |>
  filter(!is.na(quality)) |>
  print(n = 100)

db_race_share  |>
  filter(subgroup != "All") |>
  select(year, ends_with("_quality")) |>
  pivot_longer(-year, names_to = "variable", values_to = "quality") |>
  count(year, quality) |>
  print(n = 100)

```

### Full Database

Evaluate the quality variables. 

```{r}
db_race_share |>
  select(ends_with("_quality")) |>
  assert(in_set("Strong", "Marginal", "Weak"), everything())

```


### 01 Financial Well-Being

```{r}

db_race_share |>
  assert(
    within_bounds(0, Inf), 
    share_debt_coll, 
    share_debt_coll_ub, 
    share_debt_coll_lb
  ) |>
  assert(
    within_bounds(0, 1), 
    share_medical_debt_coll
  ) |>  
  quiet()

```

### 06 Neighborhoods

```{r}
db_race_share |>
  assert(
    within_bounds(0, 100),
    index_air_hazard
  ) |>
  assert(
    within_bounds(0,1),
    share_transit_commuter,
    share_transportation_cost
  ) |>
  quiet()

```

## Write the File

```{r}

write_csv(db_race_share, here("data", "13_mobility-metrics_county_race-share_longitudinal.csv"))

```
