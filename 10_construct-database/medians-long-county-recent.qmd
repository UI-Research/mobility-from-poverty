---
title: "Calculate Medians for Dashboard - Longitudinal"
author: "Judah Axelrod and Aaron R. Williams, Updated by Kassandra Martinchek"
date: today
format:
  html:
    df-print: kable
    toc: true
    toc_float: true
    embed-resources: true
    code-fold: true
    grid:
      body-width: 1200px
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

# Mobility metrics median calculations

This code calculates weighted medians of the mobility metrics at the county level.

We exclude missing values and calculate the proportion of places and proportion of population missing for each metric. The function below is used to calculate the proportion of population missing for each metric.

```{r}
missing_share <- function(x, weight) {
  
  sum(as.numeric(is.na(x)) * weight) / sum(weight)
  
}

```


The steps taken for calculating the median estimates are as follow:

-   Calculate the population-weighted median
-   Calculate the proportion of counties that are missing
-   Calculate the proportion of people that are missing

# County level

## Load Packages

```{r}
#| label: load-packages

options(scipen = 999)

library(tidyverse)
library(here)
library(tidycensus)
library(kableExtra)

```

## Load Data

```{r}
#| label: load-data
metrics <- read_csv(here("data", "11_mobility-metrics_county_longitudinal.csv")) |>
  select(-ends_with("_lb"), -ends_with("_ub")) |> 
  filter(year != 2014)

```

```{r}
# make the housing wealth variable numeric
# function to reshape ratio variables 
# double check the treatment of NAs with code reviewer
calculate_ratio <- function(var) {
  # Extract the numeric values before and after the colon
  x <- as.numeric(sub("^([0-9]*\\.?[0-9]+):([0-9]*\\.?[0-9]+)$", "\\1", var))
  y <- as.numeric(sub("^([0-9]*\\.?[0-9]+):([0-9]*\\.?[0-9]+)$", "\\2", var))
  
  # Calculate the ratio
  ratio <- x / y
  
  return(ratio)
}

# apply it to the dataset
metrics <- metrics |>
  mutate(ratio_black_nh_house_value_households = calculate_ratio(ratio_black_nh_house_value_households),
         ratio_hispanic_house_value_households = calculate_ratio(ratio_hispanic_house_value_households),
         ratio_other_nh_house_value_households = calculate_ratio(ratio_other_nh_house_value_households),
         ratio_white_nh_house_value_households = calculate_ratio(ratio_white_nh_house_value_households))

```

We load county-level population estimates from the 2020 decennial census.

```{r}
# Only some variables are pre-2020 and can't be called here
# variable definitions: https://www.census.gov/data/developers/data-sets/popest-popproj/popest/popest-vars/2017.html
population_data <- map_dfr(c (2020:2022), ~get_estimates(
  geography = "county", 
  product = "characteristics",
  variables = "POPESTIMATE",
  breakdown = c("RACE", "HISP"),
  year = .x
),
.id = 'year') 

population <- population_data |>
  mutate(
    year = case_when(year == 1 ~ 2017,
                     year != 1 ~ as.numeric(year) + 2019),
    state = str_sub(GEOID, start = 1, end = 2),
    county = str_sub(GEOID, start = 3, end = 5),
    subgroup = case_when(RACE == 1 & HISP == 1 ~ "white_nh",
                         RACE == 1 & HISP == 0 ~ "white",
                         RACE == 2 & HISP == 1 ~ "black_nh",
                         RACE == 2 & HISP == 0 ~ "black",
                         HISP == 2 ~ "hispanic",
                         RACE != 1 & RACE != 2 & HISP == 1 ~ "other",
                         RACE == 0 & HISP == 0 ~ "all")
  ) 

population <- population |>
  group_by(year, state, county, subgroup) |>
  summarize(population = sum(value)) |>
  select(state, county, subgroup, population, year) |>
  filter(!is.na(subgroup))

# reshape
population_wide <- population |>
  pivot_wider(names_from = subgroup,
              values_from = population)

```

Merge population data to metrics data for specific subgroup weighting

```{r}

 metrics <- left_join(x = metrics, 
                      y = population_wide, 
                      by = c("state", "county", "year")) 

```

Generate regions datasets for stratification analysis

```{r}

northeast <- metrics |>
  filter(state_name == c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island", "Vermont", "New Jersey", "New York", "Pennsylvania"))

midwest <- metrics |>
  filter(state_name == c("Illinois", "Indiana", "Michigan", "Ohio", "Wisconsin", "Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska", "North Dakota", "South Dakota"))

south <- metrics |>
  filter(state_name == c("Delaware", "District of Columbia", "Florida", "Georgia", "Maryland", "North Carolina", "South Carolina", "Virginia", "West Virginia", "Alabama", "Kentucky", "Mississippi", "Tennessee", "Arkansas", "Louisiana", "Oklahoma", "Texas"))

west <- metrics |>
  filter(state_name == c("Arizona", "Colorado", "Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming", "Alaska", "California", "Hawaii", "Oregon", "Washington"))

```

## Calculate Medians

We calculate weighted medians for each numeric variable. This means our estimates represent the county mobility metric for the average American. Note that 2014 is excluded because we don't have population data for that year.

Subset non-segregated variables for subgroup weighting 

```{r}

metrics_nonseg <- metrics |>
  select(year, state, county, population, black_nh, white_nh, hispanic, other, rate_injury_death, ratio_population_pc_physician, share_affordable_available_30_ami, share_affordable_available_50_ami, share_affordable_available_80_ami, share_affordable_80_ami, share_affordable_50_ami, share_affordable_80_ami, share_affordable_30_ami, count_membership_associations_per_10k, ratio_high_low_ses_fb_friends, share_election_turnout, rate_crime_violent, rate_crime_property, ratio_living_wage)

```


Calculate medians 

```{r}
# Remove missing variable-year combos 
safe_wtd_quantile <- possibly(Hmisc::wtd.quantile, otherwise = NA)

weighted_median <- metrics |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median")

weighted_black <- metrics_nonseg |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -c(black_nh, white_nh, hispanic, other, population), 
      .fns = ~safe_wtd_quantile(., weights = black_nh, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_black")

weighted_hispanic <- metrics_nonseg |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -c(black_nh, white_nh, hispanic, other, population), 
      .fns = ~safe_wtd_quantile(., weights = hispanic, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_hispanic")

weighted_white <- metrics_nonseg |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -c(black_nh, white_nh, hispanic, other, population), 
      .fns = ~safe_wtd_quantile(., weights = white_nh, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_white")

weighted_northeast <- northeast |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_northeast")

weighted_midwest <- midwest |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_midwest")

weighted_south <- south |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_south")

weighted_west <- west |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "weighted_median_west")

state_count <- metrics |> 
    mutate(across(ends_with("quality"), ~case_when(. == "Strong" ~ 1,
                                                 . == "Marginal" ~ 2,
                                                 . == "Weak" ~ 3))) |>
  pivot_longer(cols = ends_with('_quality'), names_to = 'qual_varname', values_to = 'quality') |> 
  filter(quality %in% 1:2) |> 
  count(state_name, year, qual_varname) |> 
  count(qual_varname, year, name = 'n_states')
 
proportion_by_qual <- metrics |>
  mutate(across(ends_with("quality"), ~case_when(. == "Strong" ~ 1,
                                                 . == "Marginal" ~ 2,
                                                 . == "Weak" ~ 3))) |>
  select(where(is.numeric)) |>
  pivot_longer(cols = ends_with('_quality'), names_to = 'qual_varname', values_to = 'quality') |> 
  summarize(population = sum(population),
   .by = c('year', 'qual_varname', 'quality')
  ) |> 
  mutate(pop_share = population / sum(population), .by = c('year', 'qual_varname')) |> 
  filter(quality %in% 2:3) |> 
  select(-population) |> 
  arrange(qual_varname, quality)

missing_population <- metrics |>
  select(where(is.numeric) & (!ends_with('quality'))) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~missing_share(.x, weight = population)
    ), .by='year') |> 
  pivot_longer(cols = -year, values_to = "missing_population")
 
missing_county <- metrics |>
  select(where(is.numeric) & (!ends_with('quality'))) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~sum(is.na(.x)) / n()
    ), .by = 'year') |> 
  pivot_longer(cols = -year, values_to = "missing_county")
  
low_pctle <- metrics |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.05, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "low_pctle")

high_pctle <- metrics |>
  select(where(is.numeric) & (!ends_with('quality'))) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.95, na.rm = TRUE)
    ), .by = 'year'
  ) |>
  pivot_longer(cols = -year, values_to = "high_pctle")

weighted_med_table <- weighted_median |> 
  full_join(low_pctle, by = c("year", "name")) |>
  full_join(high_pctle, by = c("year", "name")) |>  
  left_join(weighted_black, by = c("year", "name")) |>  
  left_join(weighted_hispanic, by = c("year", "name")) |> 
  left_join(weighted_white, by = c("year", "name")) |> 
  left_join(weighted_northeast, by = c("year", "name")) |> 
  left_join(weighted_midwest, by = c("year", "name")) |> 
  left_join(weighted_south, by = c("year", "name")) |> 
  left_join(weighted_west, by = c("year", "name")) |> 
  full_join(missing_population, by = c("year", "name")) |>
  full_join(missing_county, by = c("year", "name")) |>
  mutate(qual_varname = paste0(name, '_quality')) |>
  left_join(proportion_by_qual, by = c("year", "qual_varname")) |>  #M:M Merge is expected behavior here 
  left_join(state_count, by = c("year", "qual_varname")) |> 
  pivot_wider(names_from = quality, names_glue = 'quality{quality}_popshare', values_from = pop_share) |> 
  select(-qual_varname, -qualityNA_popshare) |> 
  mutate(across(where(is.numeric), ~round(.,digits=2))) |> 
  rowwise() |> 
  # Share of pop that is either missing or quality = 3 for that metric
  mutate(share_lq3 = sum(missing_population, quality3_popshare, na.rm = TRUE)) |> 
  # Remove all-missing metric-years
  filter(missing_county < 1 & name != 'population') |> 
  ungroup()

# don't show the data that is not most recent year
#weighted_med_table |> 
 # kbl() |> 
  #kable_styling(font_size = 10, fixed_thead = TRUE)
```

Suppression code for stratification datasets

```{r}

stratification_suppression <- function(data, qual_var) {

proportion_by_qual <- data |>
  mutate(across(ends_with("quality"), ~case_when(. == "Strong" ~ 1,
                                                 . == "Marginal" ~ 2,
                                                 . == "Weak" ~ 3))) |>
  select(where(is.numeric)) |>
  pivot_longer(cols = ends_with('_quality'), names_to = 'qual_varname', values_to = 'quality') |> 
  summarize(population = sum(population),
   .by = c('year', 'qual_varname', 'quality')
  ) |> 
  mutate(pop_share = population / sum(population), .by = c('year', 'qual_varname')) |> 
  filter(quality %in% 3) |> 
  select(-population) |> 
  arrange(qual_varname, quality)

missing_county <- data |>
  select(where(is.numeric) & (!ends_with('quality'))) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~sum(is.na(.x)) / n()
    ), .by = 'year') |> 
  pivot_longer(cols = -year, values_to = "missing_county")

missing_population <- data |>
  select(where(is.numeric) & (!ends_with('quality'))) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~missing_share(.x, weight = population)
    ), .by='year') |> 
  pivot_longer(cols = -year, values_to = "missing_population")

suppression_data <- missing_population |>
  full_join(missing_county, by = c("year", "name")) |>
  mutate(qual_varname = paste0(name, '_quality')) |>
  left_join(proportion_by_qual, by = c("year", "qual_varname")) |>
  select(-qual_varname, -quality) |>
  mutate(across(where(is.numeric), ~round(.,digits=2)))|> 
  rowwise() |>
  mutate({{qual_var}} := sum(missing_population, pop_share, na.rm = TRUE))  |>
  filter(missing_county < 1 & name != 'population') |>
  ungroup() |>
  select(year, name, {{qual_var}})
}

```

Get stratification quality vars and merge onto dataset

```{r}

qual_northeast <- stratification_suppression(data = northeast,
                                             qual_var = share_lq3_northeast)

qual_midwest <- stratification_suppression(data = midwest,
                                           qual_var = share_lq3_midwest)

qual_south <- stratification_suppression(data = south,
                                         qual_var = share_lq3_south)

qual_west <- stratification_suppression(data = west,
                                        qual_var = share_lq3_west)

```

```{r}

weighted_med_table_supp <- weighted_med_table |> 
  full_join(qual_northeast, by = c("year", "name")) |>
  full_join(qual_midwest, by = c("year", "name")) |>
  full_join(qual_south, by = c("year", "name")) |>
  full_join(qual_west, by = c("year", "name")) 

```

Filter to most recent year

```{r}

recent_year_data <- weighted_med_table_supp |>
  group_by(name) |>
  summarize(recent_year = max(year)) 

metrics_long <- left_join(x = weighted_med_table_supp,
                          y = recent_year_data,
                          by = "name")

metrics_long_recent <- metrics_long |>
  filter(year == recent_year)

# because suppress later and show it, don't show it here  
#metrics_long_recent |> 
 # kbl() |> 
  #kable_styling(font_size = 10, fixed_thead = TRUE)

```

Add in organizational variables

```{r}

metrics_long_recent <- metrics_long_recent |>
  mutate(pillar = case_when(name == "rate_learning" | name == "share_meps20_black" | name == "share_meps20_hispanic" | name == "share_meps20_white" | name == "share_in_preschool" | name == "share_hs_degree" | name == "share_digital_access" ~ "High-Quality Education",
                            name == "index_air_hazard" | name == "rate_injury_death" | name == "ratio_population_pc_physician" | name == "share_low_birth_weight" ~ "Healthy Enviornment and Access to Good Healthcare",
                            name == "index_transit_trips" | name == "index_transportation_cost" | name == "share_affordable_available_30_ami" | name == "share_affordable_available_50_ami" | name == "share_affordable_available_80_ami" | name == "share_affordable_30_ami" | name == "share_affordable_50_ami" | name == "share_affordable_80_ami" | name == "count_homeless" | name == "share_homeless" | name == "share_black_nh_exposure" | name == "share_hispanic_exposure" | name == "share_other_nh_exposure" | name == "share_white_nh_exposure" | name == "share_poverty_exposure" | name == "count_membership_associations_per_10k" | name == "ratio_high_low_ses_fb_friends" ~ "Opportunity-Rich and Inclusive Neighborhoods", 
                            name == "share_election_turnout" | name == "share_desc_rep_other" | name == "share_desc_rep_black_nonhispanic" | name == "share_desc_rep_hispanic" | name == "share_desc_rep_white_nonhispanic" | name == "rate_crime_violent" | name == "rate_crime_property" | name == "rate_juv_arrest" ~ "Responsive and Just Governance", 
                            name == "pctl_income_20" | name == "pctl_income_50" | name == "pctl_income_80" | name == "share_debt_coll" | name == "share_employed" | name ==  "ratio_living_wage" | name == "ratio_black_nh_house_value_households" | name == "ratio_hispanic_house_value_households" | name == "ratio_other_nh_house_value_households" | name == "ratio_white_nh_house_value_households" ~ "Rewarding Work"
))

```

Metrics are suppressed (NA) if more than 15 percent are missing or low quality 

```{r suppression}

metrics_recent_suppressed <- metrics_long_recent |> 
  mutate(weighted_median = ifelse(share_lq3 > 0.15, NA, weighted_median),
         high_pctle = ifelse(share_lq3 > 0.15, NA, high_pctle),
         low_pctle = ifelse(share_lq3 > 0.15, NA,low_pctle),
         black_median = ifelse(share_lq3 > 0.15, NA, weighted_median_black),
         hispanic_median = ifelse(share_lq3 > 0.15, NA, weighted_median_hispanic),
         white_median = ifelse(share_lq3 > 0.15, NA, weighted_median_white),
         northeast_median = ifelse(share_lq3_northeast > 0.15, NA, weighted_median_northeast),
         midwest_median = ifelse(share_lq3_midwest > 0.15, NA, weighted_median_midwest),
         south_median = ifelse(share_lq3_south > 0.15, NA, weighted_median_south),
         west_median = ifelse(share_lq3_west > 0.15, NA, weighted_median_west)) |> 
  filter(!is.na(pillar)) |> # arg why wont this filter work??
  select(pillar, name, year, weighted_median, low_pctle, high_pctle, black_median, hispanic_median, white_median, northeast_median, midwest_median, south_median, west_median, share_lq3) 

metrics_recent_suppressed |> 
  kbl() |> 
  kable_styling(font_size = 10, fixed_thead = TRUE)

metrics_recent_suppressed |>
  write_csv(here("10_construct-database", "county_medians_recent_suppressed.csv"))
```
