---
title: "Combine Tenure Place Files"
author: "Aaron R. Williams & JP Walsh"
date: today
format:
  html:
    embed-resources: true
    toc: true
    toc_float: true
execute:
  message: false
  warning: false
editor_options:
  chunk_output_type: console
---

## Setup

```{r quarto-setup, include = FALSE}
options(knitr.kable.NA = "")

```

```{r load-packages}
library(tidyverse)
library(tidylog)
library(here)
library(assertr)
library(gt)

```

This function is used to ensure that the lower bound of a 95% confidence interval is always below the estimate and the upper bound of the a 95% confidence interval is always above the estimate.

```{r}
#' Test the bounds of a confidence interval relative to the estimate
#'
#' @param data The data frame of interest
#' @param estimate The unquoted name of the estimate variable
#' @param lb The unquoted name of the lower bound variable
#' @param ub The unquoted name of the upper bound variable
#'
test_bounds <- function(data, estimate, lb, ub) {

  subset <- bind_rows(
    data |>
      filter({{ ub }} < {{ lb }}),
    data |>
      filter({{ estimate }} > {{ ub }}),
    data |>
      filter({{ estimate  }} < {{ lb }}),
  )

  stopifnot(nrow(subset) == 0)

}


#' Helper function to silence output from testing code
#'
#' @param data A data frame
#'
quiet <- function(data) {

  quiet <- data

}

```



## Construct Database

### Temporary Fixes

This section implements temporary fixes and saves the resulting data in a temp folder. The saved data are then included in the output data.

```{r}
# combine multiple years
read_csv(here("02_housing/data/final/housing_place_2014_2015_2016_2017_2018_2019_2021_2022_2023_subgroups.csv")) |>
  mutate(subgroup_type = ifelse(subgroup == "All", "all", subgroup_type)) |>
  write_csv(here("data", "temp", "city_available_housing_tenure.csv"))


```


### Tenure files

Create population file with a variable for tenure.

```{r}

expand_grid(
  read_csv(here("geographic-crosswalks", "data", "place-populations.csv")),
           subgroup = c("All", "Renter", "Owner")
) %>%
   mutate(subgroup_type = ifelse(subgroup != "All", "tenure", "all")) %>%
  select(-population) %>%
  write_csv(here("data", "temp", "place-populations_tenure.csv"))

```

Read file paths to all place files with tenure subgroup information.

```{r}

filepaths <- c(

#Tenure populations
here("data", "temp", "place-populations_Tenure.csv"),

#02 Housing
here("data", "temp", "city_available_housing_tenure.csv")
# MAK: I don't think the below file exists anymore?
# here("02_housing/data/housing_subgroups_city.csv")
)


```

This code loads each file and then combines them using `left_join()`. The first file is a population file, so there should be 486 places per year.

```{r}

db_tenure <- filepaths |>
  map(
    .f = ~read_csv(.x)
  ) |>
  reduce(left_join, by = c("year", "state", "place", "subgroup", "subgroup_type"))

```

### Clean file

Some subgroup information is not available for entire years. To simplify the user experience, remove these years entirely instead of giving a bunch of NAs.

```{r}

years_data <- db_tenure %>%
  group_by(year) %>%
  filter_at(vars(-year, -state, -state_name, -place, -place_name, -subgroup_type, -subgroup), any_vars(!is.na(.))) %>%
  group_by(year) %>%
  count() %>%
  select(year) %>%
  pull()

```

Filter for only years that have data available.

```{r}
db_tenure  <- db_tenure  |>
  filter(year %in% years_data)
```

The quality flags are currently inputed as numbers 1 through 3. Update the data so these are labeled as text: 1="Strong", 2="Marginal", 3="Weak".

```{r}
db_tenure  <- db_tenure  |>
  mutate(across(ends_with("quality"), ~case_when(. == 1 ~ "Strong",
                                                . == 2 ~ "Marginal",
                                                . == 3 ~ "Weak")))
```


## Quality and Completeness

### Dimensions

At most there should be 1,458 in a year (3X486) and at the least there should be 1,455 in a year (3X485).

```{r}

db_tenure |>
  count(year) |>
  assert(
    within_bounds(1455, 1458),
    n
  )
```

### Data Quality Flags

This section summarizes data quality flags for variables and years.

```{r}
db_tenure |>
  filter(subgroup != "All") |>
  select(ends_with("_quality")) |>
  pivot_longer(everything(), names_to = "variable", values_to = "quality") |>
  count(variable, quality) |>
  filter(!is.na(quality)) |>
  print(n = 100)

db_tenure  |>
  filter(subgroup != "All") |>
  select(year, ends_with("_quality")) |>
  pivot_longer(-year, names_to = "variable", values_to = "quality") |>
  count(year, quality) |>
  print(n = 100)

```

### Full Database

Evaluate the quality variables.

```{r}
db_tenure |>
  select(ends_with("_quality")) |>
  assert(in_set("Strong", "Marginal", "Weak"), everything())

```

### 02 Housing

```{R}
db_tenure |>
  assert(
    within_bounds(0, Inf),
    share_affordable_80_ami,
    share_affordable_50_ami,
    share_affordable_30_ami
  ) |>
  assert(
    within_bounds(0, Inf),
    share_affordable_available_80_ami,
    share_affordable_available_50_ami,
    share_affordable_available_30_ami
  ) |>
  quiet()

```

## Write the File

```{r}

write_csv(db_tenure, here("data", "67_mobility-metrics_place_tenure_longitudinal.csv"))
```
