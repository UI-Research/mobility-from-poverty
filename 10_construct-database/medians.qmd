---
title: "Calculate Medians for Dashboard"
author: "Aaron R. Williams"
date: today
format:
  html:
    toc: true
    toc_float: true
    embed-resources: true
execute: 
  warning: false
editor_options: 
  chunk_output_type: console
---

# Mobility metrics median calculations

This code calculates weighted medians of the mobility metrics at the county and then the place level.

We exclude missing values and calculate the proportion of places and proportion of population missing for each metric. The function below is used to calculate the proportion of population missing for each metric.

```{r}
missing_share <- function(x, weight) {
  
  sum(as.numeric(is.na(x)) * weight) / sum(weight)
  
}
```


The steps taken for calculating the median estimates are as follow:

-   Calculate the population-weighted median
-   Calculate the proportion of places that are missing
-   Calculate the proportion of people that are missing

# County level

## Load Packages

```{r}
#| label: load-packages

options(scipen = 999)

library(tidyverse)
library(here)
library(tidycensus)

```

## Load Data

```{r}
#| label: load-data
metrics <- read_csv(here("data", "00_mobility-metrics_recent.csv")) |>
  select(-ends_with("_lb"), -ends_with("_ub"))

# Create crosswalk for each variable's corresponding quality field
metric_qual_crosswalk <- as_tibble(
  metrics |> 
  select((where(is.numeric) & !matches('quality')) | index_air_quality) |> 
  colnames()
) |> 
  rename(name = value) |> 
  mutate(qual_varname = case_when(
    str_detect(name, 'pctl_income') ~ 'pctl_income_quality',
    str_detect(name, 'share_affordable') ~ 'share_affordable_quality',
    str_detect(name, 'homeless') ~ 'homeless_quality',
    str_detect(name, 'crime') ~ 'rate_crime_quality',
    str_detect(name, 'share_desc_rep') ~ NA, # No quality variables for these
    TRUE ~ str_c(name, '_quality')
  ))
```

We load county-level population estimates from the 2020 decennial census.

```{r}
population <- get_decennial(
  geography = "county", 
  variables = "P1_001N", 
  year = 2020
) |>
  mutate(
    state = str_sub(GEOID, start = 1, end = 2),
    county = str_sub(GEOID, start = 3, end = 5)
  ) |>
  select(state, county, population = value)

metrics <- left_join(metrics, population, by = c("state", "county"))

sum(is.na(metrics$population))

```

## Calculate Medians

We calculate weighted medians for each numeric variable. This means our estimates represent the county mobility metric for the average American.

```{r}
weighted_median <- metrics |>
  select(where(is.numeric) & (!ends_with('quality') | index_air_quality)) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~Hmisc::wtd.quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    )
  ) |>
  pivot_longer(cols = everything(), values_to = "weighted_median")

# This function allows for finding grouped weighted median even when some groups have only NA values without throwing an error.
safe_wtd_quantile <- safely(Hmisc::wtd.quantile$result, otherwise = NA_real_)

weighted_median_by_qual <- metrics |>
  select(where(is.numeric)) |>
  pivot_longer(cols = ends_with('_quality') & -index_air_quality, names_to = 'quality_var', values_to = 'quality') |> 
  filter(quality %in% 1:3) |> 
  summarize(
    across(
      .cols = -population, 
      .fns = ~safe_wtd_quantile(., weights = population, probs = 0.5, na.rm = TRUE)$result
    ),
   .by = c('quality_var', 'quality')
  ) |> 
  pivot_longer(cols = where(is.numeric) & -quality, names_to = 'name', values_to = 'weighted_med_by_qual') |>
  # Merge on crosswalk so that we can limit quality_var to just the relevant one
  left_join(metric_qual_crosswalk, by = 'name') |> 
  filter(quality_var == qual_varname & quality %in% 1:3) |> 
  select(name, quality, weighted_med_by_qual) |> 
  arrange(name, quality)


missing_population <- metrics |>
  select(where(is.numeric) & (!ends_with('quality') | index_air_quality)) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~missing_share(.x, weight = population)
    )) |> 
  pivot_longer(cols = everything(), values_to = "missing_population")
 
missing_county <- metrics |>
  select(where(is.numeric) & (!ends_with('quality') | index_air_quality)) |>
  summarize(
    across(
      .cols = -population, 
      .fns = ~sum(is.na(.x)) / n()
    )) |> 
  pivot_longer(cols = everything(), values_to = "missing_county")
  
weighted_median_by_qual |>
  full_join(weighted_median, by="name") |> 
  full_join(missing_population, by = "name") |>
  full_join(missing_county, by = c("name")) |>
  filter(name != "population" & !is.na(quality)) |>
  pivot_wider(names_from = quality, names_glue = 'weighted_med_qual{quality}', values_from = weighted_med_by_qual) |> 
  select(name, starts_with('weighted'), starts_with('missing')) |> 
  print(n = Inf)


```

# Place level

This section of the code calculates variable medians at the place level.

## Load Data

```{r}
#| label: load-data-place
metrics <- read_csv(here("data", "05_mobility-metrics_place_recent.csv")) |>
  select(-ends_with("_quality"), -ends_with("_lb"), -ends_with("_ub"))

```

We load place-level population estimates from the 2020 decennial census.

```{r}
population <- get_decennial(
  geography = "place", 
  variables = "P1_001N", 
  year = 2020
) |>
  mutate(
    state = str_sub(GEOID, start = 1, end = 2),
    place = str_sub(GEOID, start = 3, end = 7)
  ) |>
  select(state, place, population = value)

metrics <- left_join(metrics, population, by = c("state", "place"))

sum(is.na(metrics$population))

```

## Calculate Medians

We calculate weighted medians for each numeric variable. This means our estimates represent the place mobility metric for the average American living in a large city.

```{r}
weighted_median <- metrics |>
  select(where(is.numeric)) |>
  summarize(
    across(
      .cols = everything(), 
      .fns = ~Hmisc::wtd.quantile(., weights = population, probs = 0.5, na.rm = TRUE)
    )
  ) |>
  pivot_longer(cols = everything(), values_to = "weighted_median")

missing_population <- metrics |>
  select(where(is.numeric)) |>
  summarize(
    across(
      .cols = everything(), 
      .fns = ~missing_share(.x, weight = population)
    )
  ) |>
  pivot_longer(cols = everything(), values_to = "missing_population")

missing_place <- metrics |>
  select(where(is.numeric)) |>
  summarize(
    across(
      .cols = everything(), 
      .fns = ~sum(is.na(.x)) / n()
    )
  ) |>
  pivot_longer(cols = everything(), values_to = "missing_place")

weighted_median |>
  full_join(missing_population, by = "name") |>
  full_join(missing_place, by = "name") |>
  filter(name != "population") |>
  print(n = Inf)

```

There is a high share of debt in collections missing at place level in the final data set - this is not an issue with the join.

```{r}

metrics_check <- read_csv(here("data", "05_mobility-metrics_place_recent.csv")) |>
  select(-ends_with("_quality"), -ends_with("_lb"), -ends_with("_ub"))

sum(is.na(metrics_check$share_debt_col))
```

The distribution of population for places missing the debt in collections variable is skewed to the right where the missing distribution for juvenile arrests closely reflects the general population distribution.

```{r}

#| echo: false
metrics %>%
  mutate(
    pop_missing_debt = ifelse(is.na(share_debt_col), NA_integer_, population),
    pop_missing_juv = ifelse(is.na(rate_juv_arrest), NA_integer_, population)
  ) %>%
  select(place_name, population, pop_missing_debt) %>%
  pivot_longer(-place_name, names_to = "pop_vars", values_to = "count") %>%
  ggplot(aes(x = count, color = pop_vars, fill = pop_vars)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle(
    "Comparison of distriubtions of population for all plcaes versus those missing share of debt in collections"
  )

metrics %>%
  mutate(
    pop_missing_debt = ifelse(is.na(share_debt_col), NA_integer_, population),
    pop_missing_juv = ifelse(is.na(rate_juv_arrest), NA_integer_, population)
  ) %>%
  select(place_name, population, pop_missing_juv) %>%
  pivot_longer(-place_name, names_to = "pop_vars", values_to = "count") %>%
  ggplot(aes(x = count, color = pop_vars, fill = pop_vars)) +
  geom_density(alpha = 0.15) +
  theme_minimal() +
  ggtitle(
    "Comparison of distriubtions of population for all plcaes versus those missing rate_juv_arrest"
  )

```
